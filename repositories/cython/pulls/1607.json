{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/1607/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/1607/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/1607"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/1607"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/1607/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/1607"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/4cfc01f704516f3d50776192bb43f2bab2bf8899"
        }
    },
    "assignee": null,
    "assignees": [],
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "A Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 522,
            "forks_count": 522,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 412,
            "open_issues_count": 412,
            "owner": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/486082?v=3",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2017-06-12T08:59:47Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 47761,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 2327,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2017-06-13T03:11:33Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 2327,
            "watchers_count": 2327
        },
        "sha": "0898a2f2bdc4dd01cc5ffacdf5dad45c9e38e32b",
        "user": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/486082?v=3",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "I've been working for quite some time on the usage of Pythran as a backend for\r\nthe Numpy operations that Cython can generate. The associated PR on github can\r\nbe found here: . This work has been sponsored by the OpenDreamKit project\r\n(https://github.com/OpenDreamKit/OpenDreamKit/).\r\n\r\nFirst of all, the Pythran project\r\n(https://github.com/serge-sans-paille/pythran) is a (subset of) Python to C++\r\ncompiler, that aims at optimizing \"scientific\" Python code.  It also provides a\r\nfull C++ implementation of a major set of the Numpy API.  Some of the advantage\r\nof this implementation is that it supports expression templates and SIMD\r\ninstructions (partially thanks to Boost.SIMD [1]).\r\n\r\nOne of the limitation of the current Numpy support of Cython is that it relies\r\non the original Numpy Python module for a lot of computations. The overall idea\r\nis to replace these calls by the Numpy implementation provided within the\r\nPythran project.\r\n\r\nI'll discuss in this mail the various choices that have been made, why and some\r\nimplementation details. Then we'll also show some benchmark to see the\r\npotential improvements, which is the point of all this in the end :)\r\n\r\nPythran limitations\r\n-------------------\r\n\r\nThe Pythran Numpy implementation has some limitations:\r\n\r\n* array \"views\" are not supported. That means that arrays must be stored in\r\n  contiguous memory. Fortran and C-style format are supported.\r\n* the endianness of the integers must be the same that the one of the targeted\r\n  architecture (note that Cython has the same limitation)\r\n\r\nThat's why we did two things:\r\n\r\n* the usage of the Pythran backend needs to be explicitly asked by the user by\r\n  providing the --np-pythran flag to the Cython compiler, or by using the\r\n  \"np_pythran\" flag to the cythonize call (for distutils)\r\n* in function arguments, Numpy buffers are replaced by fused types to be able\r\n  to fall back in case of unsupported buffers. More on this below.\r\n\r\nImplementation choices and details within Cython\r\n------------------------------------------------\r\n\r\na) PythranExpr\r\n\r\nWe defined a new type in PyrexTypes.py, which defines a Pythran buffer or\r\nexpression. A Pythran expression is associated to a Pythran expression\r\ntemplate, whose C++ type can be something like \"decltype(a+b)\". We thus compose\r\nevery expression/function call like this, which allows us to use Pythran's\r\nexpression template mechanism.\r\n\r\nWe also choose to let the C++ compiler deduced the final type of every\r\nexpression, and emit errors if something goes wrong. This choice allows not to\r\nhave to rewrite in Python all the (potentially implicit) conversion rules that\r\ncan apply in a C/C++ program, which could be error prone. The disadvantage is\r\nthat it may generate not that trivial error messages for the end-user.\r\n\r\nb) Fused types for function arguments\r\n\r\nAs Pythran has some limitations about the Numpy buffers it can support, we\r\nchose to replace Numpy buffer arguments by a fused type that can be either a\r\nPythran buffer or the original Numpy buffer. The decision is made to use one\r\ntype or another according to the limitations described above.\r\n\r\nThis allows a fallback to the original Cython implementation in case of an\r\nunsupported buffer type.\r\n\r\nTests\r\n-----\r\n\r\nA flag has been added to the runtests.py script. If provided with a path to a\r\nPythran installation, it will run the C++ tests in \"Pythran\" mode. This allows\r\nto reuse the whole test suite of Cython.\r\n\r\nBenchmark\r\n---------\r\n\r\nThe whole idea of this is to get better performances.\r\n\r\nHere is a simple benchmark of what this mode can achieve, using this cython code:\r\n\r\n```\r\ndef sqrt_sum(numpy.ndarray[numpy.float_t, ndim=1] a, numpy.ndarray[numpy.float_t, ndim=1] b):\r\n    return numpy.sqrt(numpy.sqrt(a*a+b*b))\r\n```\r\n\r\nOn my computer (Core i7-6700HQ), this gives there results, with an array of\r\n100000000 32-bit floats as input:\r\n\r\n- for the classical Cython version: 960ms\r\n- for the Cython version using the Pythran backend: 761ms\r\n- for the Cython version using the Pythran backend using SIMD instructions: 243ms\r\n\r\nwhich makes a speedup of ~3.9x using SIMD instructions.\r\n\r\nDocumentation\r\n-------------\r\n\r\nI put an example of how to use this with distutils in the documentation. It\r\ncould be put elsewhere if needed, or formatted differently.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101920692"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101920692"
                }
            },
            "body": "We track (c)imports of the special \"cython\" module in a tree transform. We could do the same for the numpy module, that would make this test safer.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T15:32:36Z",
            "diff_hunk": "@@ -6561,6 +6711,11 @@ def analyse_as_python_attribute(self, env, obj_type=None, immutable_obj=False):\n         self.member = self.attribute\n         self.type = py_object_type\n         self.is_py_attr = 1\n+        # Check for numpy calls\n+        # TODO: this is a very weak test, but how to make it better?\n+        if self.obj.is_name and self.obj.name == \"numpy\":",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101920692",
            "id": 101920692,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 348,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101920692",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101920736"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101920736"
                }
            },
            "body": "There should be a space after the \",\" (as in a couple of other places).",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T15:34:58Z",
            "diff_hunk": "@@ -10482,10 +10653,15 @@ def analyse_types(self, env):\n         return self\n \n     def analyse_operation(self, env):\n-        if self.is_py_operation():\n+        if self.is_pythran_operation(env):\n+            self.type = self.result_type(self.operand1.type,\n+                                         self.operand2.type,env)",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101920736",
            "id": 101920736,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 411,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101920736",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101920944"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101920944"
                }
            },
            "body": "I think a union is a better way to do this.\r\nhttps://stackoverflow.com/questions/1001307/detecting-endianness-programmatically-in-a-c-program/1001373#1001373",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T15:44:36Z",
            "diff_hunk": "@@ -458,6 +483,12 @@ def _buffer_declarations(self, pyx_code, decl_code, all_buffer_types):\n                 except (ImportError, AttributeError, TypeError):\n                     ndarray = None\n             \"\"\")\n+        pyx_code.func_defs.put_chunk(\n+            u\"\"\"\n+                def __is_little_endian():\n+                    cdef int endian_detector = 1\n+                    return (<char*>&endian_detector)[0] != 0",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101920944",
            "id": 101920944,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 110,
            "path": "Cython/Compiler/FusedNode.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101920944",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921030"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921030"
                }
            },
            "body": "Yes, it's good to warn about this.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T15:48:10Z",
            "diff_hunk": "@@ -569,6 +570,10 @@ def __init__(self, defaults=None, **kw):\n         if options['cache'] is True:\n             options['cache'] = os.path.expanduser(\"~/.cycache\")\n \n+        if options['np_pythran'] and not options['cplus']:\n+            import warnings\n+            warnings.warn(\"C++ mode forced when in Pythran mode!\")",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921030",
            "id": 101921030,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 14,
            "path": "Cython/Compiler/Main.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921030",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921085"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921085"
                }
            },
            "body": "Static code like this should go into an external utility code file. I'd propose `CppSupport.cpp` in this case.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T15:51:06Z",
            "diff_hunk": "@@ -2841,6 +2851,26 @@ def generate_typeptr_assignment_code(self, entry, code):\n                 \"%s = &%s;\" % (\n                     type.typeptr_cname, type.typeobj_cname))\n \n+    def generate_pythran_conversion_code(self, env, code):\n+        code.putln('''\n+template <class T>\n+auto to_python_from_expr(T &&value) -> decltype(to_python(\n+      typename pythonic::returnable<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::type{std::forward<T>(value)}))\n+{\n+  using returnable_type = typename pythonic::returnable<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::type;\n+  return to_python(returnable_type{std::forward<T>(value)});\n+}\n+        ''')\n+\n+    def generate_cpp_inplace_object_destructor(self, env, code):\n+        code.putln('''\n+template <class T>\n+inline static void __cython_destructor(T& o)\n+{\n+  o.~T();\n+}\n+\t''')",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921085",
            "id": 101921085,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 68,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921085",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921204"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921204"
                }
            },
            "body": "PEP8 says: two empty lines between top-level constructs.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T15:56:26Z",
            "diff_hunk": "@@ -1058,7 +1063,6 @@ def same_as(self, other_type, compare_base=True):\n                 self.cast == other_type.cast and\n                 (not compare_base or self.base.same_as(other_type.base)))\n \n-",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921204",
            "id": 101921204,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 30,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921204",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921273"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921273"
                }
            },
            "body": "\"scope\" does not seem to be used below. Going straight for \"global_scope\" seems correct.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T15:59:06Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921273",
            "id": 101921273,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 8,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921273",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921332"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921332"
                }
            },
            "body": "I'd like to avoid hasattr() here and rather make sure that all types have it.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T16:01:16Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921332",
            "id": 101921332,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 18,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921332",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921382"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921382"
                }
            },
            "body": "Same as for \"is_numeric\" above, avoid hasattr().",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T16:03:08Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921382",
            "id": 101921382,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 35,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921382",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921394"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921394"
                }
            },
            "body": "No need to call str() here, that's what \"%s\" does.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T16:03:38Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921394",
            "id": 101921394,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 39,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921394",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921453"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921453"
                }
            },
            "body": "Minor code style nit: you can avoid the ugly trailing line continuation by starting the tuple in the first line and breaking it after the opening parenthesis.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T16:05:30Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))\n+    return None\n+\n+def type_remove_ref(ty):\n+    return \"typename std::remove_reference<%s>::type\" % ty\n+\n+def pythran_binop_type(op, tA, tB):\n+    return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % \\\n+        (pythran_type(tA), op, pythran_type(tB))\n+\n+def pythran_unaryop_type(op, type_):\n+    return \"decltype(%sstd::declval<%s>())\" % \\\n+        (op, pythran_type(type_))",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921453",
            "id": 101921453,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 51,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921453",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921487"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921487"
                }
            },
            "body": "3-args getattr() is enough here, no need for hasattr().",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T16:06:58Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))\n+    return None\n+\n+def type_remove_ref(ty):\n+    return \"typename std::remove_reference<%s>::type\" % ty\n+\n+def pythran_binop_type(op, tA, tB):\n+    return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % \\\n+        (pythran_type(tA), op, pythran_type(tB))\n+\n+def pythran_unaryop_type(op, type_):\n+    return \"decltype(%sstd::declval<%s>())\" % \\\n+        (op, pythran_type(type_))\n+\n+def pythran_indexing_type(type_, indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                n = 2\n+            else:\n+                func = \"slice\"\n+                n = 3\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join([\"0\"]*n))\n+        elif idx.type.is_int:\n+            return \"std::declval<long>()\"\n+        elif idx.type.is_pythran_expr:\n+            return \"std::declval<%s>()\" % idx.type.pythran_type\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    indexing = \",\".join(index_code(idx) for idx in indices)\n+    return type_remove_ref(\"decltype(std::declval<%s>()(%s))\" % (pythran_type(type_), indexing))\n+\n+def pythran_indexing_code(indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            values = idx.start, idx.stop, idx.step\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                values = values[:2]\n+            else:\n+                func = \"slice\"\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join((v.pythran_result() for v in values)))\n+        elif idx.type.is_int:\n+            return idx.result()\n+        elif idx.type.is_pythran_expr:\n+            return idx.pythran_result()\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    return \",\".join(index_code(idx) for idx in indices)\n+\n+def pythran_func_type(func, args):\n+    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n+    return \"decltype(pythonic::numpy::functor::%s{}(%s))\" % (func, args)\n+\n+def to_pythran(op,ptype=None):\n+    #if hasattr(op,\"entry\") and hasattr(op.entry, \"pythran_buf\") and op.entry.pythran_buf is not None:\n+    #    return op.entry.pythran_buf.cname\n+    op_type = op.type\n+    if is_type(op_type,[\"is_pythran_expr\",\"is_int\",\"is_numeric\",\"is_float\",\"is_complex\"]):\n+        return op.result()\n+    if op.is_none:\n+        return \"pythonic::__builtin__::None\"\n+    if ptype is None:\n+        ptype = pythran_type(op_type)\n+    assert(op.type.is_pyobject)\n+    return \"from_python<%s>(%s)\" % (ptype, op.py_result())\n+\n+def from_pythran():\n+    return \"to_python\"\n+\n+def is_type(type_, types):\n+    for attr in types:\n+        if hasattr(type_, attr) and getattr(type_, attr):",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921487",
            "id": 101921487,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 110,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921487",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921500"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921500"
                }
            },
            "body": "As before, spaces make this list more readable.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T16:07:47Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))\n+    return None\n+\n+def type_remove_ref(ty):\n+    return \"typename std::remove_reference<%s>::type\" % ty\n+\n+def pythran_binop_type(op, tA, tB):\n+    return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % \\\n+        (pythran_type(tA), op, pythran_type(tB))\n+\n+def pythran_unaryop_type(op, type_):\n+    return \"decltype(%sstd::declval<%s>())\" % \\\n+        (op, pythran_type(type_))\n+\n+def pythran_indexing_type(type_, indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                n = 2\n+            else:\n+                func = \"slice\"\n+                n = 3\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join([\"0\"]*n))\n+        elif idx.type.is_int:\n+            return \"std::declval<long>()\"\n+        elif idx.type.is_pythran_expr:\n+            return \"std::declval<%s>()\" % idx.type.pythran_type\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    indexing = \",\".join(index_code(idx) for idx in indices)\n+    return type_remove_ref(\"decltype(std::declval<%s>()(%s))\" % (pythran_type(type_), indexing))\n+\n+def pythran_indexing_code(indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            values = idx.start, idx.stop, idx.step\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                values = values[:2]\n+            else:\n+                func = \"slice\"\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join((v.pythran_result() for v in values)))\n+        elif idx.type.is_int:\n+            return idx.result()\n+        elif idx.type.is_pythran_expr:\n+            return idx.pythran_result()\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    return \",\".join(index_code(idx) for idx in indices)\n+\n+def pythran_func_type(func, args):\n+    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n+    return \"decltype(pythonic::numpy::functor::%s{}(%s))\" % (func, args)\n+\n+def to_pythran(op,ptype=None):\n+    #if hasattr(op,\"entry\") and hasattr(op.entry, \"pythran_buf\") and op.entry.pythran_buf is not None:\n+    #    return op.entry.pythran_buf.cname\n+    op_type = op.type\n+    if is_type(op_type,[\"is_pythran_expr\",\"is_int\",\"is_numeric\",\"is_float\",\"is_complex\"]):",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921500",
            "id": 101921500,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 96,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921500",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r101921712"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/101921712"
                }
            },
            "body": "I'd rather have people use a directive here (i.e. put `# cython: np_pythran=True` at the top of your file), rather than a cythonize() option.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-19T16:16:14Z",
            "diff_hunk": "@@ -0,0 +1,41 @@\n+.. highlight:: python\n+\n+.. _numpy-pythran:\n+\n+**************************\n+Pythran as a Numpy backend\n+**************************\n+\n+Using the flag ``--np-pythran``, it is possible to use the `Pythran`_ numpy\n+implementation for numpy related operations. One advantage to use this backend\n+is that the Pythran implementation uses C++ expression templates to save memory\n+transfers and can benefit from SIMD instructions of modern CPU.\n+\n+This can lead to really interesting speedup in some cases, going from 2 up to\n+16, depending on the targeted CPU architecture and the original algorithm.\n+\n+Please note that this feature is experimental.\n+\n+Usage example with distutils\n+----------------------------\n+\n+You first need to install Pythran. See its `documentation\n+<https://pythonhosted.org/pythran/MANUAL.html>`_ for more information.\n+\n+Then, simply add ``np_pythran=True`` to the ``cythonize`` call in the related\n+setup.py.\n+\n+Here is an example:\n+\n+.. code::\n+\n+  from distutils.core import setup\n+  from Cython.Build import cythonize\n+  \n+  setup(\n+      name = \"My hello app\",\n+      ext_modules = cythonize('hello_pythran.pyx', np_pythran=True)",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r101921712",
            "id": 101921712,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 37,
            "path": "docs/src/userguide/numpy_pythran.rst",
            "position": 37,
            "pull_request_review_id": 22662154,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/101921712",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103076744"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103076744"
                }
            },
            "body": "I actually based this code on code that already exists in cython :) I'll take a look at what this stack overflow thread propose!",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T10:52:01Z",
            "diff_hunk": "@@ -458,6 +483,12 @@ def _buffer_declarations(self, pyx_code, decl_code, all_buffer_types):\n                 except (ImportError, AttributeError, TypeError):\n                     ndarray = None\n             \"\"\")\n+        pyx_code.func_defs.put_chunk(\n+            u\"\"\"\n+                def __is_little_endian():\n+                    cdef int endian_detector = 1\n+                    return (<char*>&endian_detector)[0] != 0",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103076744",
            "id": 103076744,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 110,
            "path": "Cython/Compiler/FusedNode.py",
            "position": null,
            "pull_request_review_id": 23856023,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103076744",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103076754"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103076754"
                }
            },
            "body": "Sorry about that...",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T10:52:36Z",
            "diff_hunk": "@@ -1058,7 +1063,6 @@ def same_as(self, other_type, compare_base=True):\n                 self.cast == other_type.cast and\n                 (not compare_base or self.base.same_as(other_type.base)))\n \n-",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103076754",
            "id": 103076754,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 30,
            "path": "Cython/Compiler/PyrexTypes.py",
            "position": null,
            "pull_request_review_id": 23856032,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103076754",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103076858"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103076858"
                }
            },
            "body": "Indeed, that's part of \"old\" code I forgot to remove...",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T11:00:16Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103076858",
            "id": 103076858,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 8,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23856123,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103076858",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079859"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079859"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:30:42Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))\n+    return None\n+\n+def type_remove_ref(ty):\n+    return \"typename std::remove_reference<%s>::type\" % ty\n+\n+def pythran_binop_type(op, tA, tB):\n+    return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % \\\n+        (pythran_type(tA), op, pythran_type(tB))\n+\n+def pythran_unaryop_type(op, type_):\n+    return \"decltype(%sstd::declval<%s>())\" % \\\n+        (op, pythran_type(type_))\n+\n+def pythran_indexing_type(type_, indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                n = 2\n+            else:\n+                func = \"slice\"\n+                n = 3\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join([\"0\"]*n))\n+        elif idx.type.is_int:\n+            return \"std::declval<long>()\"\n+        elif idx.type.is_pythran_expr:\n+            return \"std::declval<%s>()\" % idx.type.pythran_type\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    indexing = \",\".join(index_code(idx) for idx in indices)\n+    return type_remove_ref(\"decltype(std::declval<%s>()(%s))\" % (pythran_type(type_), indexing))\n+\n+def pythran_indexing_code(indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            values = idx.start, idx.stop, idx.step\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                values = values[:2]\n+            else:\n+                func = \"slice\"\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join((v.pythran_result() for v in values)))\n+        elif idx.type.is_int:\n+            return idx.result()\n+        elif idx.type.is_pythran_expr:\n+            return idx.pythran_result()\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    return \",\".join(index_code(idx) for idx in indices)\n+\n+def pythran_func_type(func, args):\n+    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n+    return \"decltype(pythonic::numpy::functor::%s{}(%s))\" % (func, args)\n+\n+def to_pythran(op,ptype=None):\n+    #if hasattr(op,\"entry\") and hasattr(op.entry, \"pythran_buf\") and op.entry.pythran_buf is not None:\n+    #    return op.entry.pythran_buf.cname\n+    op_type = op.type\n+    if is_type(op_type,[\"is_pythran_expr\",\"is_int\",\"is_numeric\",\"is_float\",\"is_complex\"]):\n+        return op.result()\n+    if op.is_none:\n+        return \"pythonic::__builtin__::None\"\n+    if ptype is None:\n+        ptype = pythran_type(op_type)\n+    assert(op.type.is_pyobject)\n+    return \"from_python<%s>(%s)\" % (ptype, op.py_result())\n+\n+def from_pythran():\n+    return \"to_python\"\n+\n+def is_type(type_, types):\n+    for attr in types:\n+        if hasattr(type_, attr) and getattr(type_, attr):",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079859",
            "id": 103079859,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 110,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23859079,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079859",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079861"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079861"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:30:48Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))\n+    return None\n+\n+def type_remove_ref(ty):\n+    return \"typename std::remove_reference<%s>::type\" % ty\n+\n+def pythran_binop_type(op, tA, tB):\n+    return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % \\\n+        (pythran_type(tA), op, pythran_type(tB))\n+\n+def pythran_unaryop_type(op, type_):\n+    return \"decltype(%sstd::declval<%s>())\" % \\\n+        (op, pythran_type(type_))\n+\n+def pythran_indexing_type(type_, indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                n = 2\n+            else:\n+                func = \"slice\"\n+                n = 3\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join([\"0\"]*n))\n+        elif idx.type.is_int:\n+            return \"std::declval<long>()\"\n+        elif idx.type.is_pythran_expr:\n+            return \"std::declval<%s>()\" % idx.type.pythran_type\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    indexing = \",\".join(index_code(idx) for idx in indices)\n+    return type_remove_ref(\"decltype(std::declval<%s>()(%s))\" % (pythran_type(type_), indexing))\n+\n+def pythran_indexing_code(indices):\n+    def index_code(idx):\n+        if idx.is_slice:\n+            values = idx.start, idx.stop, idx.step\n+            if idx.step.is_none:\n+                func = \"contiguous_slice\"\n+                values = values[:2]\n+            else:\n+                func = \"slice\"\n+            return \"pythonic::types::%s(%s)\" % (func,\",\".join((v.pythran_result() for v in values)))\n+        elif idx.type.is_int:\n+            return idx.result()\n+        elif idx.type.is_pythran_expr:\n+            return idx.pythran_result()\n+        raise ValueError(\"unsupported indice type %s!\" % str(idx.type))\n+    return \",\".join(index_code(idx) for idx in indices)\n+\n+def pythran_func_type(func, args):\n+    args = \",\".join((\"std::declval<%s>()\" % pythran_type(a.type) for a in args))\n+    return \"decltype(pythonic::numpy::functor::%s{}(%s))\" % (func, args)\n+\n+def to_pythran(op,ptype=None):\n+    #if hasattr(op,\"entry\") and hasattr(op.entry, \"pythran_buf\") and op.entry.pythran_buf is not None:\n+    #    return op.entry.pythran_buf.cname\n+    op_type = op.type\n+    if is_type(op_type,[\"is_pythran_expr\",\"is_int\",\"is_numeric\",\"is_float\",\"is_complex\"]):",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079861",
            "id": 103079861,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 96,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23859081,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079861",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079863"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:30:51Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))\n+    return None\n+\n+def type_remove_ref(ty):\n+    return \"typename std::remove_reference<%s>::type\" % ty\n+\n+def pythran_binop_type(op, tA, tB):\n+    return \"decltype(std::declval<%s>() %s std::declval<%s>())\" % \\\n+        (pythran_type(tA), op, pythran_type(tB))\n+\n+def pythran_unaryop_type(op, type_):\n+    return \"decltype(%sstd::declval<%s>())\" % \\\n+        (op, pythran_type(type_))",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079863",
            "id": 103079863,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 51,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23859083,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079863",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079864"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079864"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:30:55Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:\n+        return \"decltype(pythonic::__builtin__::None)\"\n+    if Ty.is_numeric:\n+        return Ty.sign_and_name()\n+    raise ValueError(\"unsupported pythran type %s (%s)\" % (str(Ty), str(type(Ty))))",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079864",
            "id": 103079864,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 39,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23859084,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079864",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079866"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079866"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:31:00Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric\n+\n+def pythran_type(Ty,ptype=\"ndarray\"):\n+    if Ty.is_buffer:\n+        ndim,dtype = Ty.ndim, Ty.dtype\n+        if isinstance(dtype, CStructOrUnionType):\n+            ctype = dtype.cname\n+        elif isinstance(dtype, CType):\n+            ctype = dtype.sign_and_name()\n+        elif isinstance(dtype, CTypedefType):\n+            ctype = dtype.typedef_cname\n+        else:\n+            raise ValueError(\"unsupported type %s!\" % str(dtype))\n+        return \"pythonic::types::%s<%s,%d>\" % (ptype,ctype, ndim)\n+    from .PyrexTypes import PythranExpr\n+    if Ty.is_pythran_expr:\n+        return Ty.pythran_type\n+    if hasattr(Ty,\"is_none\") and Ty.is_none:",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079866",
            "id": 103079866,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 35,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23859086,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079866",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079870"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079870"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:31:05Z",
            "diff_hunk": "@@ -0,0 +1,154 @@\n+from .PyrexTypes import BufferType, CType, CTypedefType, CStructOrUnionType\n+\n+_pythran_var_prefix = \"__pythran__\"\n+# Pythran/Numpy specific operations\n+def has_np_pythran(env):\n+    scope = env.outer_scope\n+    while scope != None:\n+        scope = scope.outer_scope\n+    ctx = env.global_scope().context\n+    if ctx is None:\n+        return False\n+    options = ctx.options\n+    return options is not None and options.np_pythran\n+\n+def is_pythran_supported_dtype(type_):\n+    if isinstance(type_, CTypedefType):\n+        return is_pythran_supported_type(type_.typedef_base_type)\n+    return hasattr(type_,\"is_numeric\") and type_.is_numeric",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079870",
            "id": 103079870,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 18,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23859090,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079870",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079873"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079873"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:31:13Z",
            "diff_hunk": "@@ -2841,6 +2851,26 @@ def generate_typeptr_assignment_code(self, entry, code):\n                 \"%s = &%s;\" % (\n                     type.typeptr_cname, type.typeobj_cname))\n \n+    def generate_pythran_conversion_code(self, env, code):\n+        code.putln('''\n+template <class T>\n+auto to_python_from_expr(T &&value) -> decltype(to_python(\n+      typename pythonic::returnable<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::type{std::forward<T>(value)}))\n+{\n+  using returnable_type = typename pythonic::returnable<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::type;\n+  return to_python(returnable_type{std::forward<T>(value)});\n+}\n+        ''')\n+\n+    def generate_cpp_inplace_object_destructor(self, env, code):\n+        code.putln('''\n+template <class T>\n+inline static void __cython_destructor(T& o)\n+{\n+  o.~T();\n+}\n+\t''')",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079873",
            "id": 103079873,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 68,
            "path": "Cython/Compiler/ModuleNode.py",
            "position": null,
            "pull_request_review_id": 23859095,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079873",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079875"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079875"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:31:23Z",
            "diff_hunk": "@@ -458,6 +483,12 @@ def _buffer_declarations(self, pyx_code, decl_code, all_buffer_types):\n                 except (ImportError, AttributeError, TypeError):\n                     ndarray = None\n             \"\"\")\n+        pyx_code.func_defs.put_chunk(\n+            u\"\"\"\n+                def __is_little_endian():\n+                    cdef int endian_detector = 1\n+                    return (<char*>&endian_detector)[0] != 0",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079875",
            "id": 103079875,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 110,
            "path": "Cython/Compiler/FusedNode.py",
            "position": null,
            "pull_request_review_id": 23859099,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079875",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103079876"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103079876"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T14:31:26Z",
            "diff_hunk": "@@ -10482,10 +10653,15 @@ def analyse_types(self, env):\n         return self\n \n     def analyse_operation(self, env):\n-        if self.is_py_operation():\n+        if self.is_pythran_operation(env):\n+            self.type = self.result_type(self.operand1.type,\n+                                         self.operand2.type,env)",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103079876",
            "id": 103079876,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 411,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 23859100,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103079876",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103081565"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103081565"
                }
            },
            "body": "I tried to add a cython directive, but the main issue I see is that we need toforce the language to C++. This needs to be done at a module level, and thus doesn't seem compatible with a Cython compiler directive, that can be applied for instance at a function level.\r\n\r\nI tried to add a distutils \"settings\", but they are forwarded straight to the disutils.Extension object constructor, thought we can \"override\" this by some not that nice hacks.\r\n\r\nDo you have other idea to do this?",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T15:53:21Z",
            "diff_hunk": "@@ -0,0 +1,41 @@\n+.. highlight:: python\n+\n+.. _numpy-pythran:\n+\n+**************************\n+Pythran as a Numpy backend\n+**************************\n+\n+Using the flag ``--np-pythran``, it is possible to use the `Pythran`_ numpy\n+implementation for numpy related operations. One advantage to use this backend\n+is that the Pythran implementation uses C++ expression templates to save memory\n+transfers and can benefit from SIMD instructions of modern CPU.\n+\n+This can lead to really interesting speedup in some cases, going from 2 up to\n+16, depending on the targeted CPU architecture and the original algorithm.\n+\n+Please note that this feature is experimental.\n+\n+Usage example with distutils\n+----------------------------\n+\n+You first need to install Pythran. See its `documentation\n+<https://pythonhosted.org/pythran/MANUAL.html>`_ for more information.\n+\n+Then, simply add ``np_pythran=True`` to the ``cythonize`` call in the related\n+setup.py.\n+\n+Here is an example:\n+\n+.. code::\n+\n+  from distutils.core import setup\n+  from Cython.Build import cythonize\n+  \n+  setup(\n+      name = \"My hello app\",\n+      ext_modules = cythonize('hello_pythran.pyx', np_pythran=True)",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103081565",
            "id": 103081565,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 37,
            "path": "docs/src/userguide/numpy_pythran.rst",
            "position": 37,
            "pull_request_review_id": 23860563,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103081565",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103086324"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103086324"
                }
            },
            "body": "I could live with having it fail hard if it finds a pythran directive in non-C++ mode. If it's enabled at the module level (comment at top of file), switching on C++ mode automatically seems ok, but for in-module usage, failing to compile and explaining how to fix it is just fine.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T19:30:42Z",
            "diff_hunk": "@@ -0,0 +1,41 @@\n+.. highlight:: python\n+\n+.. _numpy-pythran:\n+\n+**************************\n+Pythran as a Numpy backend\n+**************************\n+\n+Using the flag ``--np-pythran``, it is possible to use the `Pythran`_ numpy\n+implementation for numpy related operations. One advantage to use this backend\n+is that the Pythran implementation uses C++ expression templates to save memory\n+transfers and can benefit from SIMD instructions of modern CPU.\n+\n+This can lead to really interesting speedup in some cases, going from 2 up to\n+16, depending on the targeted CPU architecture and the original algorithm.\n+\n+Please note that this feature is experimental.\n+\n+Usage example with distutils\n+----------------------------\n+\n+You first need to install Pythran. See its `documentation\n+<https://pythonhosted.org/pythran/MANUAL.html>`_ for more information.\n+\n+Then, simply add ``np_pythran=True`` to the ``cythonize`` call in the related\n+setup.py.\n+\n+Here is an example:\n+\n+.. code::\n+\n+  from distutils.core import setup\n+  from Cython.Build import cythonize\n+  \n+  setup(\n+      name = \"My hello app\",\n+      ext_modules = cythonize('hello_pythran.pyx', np_pythran=True)",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103086324",
            "id": 103086324,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 37,
            "path": "docs/src/userguide/numpy_pythran.rst",
            "position": 37,
            "pull_request_review_id": 23864988,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103086324",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103086432"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103086432"
                }
            },
            "body": "This seems rather redundant now :)",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T19:35:30Z",
            "diff_hunk": "@@ -116,16 +112,17 @@ def is_pythran_supported_node_or_none(node):\n \n def is_pythran_supported_type(type_):\n     pythran_supported = (\n-        \"is_pythran_expr\",\"is_int\",\"is_numeric\",\"is_float\",\"is_none\",\"is_complex\")\n+        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_none\",\n+        \"is_complex\")\n     return is_type(type_, pythran_supported) or is_pythran_expr(type_)\n \n def is_pythran_supported_operation_type(type_):\n     pythran_supported = (\n-        \"is_pythran_expr\",\"is_int\",\"is_numeric\",\"is_float\",\"is_complex\")\n+        \"is_pythran_expr\", \"is_int\", \"is_numeric\", \"is_float\", \"is_complex\")\n     return is_type(type_,pythran_supported) or is_pythran_expr(type_)\n \n def is_pythran_expr(type_):\n-    return hasattr(type_, \"is_pythran_expr\") and type_.is_pythran_expr\n+    return type_.is_pythran_expr",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103086432",
            "id": 103086432,
            "original_commit_id": "e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "original_position": 89,
            "path": "Cython/Compiler/Pythran.py",
            "position": null,
            "pull_request_review_id": 23865096,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103086432",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103086637"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103086637"
                }
            },
            "body": "Problem is, C int isn't guaranteed to be 4 bytes. And then, stdint.h isn't available in some MSVC versions...\r\nI think we should provide the endianess check globally for the complete Cython module, i.e. do it in C and move it to ModuleSetupCode.c. There is an example for defining uint16_t in TypeConversion.c, uint32_t could be defined similarly. (Although ISTM that we should use a more safely escaped name than uint16_t there as well...)",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-25T19:44:29Z",
            "diff_hunk": "@@ -579,6 +580,12 @@ def make_fused_cpdef(self, orig_py_func, env, is_def):\n         decl_code = Code.PyxCodeWriter(context=context)\n         decl_code.put_chunk(\n             u\"\"\"\n+                cdef union {{lecheck_cname}}:\n+                    unsigned int i",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103086637",
            "id": 103086637,
            "original_commit_id": "e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "original_position": 33,
            "path": "Cython/Compiler/FusedNode.py",
            "position": null,
            "pull_request_review_id": 23865096,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103086637",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103321743"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103321743"
                }
            },
            "body": "Fixed in https://github.com/cython/cython/pull/1607/commits/55bbef398595d760c1d2736809f4a10f334a98cc",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-27T21:52:18Z",
            "diff_hunk": "@@ -579,6 +580,12 @@ def make_fused_cpdef(self, orig_py_func, env, is_def):\n         decl_code = Code.PyxCodeWriter(context=context)\n         decl_code.put_chunk(\n             u\"\"\"\n+                cdef union {{lecheck_cname}}:\n+                    unsigned int i",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103321743",
            "id": 103321743,
            "original_commit_id": "e3fb29c91b13edcc9297b02b0ca10e9a3da3928d",
            "original_position": 33,
            "path": "Cython/Compiler/FusedNode.py",
            "position": null,
            "pull_request_review_id": 24104865,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103321743",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r103335023"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/103335023"
                }
            },
            "body": "One first improvement here: https://github.com/cython/cython/pull/1607/commits/ed5f93344aab345a79ce13867da01d67b4e5736c",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-02-27T22:58:21Z",
            "diff_hunk": "@@ -6561,6 +6711,11 @@ def analyse_as_python_attribute(self, env, obj_type=None, immutable_obj=False):\n         self.member = self.attribute\n         self.type = py_object_type\n         self.is_py_attr = 1\n+        # Check for numpy calls\n+        # TODO: this is a very weak test, but how to make it better?\n+        if self.obj.is_name and self.obj.name == \"numpy\":",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r103335023",
            "id": 103335023,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 348,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_review_id": 24118335,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/103335023",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r104293747"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/104293747"
                }
            },
            "body": "I started to add a np_pythran compiler attribute in https://github.com/cython/cython/pull/1607/commits/ff71312b2408f9d0939f3d965a83ebe0e6f7e25a . I \"just\" need to get this information before compoilation to add the include directory to the Pytran module. If I understand correctly, it seems that, for now, \"only\" distuils directives are taken into account at the compilation stage. If I understand correctly, I need to add a \"parsing\" the same way it is done for distutils directives.\r\n\r\nDo I miss something ? ",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-03-04T18:17:57Z",
            "diff_hunk": "@@ -0,0 +1,41 @@\n+.. highlight:: python\n+\n+.. _numpy-pythran:\n+\n+**************************\n+Pythran as a Numpy backend\n+**************************\n+\n+Using the flag ``--np-pythran``, it is possible to use the `Pythran`_ numpy\n+implementation for numpy related operations. One advantage to use this backend\n+is that the Pythran implementation uses C++ expression templates to save memory\n+transfers and can benefit from SIMD instructions of modern CPU.\n+\n+This can lead to really interesting speedup in some cases, going from 2 up to\n+16, depending on the targeted CPU architecture and the original algorithm.\n+\n+Please note that this feature is experimental.\n+\n+Usage example with distutils\n+----------------------------\n+\n+You first need to install Pythran. See its `documentation\n+<https://pythonhosted.org/pythran/MANUAL.html>`_ for more information.\n+\n+Then, simply add ``np_pythran=True`` to the ``cythonize`` call in the related\n+setup.py.\n+\n+Here is an example:\n+\n+.. code::\n+\n+  from distutils.core import setup\n+  from Cython.Build import cythonize\n+  \n+  setup(\n+      name = \"My hello app\",\n+      ext_modules = cythonize('hello_pythran.pyx', np_pythran=True)",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r104293747",
            "id": 104293747,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 37,
            "path": "docs/src/userguide/numpy_pythran.rst",
            "position": 37,
            "pull_request_review_id": 25129125,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/104293747",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r110535442"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/110535442"
                }
            },
            "body": "This should have a `__Pyx_` prefix to prevent naming collisions.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-04-09T08:04:00Z",
            "diff_hunk": "@@ -659,6 +672,22 @@ static int __Pyx_check_binary_version(void) {\n     return 0;\n }\n \n+/////////////// IsLittleEndian.proto ///////////////\n+\n+static int __Is_Little_Endian(void);",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r110535442",
            "id": 110535442,
            "original_commit_id": "55bbef398595d760c1d2736809f4a10f334a98cc",
            "original_position": 26,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 31718285,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/110535442",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r110737636"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/110737636"
                }
            },
            "body": "Done!",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-04-10T19:04:36Z",
            "diff_hunk": "@@ -659,6 +672,22 @@ static int __Pyx_check_binary_version(void) {\n     return 0;\n }\n \n+/////////////// IsLittleEndian.proto ///////////////\n+\n+static int __Is_Little_Endian(void);",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r110737636",
            "id": 110737636,
            "original_commit_id": "55bbef398595d760c1d2736809f4a10f334a98cc",
            "original_position": 26,
            "path": "Cython/Utility/ModuleSetupCode.c",
            "position": null,
            "pull_request_review_id": 31931627,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/110737636",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r115123375"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/115123375"
                }
            },
            "body": "Could we read this list from the current Pythran installation somehow? It might change, and it would be nice if Cython wouldn't block this change in the future.",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-05-06T16:08:23Z",
            "diff_hunk": "@@ -845,7 +860,13 @@ def copy_to_build_dir(filepath, root=root):\n         for source in m.sources:\n             base, ext = os.path.splitext(source)\n             if ext in ('.pyx', '.py'):\n-                if m.language == 'c++':\n+                if np_pythran:\n+                    c_file = base + '.cpp'\n+                    options = pythran_options\n+                    m.include_dirs.append(pythran_include_dir)\n+                    m.extra_compile_args.extend(('-std=c++11','-DENABLE_PYTHON_MODULE','-D__PYTHRAN__'))",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r115123375",
            "id": 115123375,
            "original_commit_id": "95036cfce7beed5239c149654baed5a5d94476b1",
            "original_position": 61,
            "path": "Cython/Build/Dependencies.py",
            "position": null,
            "pull_request_review_id": 36647163,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/115123375",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r120012362"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/120012362"
                }
            },
            "body": "This information can be read through:\r\n\r\n```\r\nfrom pythran.config import cfg\r\n cfg.get('compiler', 'cflags')\r\n```\r\n (without the ``-D__PYTHRAN__``)",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-06-04T15:10:52Z",
            "diff_hunk": "@@ -845,7 +860,13 @@ def copy_to_build_dir(filepath, root=root):\n         for source in m.sources:\n             base, ext = os.path.splitext(source)\n             if ext in ('.pyx', '.py'):\n-                if m.language == 'c++':\n+                if np_pythran:\n+                    c_file = base + '.cpp'\n+                    options = pythran_options\n+                    m.include_dirs.append(pythran_include_dir)\n+                    m.extra_compile_args.extend(('-std=c++11','-DENABLE_PYTHON_MODULE','-D__PYTHRAN__'))",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r120012362",
            "id": 120012362,
            "original_commit_id": "95036cfce7beed5239c149654baed5a5d94476b1",
            "original_position": 61,
            "path": "Cython/Build/Dependencies.py",
            "position": null,
            "pull_request_review_id": 41943541,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/120012362",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/863807?v=3",
                "events_url": "https://api.github.com/users/serge-sans-paille/events{/privacy}",
                "followers_url": "https://api.github.com/users/serge-sans-paille/followers",
                "following_url": "https://api.github.com/users/serge-sans-paille/following{/other_user}",
                "gists_url": "https://api.github.com/users/serge-sans-paille/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/serge-sans-paille",
                "id": 863807,
                "login": "serge-sans-paille",
                "organizations_url": "https://api.github.com/users/serge-sans-paille/orgs",
                "received_events_url": "https://api.github.com/users/serge-sans-paille/received_events",
                "repos_url": "https://api.github.com/users/serge-sans-paille/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/serge-sans-paille/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/serge-sans-paille/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/serge-sans-paille"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r120016777"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/120016777"
                }
            },
            "body": "I'd be ok with adding a special case in the `DistutilsInfo` class that looks for `np_pythran` in addition to `distutils:` and does all the build setup changes right there. Basically, if you use in-module configuration for distutils (and `np_pythran`), then you need to call `cythonize()`, so `cythonize()` can rely on `DistutilsInfo` doing its job, including the setup for `np_pythran`. If `cythonize()` is not used, then the in-module config for `np_pythran` is simply not available (and can thus be made an error) and instead, the `Extension` instance must be configured manually and properly by the user, including the include directory setup.\r\nDoes that solve your problem here?",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-06-04T18:12:40Z",
            "diff_hunk": "@@ -0,0 +1,41 @@\n+.. highlight:: python\n+\n+.. _numpy-pythran:\n+\n+**************************\n+Pythran as a Numpy backend\n+**************************\n+\n+Using the flag ``--np-pythran``, it is possible to use the `Pythran`_ numpy\n+implementation for numpy related operations. One advantage to use this backend\n+is that the Pythran implementation uses C++ expression templates to save memory\n+transfers and can benefit from SIMD instructions of modern CPU.\n+\n+This can lead to really interesting speedup in some cases, going from 2 up to\n+16, depending on the targeted CPU architecture and the original algorithm.\n+\n+Please note that this feature is experimental.\n+\n+Usage example with distutils\n+----------------------------\n+\n+You first need to install Pythran. See its `documentation\n+<https://pythonhosted.org/pythran/MANUAL.html>`_ for more information.\n+\n+Then, simply add ``np_pythran=True`` to the ``cythonize`` call in the related\n+setup.py.\n+\n+Here is an example:\n+\n+.. code::\n+\n+  from distutils.core import setup\n+  from Cython.Build import cythonize\n+  \n+  setup(\n+      name = \"My hello app\",\n+      ext_modules = cythonize('hello_pythran.pyx', np_pythran=True)",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r120016777",
            "id": 120016777,
            "original_commit_id": "ec2986da3a78678edad5058f2fe1473194080947",
            "original_position": 37,
            "path": "docs/src/userguide/numpy_pythran.rst",
            "position": 37,
            "pull_request_review_id": 41947502,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/120016777",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r121290510"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/121290510"
                }
            },
            "body": "Done in https://github.com/cython/cython/pull/1607/commits/cad11dc11c7fe33ba97936c632b5cf801c9738c6 !",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-06-11T20:15:19Z",
            "diff_hunk": "@@ -845,7 +860,13 @@ def copy_to_build_dir(filepath, root=root):\n         for source in m.sources:\n             base, ext = os.path.splitext(source)\n             if ext in ('.pyx', '.py'):\n-                if m.language == 'c++':\n+                if np_pythran:\n+                    c_file = base + '.cpp'\n+                    options = pythran_options\n+                    m.include_dirs.append(pythran_include_dir)\n+                    m.extra_compile_args.extend(('-std=c++11','-DENABLE_PYTHON_MODULE','-D__PYTHRAN__'))",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r121290510",
            "id": 121290510,
            "original_commit_id": "95036cfce7beed5239c149654baed5a5d94476b1",
            "original_position": 61,
            "path": "Cython/Build/Dependencies.py",
            "position": null,
            "pull_request_review_id": 43327876,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/121290510",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r121291664"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/121291664"
                }
            },
            "body": "@aguinet there's no guarantee these two options will be inserted by pythran (the user can customize these settings) so you should wrap each ``remove`` in a try block",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-06-11T21:07:41Z",
            "diff_hunk": "@@ -863,8 +863,17 @@ def copy_to_build_dir(filepath, root=root):\n                 if np_pythran:\n                     c_file = base + '.cpp'\n                     options = pythran_options\n-                    m.include_dirs.append(pythran_include_dir)\n-                    m.extra_compile_args.extend(('-std=c++11','-DENABLE_PYTHON_MODULE','-D__PYTHRAN__'))\n+                    pythran_ext = pythran.config.make_extension()\n+                    m.include_dirs.extend(pythran_ext['include_dirs'])\n+                    m.extra_compile_args.extend(pythran_ext['extra_compile_args'])\n+                    m.extra_link_args.extend(pythran_ext['extra_link_args'])\n+                    m.define_macros.extend(pythran_ext['define_macros'])\n+                    m.undef_macros.extend(pythran_ext['undef_macros'])\n+                    m.library_dirs.extend(pythran_ext['library_dirs'])\n+                    m.libraries.extend(pythran_ext['libraries'])\n+                    # These options are not compatible with the way normal Cython plugins work",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r121291664",
            "id": 121291664,
            "original_commit_id": "cad11dc11c7fe33ba97936c632b5cf801c9738c6",
            "original_position": 14,
            "path": "Cython/Build/Dependencies.py",
            "position": 68,
            "pull_request_review_id": 43328903,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/121291664",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/863807?v=3",
                "events_url": "https://api.github.com/users/serge-sans-paille/events{/privacy}",
                "followers_url": "https://api.github.com/users/serge-sans-paille/followers",
                "following_url": "https://api.github.com/users/serge-sans-paille/following{/other_user}",
                "gists_url": "https://api.github.com/users/serge-sans-paille/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/serge-sans-paille",
                "id": 863807,
                "login": "serge-sans-paille",
                "organizations_url": "https://api.github.com/users/serge-sans-paille/orgs",
                "received_events_url": "https://api.github.com/users/serge-sans-paille/received_events",
                "repos_url": "https://api.github.com/users/serge-sans-paille/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/serge-sans-paille/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/serge-sans-paille/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/serge-sans-paille"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/1607#discussion_r121339538"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/1607"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/121339538"
                }
            },
            "body": "Okay thanks a lot I'm fixing it!",
            "commit_id": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "created_at": "2017-06-12T08:52:50Z",
            "diff_hunk": "@@ -863,8 +863,17 @@ def copy_to_build_dir(filepath, root=root):\n                 if np_pythran:\n                     c_file = base + '.cpp'\n                     options = pythran_options\n-                    m.include_dirs.append(pythran_include_dir)\n-                    m.extra_compile_args.extend(('-std=c++11','-DENABLE_PYTHON_MODULE','-D__PYTHRAN__'))\n+                    pythran_ext = pythran.config.make_extension()\n+                    m.include_dirs.extend(pythran_ext['include_dirs'])\n+                    m.extra_compile_args.extend(pythran_ext['extra_compile_args'])\n+                    m.extra_link_args.extend(pythran_ext['extra_link_args'])\n+                    m.define_macros.extend(pythran_ext['define_macros'])\n+                    m.undef_macros.extend(pythran_ext['undef_macros'])\n+                    m.library_dirs.extend(pythran_ext['library_dirs'])\n+                    m.libraries.extend(pythran_ext['libraries'])\n+                    # These options are not compatible with the way normal Cython plugins work",
            "html_url": "https://github.com/cython/cython/pull/1607#discussion_r121339538",
            "id": 121339538,
            "original_commit_id": "cad11dc11c7fe33ba97936c632b5cf801c9738c6",
            "original_position": 14,
            "path": "Cython/Build/Dependencies.py",
            "position": 68,
            "pull_request_review_id": 43378610,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/1607",
            "updated_at": "2017-06-12T08:59:45Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/121339538",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1607/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/12e49bd658b9ff7801f4070f5ff2d88775b02a2a/comments",
            "commit": {
                "author": {
                    "date": "2017-01-15T10:22:37Z",
                    "email": "aguinet@quarkslab.com",
                    "name": "Adrien Guinet"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2017-06-11T16:10:08Z",
                    "email": "aguinet@quarkslab.com",
                    "name": "Adrien Guinet"
                },
                "message": "Add a Pythran backend for Numpy operation\n\nWhen the user asked for it (thanks to the --np-pythran flag), use\nPythran's Numpy implementation as a backend for numpy operation. This\nflag forces the C++ mode, as the Pythran implementation is written in\nC++. Distutils integration through the 'np_pythran' flag of the\ncythonize API is also provided.\n\nThis commit also adds a Pythran mode for the tests, that can enable the\npythran mode for the C++ tests, and allows the reuse of Cython tests to\ntest for the Pythran integration.",
                "tree": {
                    "sha": "7732fd1e13db8c59b2573988a5200363e510c8c7",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/7732fd1e13db8c59b2573988a5200363e510c8c7"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/12e49bd658b9ff7801f4070f5ff2d88775b02a2a"
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            },
            "html_url": "https://github.com/cython/cython/commit/12e49bd658b9ff7801f4070f5ff2d88775b02a2a",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/0898a2f2bdc4dd01cc5ffacdf5dad45c9e38e32b",
                    "sha": "0898a2f2bdc4dd01cc5ffacdf5dad45c9e38e32b",
                    "url": "https://api.github.com/repos/cython/cython/commits/0898a2f2bdc4dd01cc5ffacdf5dad45c9e38e32b"
                }
            ],
            "sha": "12e49bd658b9ff7801f4070f5ff2d88775b02a2a",
            "url": "https://api.github.com/repos/cython/cython/commits/12e49bd658b9ff7801f4070f5ff2d88775b02a2a"
        },
        {
            "author": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/4cfc01f704516f3d50776192bb43f2bab2bf8899/comments",
            "commit": {
                "author": {
                    "date": "2017-06-11T20:10:39Z",
                    "email": "aguinet@quarkslab.com",
                    "name": "Adrien Guinet"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2017-06-12T08:59:18Z",
                    "email": "aguinet@quarkslab.com",
                    "name": "Adrien Guinet"
                },
                "message": "Use Pythran compilation options from the pythran module",
                "tree": {
                    "sha": "c724302bed3a53fb45d01c052f2051144e94a4cb",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c724302bed3a53fb45d01c052f2051144e94a4cb"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/4cfc01f704516f3d50776192bb43f2bab2bf8899"
            },
            "committer": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            },
            "html_url": "https://github.com/cython/cython/commit/4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/12e49bd658b9ff7801f4070f5ff2d88775b02a2a",
                    "sha": "12e49bd658b9ff7801f4070f5ff2d88775b02a2a",
                    "url": "https://api.github.com/repos/cython/cython/commits/12e49bd658b9ff7801f4070f5ff2d88775b02a2a"
                }
            ],
            "sha": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
            "url": "https://api.github.com/repos/cython/cython/commits/4cfc01f704516f3d50776192bb43f2bab2bf8899"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/1607/commits",
    "created_at": "2017-02-15T21:15:08Z",
    "diff_url": "https://github.com/cython/cython/pull/1607.diff",
    "head": {
        "label": "aguinet:feature/pythran",
        "ref": "feature/pythran",
        "repo": {
            "archive_url": "https://api.github.com/repos/aguinet/cython/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/aguinet/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/aguinet/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/aguinet/cython/branches{/branch}",
            "clone_url": "https://github.com/aguinet/cython.git",
            "collaborators_url": "https://api.github.com/repos/aguinet/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/aguinet/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/aguinet/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/aguinet/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/aguinet/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/aguinet/cython/contributors",
            "created_at": "2017-02-15T18:34:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/aguinet/cython/deployments",
            "description": "A Python to C compiler",
            "downloads_url": "https://api.github.com/repos/aguinet/cython/downloads",
            "events_url": "https://api.github.com/repos/aguinet/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/aguinet/cython/forks",
            "full_name": "aguinet/cython",
            "git_commits_url": "https://api.github.com/repos/aguinet/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/aguinet/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/aguinet/cython/git/tags{/sha}",
            "git_url": "git://github.com/aguinet/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/aguinet/cython/hooks",
            "html_url": "https://github.com/aguinet/cython",
            "id": 82093038,
            "issue_comment_url": "https://api.github.com/repos/aguinet/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/aguinet/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/aguinet/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/aguinet/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/aguinet/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/aguinet/cython/languages",
            "merges_url": "https://api.github.com/repos/aguinet/cython/merges",
            "milestones_url": "https://api.github.com/repos/aguinet/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "notifications_url": "https://api.github.com/repos/aguinet/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
                "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
                "followers_url": "https://api.github.com/users/aguinet/followers",
                "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
                "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/aguinet",
                "id": 1874053,
                "login": "aguinet",
                "organizations_url": "https://api.github.com/users/aguinet/orgs",
                "received_events_url": "https://api.github.com/users/aguinet/received_events",
                "repos_url": "https://api.github.com/users/aguinet/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/aguinet"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/aguinet/cython/pulls{/number}",
            "pushed_at": "2017-06-12T08:59:44Z",
            "releases_url": "https://api.github.com/repos/aguinet/cython/releases{/id}",
            "size": 47831,
            "ssh_url": "git@github.com:aguinet/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/aguinet/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/aguinet/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/aguinet/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/aguinet/cython/subscription",
            "svn_url": "https://github.com/aguinet/cython",
            "tags_url": "https://api.github.com/repos/aguinet/cython/tags",
            "teams_url": "https://api.github.com/repos/aguinet/cython/teams",
            "trees_url": "https://api.github.com/repos/aguinet/cython/git/trees{/sha}",
            "updated_at": "2017-02-15T18:34:49Z",
            "url": "https://api.github.com/repos/aguinet/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "4cfc01f704516f3d50776192bb43f2bab2bf8899",
        "user": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
            "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
            "followers_url": "https://api.github.com/users/aguinet/followers",
            "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
            "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/aguinet",
            "id": 1874053,
            "login": "aguinet",
            "organizations_url": "https://api.github.com/users/aguinet/orgs",
            "received_events_url": "https://api.github.com/users/aguinet/received_events",
            "repos_url": "https://api.github.com/users/aguinet/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/aguinet"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/1607",
    "id": 106400624,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/1607",
    "locked": false,
    "merge_commit_sha": "72a11d5fe01236e59f05ee012c41878433dc18db",
    "merged_at": null,
    "milestone": null,
    "number": 1607,
    "patch_url": "https://github.com/cython/cython/pull/1607.patch",
    "requested_reviewers": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/1607/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/4cfc01f704516f3d50776192bb43f2bab2bf8899",
    "title": "Add a Pythran backend for Numpy operation",
    "updated_at": "2017-06-12T08:59:45Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/1607",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/1874053?v=3",
        "events_url": "https://api.github.com/users/aguinet/events{/privacy}",
        "followers_url": "https://api.github.com/users/aguinet/followers",
        "following_url": "https://api.github.com/users/aguinet/following{/other_user}",
        "gists_url": "https://api.github.com/users/aguinet/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aguinet",
        "id": 1874053,
        "login": "aguinet",
        "organizations_url": "https://api.github.com/users/aguinet/orgs",
        "received_events_url": "https://api.github.com/users/aguinet/received_events",
        "repos_url": "https://api.github.com/users/aguinet/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aguinet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aguinet/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aguinet"
    }
}