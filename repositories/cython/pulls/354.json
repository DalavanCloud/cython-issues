{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/354/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/354/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/354"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/354"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/354/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/354"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/5e77573ccd03cc356c0e56c5025c9c4c0477c6c1"
        }
    },
    "assignee": null,
    "assignees": [],
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "A Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 429,
            "forks_count": 429,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 280,
            "open_issues_count": 280,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=3",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2016-08-17T21:56:36Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 54153,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 1771,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2016-08-16T19:22:06Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 1771,
            "watchers_count": 1771
        },
        "sha": "db4001fae167fa4202986d3cb1c6246049104514",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=3",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "## The problem ##\r\n\r\nThese two example functions, meant to be called with arguments that are lists of numpy arrays, each result in C++ compiler errors using the current Cython master (db4001f):\r\n\r\n```Cython\r\n# distutils: language = c++\r\nfrom libcpp.vector cimport vector\r\n\r\ndef test_memviews_same(a,b):\r\n    cdef vector[double[:]] aa = a\r\n    cdef vector[double[:]] bb = b\r\n\r\ndef test_memviews_diff(a,b):\r\n    cdef vector[double[:]] aa = a\r\n    cdef vector[int[:]] bb = b\r\n```\r\n\r\nCompiling that file using db4001f would result in an error like\r\n\r\n```\r\nblah.cpp: In function 'std::vector<__Pyx_memviewslice> __pyx_convert_vector_from_py___Pyx_memviewslice(PyObject*)':\r\nblah.cpp:12109:40: error: redefinition of 'std::vector<__Pyx_memviewslice> __pyx_convert_vector_from_py___Pyx_memviewslice(PyObject*)'\r\n static std::vector<__Pyx_memviewslice> __pyx_convert_vector_from_py___Pyx_memviewslice(PyObject *__pyx_v_o) {\r\n```\r\n\r\nHowever, similar code using native types instead of typed memoryviews would work fine:\r\n\r\n```cython\r\ndef test_native_same(a,b):\r\n    cdef vector[double] aa = a\r\n    cdef vector[double] bb = b\r\n```\r\n\r\nSee the rest of the code and really basic tests in [the full example gist](https://gist.github.com/mattjj/e9eef9aad52008d333b1) or [similar examples](https://gist.github.com/mattjj/15f28177d68238659386) from [a mailing list post](https://groups.google.com/forum/#!msg/cython-users/YnxIFUFa5zA/izb8yKgHa1kJ).\r\n\r\n## This PR's potential fix ##\r\n\r\nThe code in this PR allows those examples to compile by adding three methods to the `MemoryViewSliceType` class in PyrexTypes.py, namely `specialization_name()`, `__hash__()`, and `__eq__()`.\r\n\r\nI believe there were two related problems here, the first resulting in failures in the `double[:]`/`double[:]` example above and the second in the failure in the `double[:]`/`int[:]` example.\r\n\r\n### Fix for `test_memviews_same` ###\r\n\r\nIn the first example (`test_memviews_same`), the conversion utility code was being generated twice because the `CppClassType.specialize()` method uses a hash table to store previously-generated specializations, but since `MemoryViewSliceType` defaulted to a generic object id-based hash, that hash table would not recognize and return identical specializations and instead generate a new specialization, including new utility code. This same problem did not occur using native types as the vector template argument, like `double` instead of `double[:]` as in the last example, because only one instance of the `CNumericType` would be created.\r\n\r\nOne way to avoid the issue, which this PR attempts, is to add `__hash__()` and `__eq__()` methods  to `MemoryViewSliceType`. I based their design on the existing `MemoryViewSliceType.same_as_resolved_type()` method, which seems to encode the notion of equality we care about here. Other `BaseType` children in PyrexTypes.py also define `__hash__()` methods, and these choices seem to comport with the general sense I gleaned from those methods.\r\n\r\nThis fix avoids the compilation error pasted above and allows the first example to work, though the second example runs into some trouble (see below).\r\n\r\nFor more details on this change, see the commit message for 5e77573.\r\n\r\n### Fix for `test_memviews_diff` ###\r\n\r\nThe second example (`test_memviews_diff`) still didn't work: the same utility code function name was being generated for the two different memory view specializations because `MemoryViewSliceType.specialization_name()` was inherited from `BaseType` (in the same file) and thus the class generated names like `__pyx_convert_from_py__Pyx_memviewslice` no matter the base dtype. That gave rise to other problems in the generated code.\r\n\r\nOne way to address the issue, also attempted in this PR, is just to add dtype tag information to the specialization name string. I just appended the suffix generated by the existing method `MemoryViewSliceType.specialization_suffix()`.  As a result, the generated names look like `__pyx_convert_vector_from_py___Pyx_memviewslice_ds_double`.\r\n\r\nFor more details on this change, see the commit message for 6460e49.\r\n\r\n## Questions ##\r\n\r\nI'm not familiar with Cython's internals, so this fix could be misguided! In particular, while [basic tests](https://gist.github.com/mattjj/e9eef9aad52008d333b1) pass and my own more complex projects still build and work fine, my changes could have side effects I'm not considering.\r\n\r\nAre there any potential interactions here?\r\n\r\nRelatedly, does this PR need automatic tests for these (simple) changes? If so, what tests are needed?\r\n\r\n",
    "closed_at": "2015-01-17T22:30:21Z",
    "comment_data": [],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/354/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1458824?v=3",
                "events_url": "https://api.github.com/users/mattjj/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattjj/followers",
                "following_url": "https://api.github.com/users/mattjj/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattjj",
                "id": 1458824,
                "login": "mattjj",
                "organizations_url": "https://api.github.com/users/mattjj/orgs",
                "received_events_url": "https://api.github.com/users/mattjj/received_events",
                "repos_url": "https://api.github.com/users/mattjj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattjj"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/6460e49026ea49314ceea74168389f673d375a81/comments",
            "commit": {
                "author": {
                    "date": "2014-12-29T17:20:00Z",
                    "email": "mattjj@csail.mit.edu",
                    "name": "Matthew Johnson"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2014-12-29T17:20:00Z",
                    "email": "mattjj@csail.mit.edu",
                    "name": "Matthew Johnson"
                },
                "message": "Add MemoryViewSliceType.specialization_name() to include dtype in name\n\nCalling inherited BaseType.specialization_name() on a\nMemoryViewSliceType generates a name like \"Pyx_memviewslice\", which\nmeant, for example, that generated utility code could have a name like\n\n    __pyx_convert_from_py__Pyx_memviewslice\n\nwhich would collide with utility code generated for other memoryviews\nthat might have other base types. That would mean something like\n\n    def test_memviews_diff(a,b):\n        cdef vector[double[:]] aa = a\n        cdef vector[int[:]] bb = b\n\nwould first have a compile error (function redefinition due to how\nutility code is currently generated) and second, if only one such\nutility function were emitted instead of one for each memoryview base\ntype, have problems with any type-specific generated code, e.g.\n\n    // generated inside __Pyx_PyObject_to_MemoryviewSlice,\n    // which is called from __pyx_convert_vector_from_py___Pyx_memviewslice\n    // note __Pyx_TypeInfo_double\n    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,\n                                                 PyBUF_RECORDS, 1,\n                                                 &__Pyx_TypeInfo_double, stack,\n                                                 &result, obj);\n\nBy adding the dtype tag to the name string returned by\nspecialization_name(), distinct utility code functions are generated (at\nleast in the case above) and thus there is no name collision.",
                "tree": {
                    "sha": "5a4d4bc10c53cc3d46dca8fa30a4a3e45819e091",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5a4d4bc10c53cc3d46dca8fa30a4a3e45819e091"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/6460e49026ea49314ceea74168389f673d375a81"
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1458824?v=3",
                "events_url": "https://api.github.com/users/mattjj/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattjj/followers",
                "following_url": "https://api.github.com/users/mattjj/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattjj",
                "id": 1458824,
                "login": "mattjj",
                "organizations_url": "https://api.github.com/users/mattjj/orgs",
                "received_events_url": "https://api.github.com/users/mattjj/received_events",
                "repos_url": "https://api.github.com/users/mattjj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattjj"
            },
            "html_url": "https://github.com/cython/cython/commit/6460e49026ea49314ceea74168389f673d375a81",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/db4001fae167fa4202986d3cb1c6246049104514",
                    "sha": "db4001fae167fa4202986d3cb1c6246049104514",
                    "url": "https://api.github.com/repos/cython/cython/commits/db4001fae167fa4202986d3cb1c6246049104514"
                }
            ],
            "sha": "6460e49026ea49314ceea74168389f673d375a81",
            "url": "https://api.github.com/repos/cython/cython/commits/6460e49026ea49314ceea74168389f673d375a81"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1458824?v=3",
                "events_url": "https://api.github.com/users/mattjj/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattjj/followers",
                "following_url": "https://api.github.com/users/mattjj/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattjj",
                "id": 1458824,
                "login": "mattjj",
                "organizations_url": "https://api.github.com/users/mattjj/orgs",
                "received_events_url": "https://api.github.com/users/mattjj/received_events",
                "repos_url": "https://api.github.com/users/mattjj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattjj"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5e77573ccd03cc356c0e56c5025c9c4c0477c6c1/comments",
            "commit": {
                "author": {
                    "date": "2014-12-29T17:39:20Z",
                    "email": "mattjj@csail.mit.edu",
                    "name": "Matthew Johnson"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2014-12-29T17:39:20Z",
                    "email": "mattjj@csail.mit.edu",
                    "name": "Matthew Johnson"
                },
                "message": "Add __hash__() and __eq__() to MemoryViewSliceType to avoid distinct\nobject id hashes resulting in duplicate utility code in specialization\n\nThe CppClassType.specialize() method uses a hash table to avoid\nre-generating specializations and thus, for example, re-generating utility code:\n\n    # values is a dict where values are instances of classes in\n    # PyrexTypes.py\n    key = tuple(values.items())\n    if key in self.specializations:\n        return self.specializations[key]\n    # instantiate new CppClassType, eventually resulting in utility code\n\nHowever, because MemoryViewSliceType used the default (object-id) hash,\ndistinct MemoryViewSliceType instances would ultimately give rise to\ndistinct keys. As a result, code like\n\n     def test_memviews_same(a,b):\n         cdef vector[double[:]] aa = a\n         cdef vector[double[:]] bb = b\n\nwould successfully pass through the Cython compiler but then result in a\nC++ compiler error due to redefinition of utility code:\n\n    error: redefinition of 'std::vector<__Pyx_memviewslice> __pyx_convert_vector_from_py___Pyx_memviewslice(PyObject*)'\n\nTo allow the hash table in CppClassType.specialize() to identify 'equal'\nspecializations of CppClassType, we can add __hash__() and __eq__()\nmethods based on the existing\nMemoryViewSliceType.same_as_resolved_type() method. Other classes in\nPyrexTypes.py also have __hash__() methods defined and the choices made\nhere appear roughly consistent.\n\nThis addition allows the above example to compile successfully.",
                "tree": {
                    "sha": "109c030d40a90811ceedb2bf6718fab1793479a4",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/109c030d40a90811ceedb2bf6718fab1793479a4"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5e77573ccd03cc356c0e56c5025c9c4c0477c6c1"
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1458824?v=3",
                "events_url": "https://api.github.com/users/mattjj/events{/privacy}",
                "followers_url": "https://api.github.com/users/mattjj/followers",
                "following_url": "https://api.github.com/users/mattjj/following{/other_user}",
                "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/mattjj",
                "id": 1458824,
                "login": "mattjj",
                "organizations_url": "https://api.github.com/users/mattjj/orgs",
                "received_events_url": "https://api.github.com/users/mattjj/received_events",
                "repos_url": "https://api.github.com/users/mattjj/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/mattjj"
            },
            "html_url": "https://github.com/cython/cython/commit/5e77573ccd03cc356c0e56c5025c9c4c0477c6c1",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/6460e49026ea49314ceea74168389f673d375a81",
                    "sha": "6460e49026ea49314ceea74168389f673d375a81",
                    "url": "https://api.github.com/repos/cython/cython/commits/6460e49026ea49314ceea74168389f673d375a81"
                }
            ],
            "sha": "5e77573ccd03cc356c0e56c5025c9c4c0477c6c1",
            "url": "https://api.github.com/repos/cython/cython/commits/5e77573ccd03cc356c0e56c5025c9c4c0477c6c1"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/354/commits",
    "created_at": "2014-12-29T18:39:23Z",
    "diff_url": "https://github.com/cython/cython/pull/354.diff",
    "head": {
        "label": "mattjj:fix-vectors-of-memviews",
        "ref": "fix-vectors-of-memviews",
        "repo": null,
        "sha": "5e77573ccd03cc356c0e56c5025c9c4c0477c6c1",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/1458824?v=3",
            "events_url": "https://api.github.com/users/mattjj/events{/privacy}",
            "followers_url": "https://api.github.com/users/mattjj/followers",
            "following_url": "https://api.github.com/users/mattjj/following{/other_user}",
            "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/mattjj",
            "id": 1458824,
            "login": "mattjj",
            "organizations_url": "https://api.github.com/users/mattjj/orgs",
            "received_events_url": "https://api.github.com/users/mattjj/received_events",
            "repos_url": "https://api.github.com/users/mattjj/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/mattjj"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/354",
    "id": 26655686,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/354",
    "locked": false,
    "merge_commit_sha": "ab36558643312b484752f213fa6440083bc37144",
    "merged_at": "2015-01-17T22:30:21Z",
    "milestone": null,
    "number": 354,
    "patch_url": "https://github.com/cython/cython/pull/354.patch",
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/354/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/5e77573ccd03cc356c0e56c5025c9c4c0477c6c1",
    "title": "fix utility code generation for C++ vectors of typed memoryviews",
    "updated_at": "2015-01-17T22:33:30Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/354",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1458824?v=3",
        "events_url": "https://api.github.com/users/mattjj/events{/privacy}",
        "followers_url": "https://api.github.com/users/mattjj/followers",
        "following_url": "https://api.github.com/users/mattjj/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mattjj",
        "id": 1458824,
        "login": "mattjj",
        "organizations_url": "https://api.github.com/users/mattjj/orgs",
        "received_events_url": "https://api.github.com/users/mattjj/received_events",
        "repos_url": "https://api.github.com/users/mattjj/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mattjj"
    }
}