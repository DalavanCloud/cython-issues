{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/548/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/548/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/548"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/548"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/548/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/548"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/defb269d10ad50ebe8ed84442116600331908f65"
        }
    },
    "assignee": null,
    "assignees": [],
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "A Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 429,
            "forks_count": 429,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 280,
            "open_issues_count": 280,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=3",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2016-08-17T21:56:36Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 54153,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 1771,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2016-08-16T19:22:06Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 1771,
            "watchers_count": 1771
        },
        "sha": "499d262250f7f4d8f392bb2165a2692937d1c4fa",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486082?v=3",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "This pull request adds the C++ `typeid(...)` operator to Cython, available by cimporting:\r\n\r\n```cython\r\nfrom cython.operator cimport typeid\r\ncimport libcpp.typeinfo\r\n```\r\n\r\n(the operator requires the `libcpp.typeinfo.type_info` type and you cannot use it without the `<typeinfo>` header included)\r\n\r\n`std::bad_typeid` exceptions thrown by `typeid()` are caught.\r\n\r\nRelevant documentation and a test has also been added.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/548#discussion_r73804860"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/548"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/73804860"
                }
            },
            "body": "Can't we use a temp variable for this instead of an explicitly declared one? (Look for usages of allocate_temp() in this module.)",
            "commit_id": "defb269d10ad50ebe8ed84442116600331908f65",
            "created_at": "2016-08-07T16:24:18Z",
            "diff_hunk": "@@ -10184,6 +10187,93 @@ def calculate_result_code(self):\n     def generate_result_code(self, code):\n         pass\n \n+\n+class TypeidNode(ExprNode):\n+    #  C++ typeid operator applied to a type or variable\n+    #\n+    #  operand       ExprNode\n+    #  arg_type      ExprNode\n+    #  is_variable   boolean\n+    #  mangle_cname  string\n+\n+    type = PyrexTypes.error_type\n+\n+    subexprs = ['operand']\n+\n+    arg_type = None\n+    is_variable = None\n+    mangle_cname = None\n+\n+    def get_type_info_type(self, env):\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        for module in env_module.cimported_modules:\n+            if module.qualified_name == 'libcpp.typeinfo':\n+                type_info = module.lookup('type_info')\n+                type_info = PyrexTypes.c_ref_type(PyrexTypes.c_const_type(type_info.type))\n+                return type_info\n+        return None\n+\n+    def analyse_types(self, env):\n+        type_info = self.get_type_info_type(env)\n+        if not type_info:\n+            self.error(\"The 'libcpp.typeinfo' module must be cimported to use the typeid() operator\")\n+            return self\n+        self.type = type_info\n+        as_type = self.operand.analyse_as_type(env)\n+        if as_type:\n+            self.arg_type = as_type\n+            self.is_type = True\n+        else:\n+            self.arg_type = self.operand.analyse_types(env)\n+            self.is_type = False\n+            if self.arg_type.type.is_pyobject:\n+                self.error(\"Cannot use typeid on a Python object\")\n+                return self\n+            elif self.arg_type.type.is_void:\n+                self.error(\"Cannot use typeid on void\")\n+                return self\n+            elif not self.arg_type.type.is_complete():\n+                self.error(\"Cannot use typeid on incomplete type '%s'\" % self.arg_type.type)\n+                return self\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        env_module.typeid_variables += 1\n+        self.mangle_cname = \"%s_typeid_%s\" % (\n+            env_module.module_cname, env_module.typeid_variables)\n+        env.use_utility_code(UtilityCode.load_cached(\"CppExceptionConversion\", \"CppSupport.cpp\"))\n+        return self\n+\n+    def error(self, mess):\n+        error(self.pos, mess)\n+        self.type = PyrexTypes.error_type\n+        self.result_code = \"<error>\"\n+\n+    def check_const(self):\n+        return True\n+\n+    def calculate_result_code(self):\n+        return \"(*%s)\" % self.mangle_cname\n+\n+    def generate_result_code(self, code):\n+        if self.is_type:\n+            if self.arg_type.is_extension_type:\n+                # the size of the pointer is boring\n+                # we want the size of the actual struct\n+                arg_code = self.arg_type.declaration_code(\"\", deref=1)\n+            else:\n+                arg_code = self.arg_type.empty_declaration_code()\n+        else:\n+            arg_code = self.arg_type.result()\n+        code.putln(\"const std::type_info *%s;\" % self.mangle_cname)",
            "html_url": "https://github.com/cython/cython/pull/548#discussion_r73804860",
            "id": 73804860,
            "original_commit_id": "b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
            "original_position": 112,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/548",
            "updated_at": "2016-08-08T03:40:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/73804860",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/548#discussion_r73804912"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/548"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/73804912"
                }
            },
            "body": "Erm, or shouldn't this just be the `self.result()` ?",
            "commit_id": "defb269d10ad50ebe8ed84442116600331908f65",
            "created_at": "2016-08-07T16:27:17Z",
            "diff_hunk": "@@ -10184,6 +10187,93 @@ def calculate_result_code(self):\n     def generate_result_code(self, code):\n         pass\n \n+\n+class TypeidNode(ExprNode):\n+    #  C++ typeid operator applied to a type or variable\n+    #\n+    #  operand       ExprNode\n+    #  arg_type      ExprNode\n+    #  is_variable   boolean\n+    #  mangle_cname  string\n+\n+    type = PyrexTypes.error_type\n+\n+    subexprs = ['operand']\n+\n+    arg_type = None\n+    is_variable = None\n+    mangle_cname = None\n+\n+    def get_type_info_type(self, env):\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        for module in env_module.cimported_modules:\n+            if module.qualified_name == 'libcpp.typeinfo':\n+                type_info = module.lookup('type_info')\n+                type_info = PyrexTypes.c_ref_type(PyrexTypes.c_const_type(type_info.type))\n+                return type_info\n+        return None\n+\n+    def analyse_types(self, env):\n+        type_info = self.get_type_info_type(env)\n+        if not type_info:\n+            self.error(\"The 'libcpp.typeinfo' module must be cimported to use the typeid() operator\")\n+            return self\n+        self.type = type_info\n+        as_type = self.operand.analyse_as_type(env)\n+        if as_type:\n+            self.arg_type = as_type\n+            self.is_type = True\n+        else:\n+            self.arg_type = self.operand.analyse_types(env)\n+            self.is_type = False\n+            if self.arg_type.type.is_pyobject:\n+                self.error(\"Cannot use typeid on a Python object\")\n+                return self\n+            elif self.arg_type.type.is_void:\n+                self.error(\"Cannot use typeid on void\")\n+                return self\n+            elif not self.arg_type.type.is_complete():\n+                self.error(\"Cannot use typeid on incomplete type '%s'\" % self.arg_type.type)\n+                return self\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        env_module.typeid_variables += 1\n+        self.mangle_cname = \"%s_typeid_%s\" % (\n+            env_module.module_cname, env_module.typeid_variables)\n+        env.use_utility_code(UtilityCode.load_cached(\"CppExceptionConversion\", \"CppSupport.cpp\"))\n+        return self\n+\n+    def error(self, mess):\n+        error(self.pos, mess)\n+        self.type = PyrexTypes.error_type\n+        self.result_code = \"<error>\"\n+\n+    def check_const(self):\n+        return True\n+\n+    def calculate_result_code(self):\n+        return \"(*%s)\" % self.mangle_cname\n+\n+    def generate_result_code(self, code):\n+        if self.is_type:\n+            if self.arg_type.is_extension_type:\n+                # the size of the pointer is boring\n+                # we want the size of the actual struct\n+                arg_code = self.arg_type.declaration_code(\"\", deref=1)\n+            else:\n+                arg_code = self.arg_type.empty_declaration_code()\n+        else:\n+            arg_code = self.arg_type.result()\n+        code.putln(\"const std::type_info *%s;\" % self.mangle_cname)",
            "html_url": "https://github.com/cython/cython/pull/548#discussion_r73804912",
            "id": 73804912,
            "original_commit_id": "b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
            "original_position": 112,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/548",
            "updated_at": "2016-08-08T03:40:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/73804912",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/491659?v=3",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/548#discussion_r73809113"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/548"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/73809113"
                }
            },
            "body": "I did not use `self.result()` there because I needed to dereference the temporary variable in `calculate_result_code`; I needed to make the temp var be of the type `const std::type_info *` so I could initialize it and then assign to it in the try-catch block.\r\n\r\n> Look for usages of allocate_temp() in this module\r\n\r\nThanks! I did not notice `allocate_temp()` yet, I will change it around to do that instead!",
            "commit_id": "defb269d10ad50ebe8ed84442116600331908f65",
            "created_at": "2016-08-07T21:11:27Z",
            "diff_hunk": "@@ -10184,6 +10187,93 @@ def calculate_result_code(self):\n     def generate_result_code(self, code):\n         pass\n \n+\n+class TypeidNode(ExprNode):\n+    #  C++ typeid operator applied to a type or variable\n+    #\n+    #  operand       ExprNode\n+    #  arg_type      ExprNode\n+    #  is_variable   boolean\n+    #  mangle_cname  string\n+\n+    type = PyrexTypes.error_type\n+\n+    subexprs = ['operand']\n+\n+    arg_type = None\n+    is_variable = None\n+    mangle_cname = None\n+\n+    def get_type_info_type(self, env):\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        for module in env_module.cimported_modules:\n+            if module.qualified_name == 'libcpp.typeinfo':\n+                type_info = module.lookup('type_info')\n+                type_info = PyrexTypes.c_ref_type(PyrexTypes.c_const_type(type_info.type))\n+                return type_info\n+        return None\n+\n+    def analyse_types(self, env):\n+        type_info = self.get_type_info_type(env)\n+        if not type_info:\n+            self.error(\"The 'libcpp.typeinfo' module must be cimported to use the typeid() operator\")\n+            return self\n+        self.type = type_info\n+        as_type = self.operand.analyse_as_type(env)\n+        if as_type:\n+            self.arg_type = as_type\n+            self.is_type = True\n+        else:\n+            self.arg_type = self.operand.analyse_types(env)\n+            self.is_type = False\n+            if self.arg_type.type.is_pyobject:\n+                self.error(\"Cannot use typeid on a Python object\")\n+                return self\n+            elif self.arg_type.type.is_void:\n+                self.error(\"Cannot use typeid on void\")\n+                return self\n+            elif not self.arg_type.type.is_complete():\n+                self.error(\"Cannot use typeid on incomplete type '%s'\" % self.arg_type.type)\n+                return self\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        env_module.typeid_variables += 1\n+        self.mangle_cname = \"%s_typeid_%s\" % (\n+            env_module.module_cname, env_module.typeid_variables)\n+        env.use_utility_code(UtilityCode.load_cached(\"CppExceptionConversion\", \"CppSupport.cpp\"))\n+        return self\n+\n+    def error(self, mess):\n+        error(self.pos, mess)\n+        self.type = PyrexTypes.error_type\n+        self.result_code = \"<error>\"\n+\n+    def check_const(self):\n+        return True\n+\n+    def calculate_result_code(self):\n+        return \"(*%s)\" % self.mangle_cname\n+\n+    def generate_result_code(self, code):\n+        if self.is_type:\n+            if self.arg_type.is_extension_type:\n+                # the size of the pointer is boring\n+                # we want the size of the actual struct\n+                arg_code = self.arg_type.declaration_code(\"\", deref=1)\n+            else:\n+                arg_code = self.arg_type.empty_declaration_code()\n+        else:\n+            arg_code = self.arg_type.result()\n+        code.putln(\"const std::type_info *%s;\" % self.mangle_cname)",
            "html_url": "https://github.com/cython/cython/pull/548#discussion_r73809113",
            "id": 73809113,
            "original_commit_id": "b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
            "original_position": 112,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/548",
            "updated_at": "2016-08-08T03:40:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/73809113",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
                "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
                "followers_url": "https://api.github.com/users/empyrical/followers",
                "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
                "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/empyrical",
                "id": 2847127,
                "login": "empyrical",
                "organizations_url": "https://api.github.com/users/empyrical/orgs",
                "received_events_url": "https://api.github.com/users/empyrical/received_events",
                "repos_url": "https://api.github.com/users/empyrical/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/empyrical"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/548#discussion_r73812169"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/548"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/73812169"
                }
            },
            "body": "Turns out Cython also has a little template helper class I can use called `__Pyx_FakeReference` designed to address the problem I was having with references too!",
            "commit_id": "defb269d10ad50ebe8ed84442116600331908f65",
            "created_at": "2016-08-08T00:17:33Z",
            "diff_hunk": "@@ -10184,6 +10187,93 @@ def calculate_result_code(self):\n     def generate_result_code(self, code):\n         pass\n \n+\n+class TypeidNode(ExprNode):\n+    #  C++ typeid operator applied to a type or variable\n+    #\n+    #  operand       ExprNode\n+    #  arg_type      ExprNode\n+    #  is_variable   boolean\n+    #  mangle_cname  string\n+\n+    type = PyrexTypes.error_type\n+\n+    subexprs = ['operand']\n+\n+    arg_type = None\n+    is_variable = None\n+    mangle_cname = None\n+\n+    def get_type_info_type(self, env):\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        for module in env_module.cimported_modules:\n+            if module.qualified_name == 'libcpp.typeinfo':\n+                type_info = module.lookup('type_info')\n+                type_info = PyrexTypes.c_ref_type(PyrexTypes.c_const_type(type_info.type))\n+                return type_info\n+        return None\n+\n+    def analyse_types(self, env):\n+        type_info = self.get_type_info_type(env)\n+        if not type_info:\n+            self.error(\"The 'libcpp.typeinfo' module must be cimported to use the typeid() operator\")\n+            return self\n+        self.type = type_info\n+        as_type = self.operand.analyse_as_type(env)\n+        if as_type:\n+            self.arg_type = as_type\n+            self.is_type = True\n+        else:\n+            self.arg_type = self.operand.analyse_types(env)\n+            self.is_type = False\n+            if self.arg_type.type.is_pyobject:\n+                self.error(\"Cannot use typeid on a Python object\")\n+                return self\n+            elif self.arg_type.type.is_void:\n+                self.error(\"Cannot use typeid on void\")\n+                return self\n+            elif not self.arg_type.type.is_complete():\n+                self.error(\"Cannot use typeid on incomplete type '%s'\" % self.arg_type.type)\n+                return self\n+        if env.is_module_scope:\n+            env_module = env\n+        else:\n+            env_module = env.outer_scope\n+        env_module.typeid_variables += 1\n+        self.mangle_cname = \"%s_typeid_%s\" % (\n+            env_module.module_cname, env_module.typeid_variables)\n+        env.use_utility_code(UtilityCode.load_cached(\"CppExceptionConversion\", \"CppSupport.cpp\"))\n+        return self\n+\n+    def error(self, mess):\n+        error(self.pos, mess)\n+        self.type = PyrexTypes.error_type\n+        self.result_code = \"<error>\"\n+\n+    def check_const(self):\n+        return True\n+\n+    def calculate_result_code(self):\n+        return \"(*%s)\" % self.mangle_cname\n+\n+    def generate_result_code(self, code):\n+        if self.is_type:\n+            if self.arg_type.is_extension_type:\n+                # the size of the pointer is boring\n+                # we want the size of the actual struct\n+                arg_code = self.arg_type.declaration_code(\"\", deref=1)\n+            else:\n+                arg_code = self.arg_type.empty_declaration_code()\n+        else:\n+            arg_code = self.arg_type.result()\n+        code.putln(\"const std::type_info *%s;\" % self.mangle_cname)",
            "html_url": "https://github.com/cython/cython/pull/548#discussion_r73812169",
            "id": 73812169,
            "original_commit_id": "b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
            "original_position": 112,
            "path": "Cython/Compiler/ExprNodes.py",
            "position": null,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/548",
            "updated_at": "2016-08-08T03:40:55Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/73812169",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
                "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
                "followers_url": "https://api.github.com/users/empyrical/followers",
                "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
                "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/empyrical",
                "id": 2847127,
                "login": "empyrical",
                "organizations_url": "https://api.github.com/users/empyrical/orgs",
                "received_events_url": "https://api.github.com/users/empyrical/received_events",
                "repos_url": "https://api.github.com/users/empyrical/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/empyrical"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/548/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
                "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
                "followers_url": "https://api.github.com/users/empyrical/followers",
                "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
                "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/empyrical",
                "id": 2847127,
                "login": "empyrical",
                "organizations_url": "https://api.github.com/users/empyrical/orgs",
                "received_events_url": "https://api.github.com/users/empyrical/received_events",
                "repos_url": "https://api.github.com/users/empyrical/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/empyrical"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/b788e10a35670dc19cc0f5748ab3d97cf61d8cad/comments",
            "commit": {
                "author": {
                    "date": "2016-08-05T22:17:57Z",
                    "email": "empyrical@users.noreply.github.com",
                    "name": "empyrical"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2016-08-05T22:21:05Z",
                    "email": "empyrical@users.noreply.github.com",
                    "name": "empyrical"
                },
                "message": "Add support for the typeid operator",
                "tree": {
                    "sha": "c0f5f2bb63892fffcfab1cd3f0579d02c179d4ed",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c0f5f2bb63892fffcfab1cd3f0579d02c179d4ed"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/b788e10a35670dc19cc0f5748ab3d97cf61d8cad"
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
                "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
                "followers_url": "https://api.github.com/users/empyrical/followers",
                "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
                "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/empyrical",
                "id": 2847127,
                "login": "empyrical",
                "organizations_url": "https://api.github.com/users/empyrical/orgs",
                "received_events_url": "https://api.github.com/users/empyrical/received_events",
                "repos_url": "https://api.github.com/users/empyrical/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/empyrical"
            },
            "html_url": "https://github.com/cython/cython/commit/b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/a767e7e8807aa315de72124daf0f464738ed85af",
                    "sha": "a767e7e8807aa315de72124daf0f464738ed85af",
                    "url": "https://api.github.com/repos/cython/cython/commits/a767e7e8807aa315de72124daf0f464738ed85af"
                }
            ],
            "sha": "b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
            "url": "https://api.github.com/repos/cython/cython/commits/b788e10a35670dc19cc0f5748ab3d97cf61d8cad"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
                "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
                "followers_url": "https://api.github.com/users/empyrical/followers",
                "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
                "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/empyrical",
                "id": 2847127,
                "login": "empyrical",
                "organizations_url": "https://api.github.com/users/empyrical/orgs",
                "received_events_url": "https://api.github.com/users/empyrical/received_events",
                "repos_url": "https://api.github.com/users/empyrical/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/empyrical"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/defb269d10ad50ebe8ed84442116600331908f65/comments",
            "commit": {
                "author": {
                    "date": "2016-08-08T03:39:02Z",
                    "email": "empyrical@users.noreply.github.com",
                    "name": "empyrical"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2016-08-08T03:39:02Z",
                    "email": "empyrical@users.noreply.github.com",
                    "name": "empyrical"
                },
                "message": "Use is_temp and FakeReference for typeid()'s temp variable",
                "tree": {
                    "sha": "6d6a3a61ad1ca05bd9ca7e4492ea1f06f00ab43d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/6d6a3a61ad1ca05bd9ca7e4492ea1f06f00ab43d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/defb269d10ad50ebe8ed84442116600331908f65"
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
                "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
                "followers_url": "https://api.github.com/users/empyrical/followers",
                "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
                "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/empyrical",
                "id": 2847127,
                "login": "empyrical",
                "organizations_url": "https://api.github.com/users/empyrical/orgs",
                "received_events_url": "https://api.github.com/users/empyrical/received_events",
                "repos_url": "https://api.github.com/users/empyrical/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/empyrical"
            },
            "html_url": "https://github.com/cython/cython/commit/defb269d10ad50ebe8ed84442116600331908f65",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
                    "sha": "b788e10a35670dc19cc0f5748ab3d97cf61d8cad",
                    "url": "https://api.github.com/repos/cython/cython/commits/b788e10a35670dc19cc0f5748ab3d97cf61d8cad"
                }
            ],
            "sha": "defb269d10ad50ebe8ed84442116600331908f65",
            "url": "https://api.github.com/repos/cython/cython/commits/defb269d10ad50ebe8ed84442116600331908f65"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/548/commits",
    "created_at": "2016-08-05T22:29:03Z",
    "diff_url": "https://github.com/cython/cython/pull/548.diff",
    "head": {
        "label": "empyrical:typeid-operator",
        "ref": "typeid-operator",
        "repo": {
            "archive_url": "https://api.github.com/repos/empyrical/cython/{archive_format}{/ref}",
            "assignees_url": "https://api.github.com/repos/empyrical/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/empyrical/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/empyrical/cython/branches{/branch}",
            "clone_url": "https://github.com/empyrical/cython.git",
            "collaborators_url": "https://api.github.com/repos/empyrical/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/empyrical/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/empyrical/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/empyrical/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/empyrical/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/empyrical/cython/contributors",
            "created_at": "2016-06-29T22:30:52Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/empyrical/cython/deployments",
            "description": "A Python to C compiler",
            "downloads_url": "https://api.github.com/repos/empyrical/cython/downloads",
            "events_url": "https://api.github.com/repos/empyrical/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/empyrical/cython/forks",
            "full_name": "empyrical/cython",
            "git_commits_url": "https://api.github.com/repos/empyrical/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/empyrical/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/empyrical/cython/git/tags{/sha}",
            "git_url": "git://github.com/empyrical/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/empyrical/cython/hooks",
            "html_url": "https://github.com/empyrical/cython",
            "id": 62262126,
            "issue_comment_url": "https://api.github.com/repos/empyrical/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/empyrical/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/empyrical/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/empyrical/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/empyrical/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/empyrical/cython/languages",
            "merges_url": "https://api.github.com/repos/empyrical/cython/merges",
            "milestones_url": "https://api.github.com/repos/empyrical/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "notifications_url": "https://api.github.com/repos/empyrical/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
                "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
                "followers_url": "https://api.github.com/users/empyrical/followers",
                "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
                "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/empyrical",
                "id": 2847127,
                "login": "empyrical",
                "organizations_url": "https://api.github.com/users/empyrical/orgs",
                "received_events_url": "https://api.github.com/users/empyrical/received_events",
                "repos_url": "https://api.github.com/users/empyrical/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/empyrical"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/empyrical/cython/pulls{/number}",
            "pushed_at": "2016-08-08T03:40:55Z",
            "releases_url": "https://api.github.com/repos/empyrical/cython/releases{/id}",
            "size": 46267,
            "ssh_url": "git@github.com:empyrical/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/empyrical/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/empyrical/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/empyrical/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/empyrical/cython/subscription",
            "svn_url": "https://github.com/empyrical/cython",
            "tags_url": "https://api.github.com/repos/empyrical/cython/tags",
            "teams_url": "https://api.github.com/repos/empyrical/cython/teams",
            "trees_url": "https://api.github.com/repos/empyrical/cython/git/trees{/sha}",
            "updated_at": "2016-06-29T22:30:56Z",
            "url": "https://api.github.com/repos/empyrical/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "defb269d10ad50ebe8ed84442116600331908f65",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
            "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
            "followers_url": "https://api.github.com/users/empyrical/followers",
            "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
            "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/empyrical",
            "id": 2847127,
            "login": "empyrical",
            "organizations_url": "https://api.github.com/users/empyrical/orgs",
            "received_events_url": "https://api.github.com/users/empyrical/received_events",
            "repos_url": "https://api.github.com/users/empyrical/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/empyrical"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/548",
    "id": 80315836,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/548",
    "locked": false,
    "merge_commit_sha": "b0f17c6683144bbe197fda458e92dfa1331a5fe5",
    "merged_at": null,
    "milestone": null,
    "number": 548,
    "patch_url": "https://github.com/cython/cython/pull/548.patch",
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/548/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/defb269d10ad50ebe8ed84442116600331908f65",
    "title": "Add support for the typeid operator",
    "updated_at": "2016-08-16T01:09:48Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/548",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/2847127?v=3",
        "events_url": "https://api.github.com/users/empyrical/events{/privacy}",
        "followers_url": "https://api.github.com/users/empyrical/followers",
        "following_url": "https://api.github.com/users/empyrical/following{/other_user}",
        "gists_url": "https://api.github.com/users/empyrical/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/empyrical",
        "id": 2847127,
        "login": "empyrical",
        "organizations_url": "https://api.github.com/users/empyrical/orgs",
        "received_events_url": "https://api.github.com/users/empyrical/received_events",
        "repos_url": "https://api.github.com/users/empyrical/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/empyrical/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/empyrical/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/empyrical"
    }
}