{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/2291/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2291/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/2291"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/2291"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2291/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2291"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/7e6908e1cb71ca71d648baae24069e4fbecfcf70"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 685,
            "forks_count": 685,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 577,
            "open_issues_count": 577,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2018-06-30T14:29:38Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 51031,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 3230,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2018-06-30T08:33:55Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 3230,
            "watchers_count": 3230
        },
        "sha": "d1b7e9af1ce24d1d37f30914769a2cd0a7c63728",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Not all the options are there, I only put the main ones. The ones not included are `old_style_globals` and `pre_import`. \r\n\r\nMaybe in a perfect world, those options would be arguments of a function (`set_options(docstrings=True,...)` or something like that) and then we would use autodoc? It's just an idea.",
    "closed_at": null,
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190820503"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190820503"
                }
            },
            "author_association": "MEMBER",
            "body": "\"a method\" -> \"a C function\"",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:14:33Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.\n+    Default is True.\n+\n+``generate_cleanup_code`` (integer)\n+    Decref global variables in this module on exit for garbage collection.\n+    0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n+    Mostly for reducing noise in Valgrind, only executes at process exit\n+    (when all memory will be reclaimed anyways).\n+    Default is 0.\n+\n+``annotate`` (True / False)\n+    Generate an annotated HTML version of the input source files.\n+    This has the same effect as the ``annotate`` argument in :func:`cythonize`.\n+    Default is False.\n+\n+``fast_fail`` (True / False)\n+    This will abort the compilation on the first error occurred rather than trying\n+    to keep going and printing further error messages.\n+    Default is False.\n+\n+``warning_errors`` (True / False)\n+    Make all warnings into errors.\n+    Default is False.\n+\n+``error_on_unknown_names`` (True / False)\n+    Make unknown names an error.  Python raises a NameError when\n+    encountering unknown names at runtime, whereas this option makes\n+    them a compile time error.  If you want full Python compatibility,\n+    you should disable this option and also 'cache_builtins'.\n+    Default is True.\n+\n+``error_on_uninitialized`` (True / False)\n+    Make uninitialized local variable reference a compile time error.\n+    Python raises UnboundLocalError at runtime, whereas this option makes\n+    them a compile time error. Note that this option affects only variables\n+    of \"python object\" type.\n+    Default is True.\n+\n+``convert_range`` (True / False)\n+    This will convert statements of the form ``for i in range(...)``\n+    to ``for i from ...`` when ``i`` is a C integer type, and the direction\n+    (i.e. sign of step) can be determined.\n+    WARNING: This may change the semantics if the range causes assignment to\n+    i to overflow. Specifically, if this option is set, an error will be\n+    raised before the loop is entered, whereas without this option the loop\n+    will execute until an overflowing value is encountered.\n+    Default is True.\n+\n+``cache_builtins`` (True / False)\n+    Perform lookups on builtin names only once, at module initialisation\n+    time.  This will prevent the module from getting imported if a\n+    builtin name that it uses cannot be found during initialisation.\n+    Default is True.\n+\n+``gcc_branch_hints`` (True / False)\n+    Generate branch prediction hints to speed up error handling etc.\n+    Default is True.\n+\n+``lookup_module_cpdef`` (True / False)\n+    Enable this to allow one to write ``your_module.foo = ...`` to overwrite the\n+    definition if the cpdef function foo, at the cost of an extra dictionary\n+    lookup on every call.\n+    If this is false it generates only the Python wrapper and no override check.\n+    Default is False.\n+\n+``embed`` (True / False)\n+    Whether or not to embed the Python interpreter, for use in making a\n+    standalone executable or calling from external libraries.\n+    This will provide a method which initialises the interpreter and",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190820503",
            "id": 190820503,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyMDUwMw==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 105,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190820503",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190821351"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190821351"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd add a comment here:\r\n\"Note that some legacy builtins are automatically remapped from their Python 2 names to their Python 3 names by Cython when building in Python 3.x, so that they do not get in the way even if this option is enabled.\"",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:18:03Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.\n+    Default is True.\n+\n+``generate_cleanup_code`` (integer)\n+    Decref global variables in this module on exit for garbage collection.\n+    0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n+    Mostly for reducing noise in Valgrind, only executes at process exit\n+    (when all memory will be reclaimed anyways).\n+    Default is 0.\n+\n+``annotate`` (True / False)\n+    Generate an annotated HTML version of the input source files.\n+    This has the same effect as the ``annotate`` argument in :func:`cythonize`.\n+    Default is False.\n+\n+``fast_fail`` (True / False)\n+    This will abort the compilation on the first error occurred rather than trying\n+    to keep going and printing further error messages.\n+    Default is False.\n+\n+``warning_errors`` (True / False)\n+    Make all warnings into errors.\n+    Default is False.\n+\n+``error_on_unknown_names`` (True / False)\n+    Make unknown names an error.  Python raises a NameError when\n+    encountering unknown names at runtime, whereas this option makes\n+    them a compile time error.  If you want full Python compatibility,\n+    you should disable this option and also 'cache_builtins'.\n+    Default is True.\n+\n+``error_on_uninitialized`` (True / False)\n+    Make uninitialized local variable reference a compile time error.\n+    Python raises UnboundLocalError at runtime, whereas this option makes\n+    them a compile time error. Note that this option affects only variables\n+    of \"python object\" type.\n+    Default is True.\n+\n+``convert_range`` (True / False)\n+    This will convert statements of the form ``for i in range(...)``\n+    to ``for i from ...`` when ``i`` is a C integer type, and the direction\n+    (i.e. sign of step) can be determined.\n+    WARNING: This may change the semantics if the range causes assignment to\n+    i to overflow. Specifically, if this option is set, an error will be\n+    raised before the loop is entered, whereas without this option the loop\n+    will execute until an overflowing value is encountered.\n+    Default is True.\n+\n+``cache_builtins`` (True / False)\n+    Perform lookups on builtin names only once, at module initialisation\n+    time.  This will prevent the module from getting imported if a\n+    builtin name that it uses cannot be found during initialisation.",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190821351",
            "id": 190821351,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyMTM1MQ==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 88,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190821351",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190821548"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190821548"
                }
            },
            "author_association": "MEMBER",
            "body": "\"Make\" -> \"Turn\". I think \"make\" is not correct English here.",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:18:48Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.\n+    Default is True.\n+\n+``generate_cleanup_code`` (integer)\n+    Decref global variables in this module on exit for garbage collection.\n+    0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n+    Mostly for reducing noise in Valgrind, only executes at process exit\n+    (when all memory will be reclaimed anyways).\n+    Default is 0.\n+\n+``annotate`` (True / False)\n+    Generate an annotated HTML version of the input source files.\n+    This has the same effect as the ``annotate`` argument in :func:`cythonize`.\n+    Default is False.\n+\n+``fast_fail`` (True / False)\n+    This will abort the compilation on the first error occurred rather than trying\n+    to keep going and printing further error messages.\n+    Default is False.\n+\n+``warning_errors`` (True / False)\n+    Make all warnings into errors.",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190821548",
            "id": 190821548,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyMTU0OA==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 58,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190821548",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190822252"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190822252"
                }
            },
            "author_association": "MEMBER",
            "body": "... for debugging and optimisation purposes.",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:21:03Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.\n+    Default is True.\n+\n+``generate_cleanup_code`` (integer)\n+    Decref global variables in this module on exit for garbage collection.\n+    0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n+    Mostly for reducing noise in Valgrind, only executes at process exit\n+    (when all memory will be reclaimed anyways).\n+    Default is 0.\n+\n+``annotate`` (True / False)\n+    Generate an annotated HTML version of the input source files.",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190822252",
            "id": 190822252,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyMjI1Mg==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 48,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190822252",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190822523"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190822523"
                }
            },
            "author_association": "MEMBER",
            "body": "... in each module ...",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:22:04Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.\n+    Default is True.\n+\n+``generate_cleanup_code`` (integer)\n+    Decref global variables in this module on exit for garbage collection.",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190822523",
            "id": 190822523,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyMjUyMw==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 41,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190822523",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190822753"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190822753"
                }
            },
            "author_association": "MEMBER",
            "body": "\"This is also required for coverage analysis.\"",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:22:49Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190822753",
            "id": 190822753,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyMjc1Mw==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 37,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190822753",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190824342"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190824342"
                }
            },
            "author_association": "MEMBER",
            "body": "The default it 8, not 0.",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:28:57Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.\n+    Default is True.\n+\n+``generate_cleanup_code`` (integer)\n+    Decref global variables in this module on exit for garbage collection.\n+    0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n+    Mostly for reducing noise in Valgrind, only executes at process exit\n+    (when all memory will be reclaimed anyways).\n+    Default is 0.\n+\n+``annotate`` (True / False)\n+    Generate an annotated HTML version of the input source files.\n+    This has the same effect as the ``annotate`` argument in :func:`cythonize`.\n+    Default is False.\n+\n+``fast_fail`` (True / False)\n+    This will abort the compilation on the first error occurred rather than trying\n+    to keep going and printing further error messages.\n+    Default is False.\n+\n+``warning_errors`` (True / False)\n+    Make all warnings into errors.\n+    Default is False.\n+\n+``error_on_unknown_names`` (True / False)\n+    Make unknown names an error.  Python raises a NameError when\n+    encountering unknown names at runtime, whereas this option makes\n+    them a compile time error.  If you want full Python compatibility,\n+    you should disable this option and also 'cache_builtins'.\n+    Default is True.\n+\n+``error_on_uninitialized`` (True / False)\n+    Make uninitialized local variable reference a compile time error.\n+    Python raises UnboundLocalError at runtime, whereas this option makes\n+    them a compile time error. Note that this option affects only variables\n+    of \"python object\" type.\n+    Default is True.\n+\n+``convert_range`` (True / False)\n+    This will convert statements of the form ``for i in range(...)``\n+    to ``for i from ...`` when ``i`` is a C integer type, and the direction\n+    (i.e. sign of step) can be determined.\n+    WARNING: This may change the semantics if the range causes assignment to\n+    i to overflow. Specifically, if this option is set, an error will be\n+    raised before the loop is entered, whereas without this option the loop\n+    will execute until an overflowing value is encountered.\n+    Default is True.\n+\n+``cache_builtins`` (True / False)\n+    Perform lookups on builtin names only once, at module initialisation\n+    time.  This will prevent the module from getting imported if a\n+    builtin name that it uses cannot be found during initialisation.\n+    Default is True.\n+\n+``gcc_branch_hints`` (True / False)\n+    Generate branch prediction hints to speed up error handling etc.\n+    Default is True.\n+\n+``lookup_module_cpdef`` (True / False)\n+    Enable this to allow one to write ``your_module.foo = ...`` to overwrite the\n+    definition if the cpdef function foo, at the cost of an extra dictionary\n+    lookup on every call.\n+    If this is false it generates only the Python wrapper and no override check.\n+    Default is False.\n+\n+``embed`` (True / False)\n+    Whether or not to embed the Python interpreter, for use in making a\n+    standalone executable or calling from external libraries.\n+    This will provide a method which initialises the interpreter and\n+    executes the body of this module.\n+    See `this demo <https://github.com/cython/cython/tree/master/Demos/embed>`_\n+    for a concrete example.\n+    Default is False.\n+\n+``cimport_from_pyx`` (True / False)\n+    Allows cimporting from a pyx file without a pxd file.\n+    Default is False.\n+\n+``buffer_max_dims`` (integer)\n+    Maximum number of dimensions for buffers -- set lower than number of\n+    dimensions in numpy, as\n+    slices are passed by value and involve a lot of copying.\n+    Default is 8.\n+\n+``closure_freelist_size`` (integer)\n+    Number of function closure instances to keep in a freelist (0: no freelists).\n+    Default is 0.",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190824342",
            "id": 190824342,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyNDM0Mg==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 123,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190824342",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r190825393"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190825393"
                }
            },
            "author_association": "MEMBER",
            "body": "\"If true, the initialisation function is the C ``main()`` function, but this option can also be set to a non-empty string to provide a function name explicitly.\"",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-25T08:33:28Z",
            "diff_hunk": "@@ -316,6 +316,128 @@ customize your build.\n                                 ``compiler_directives={'embedsignature': True}``.\n                                 See :ref:`compiler-directives`.\n \n+\n+Compiler options\n+----------------\n+\n+Compiler options can be set in the :file:`setup.py`, before calling :func:`cythonize`,\n+like this::\n+\n+    from distutils.core import setup\n+\n+    from Cython.Build import cythonize\n+    from Cython.Compiler import Options\n+\n+    Options.docstrings = False\n+\n+    setup(\n+        name = \"hello\",\n+        ext_modules = cythonize(\"lib.pyx\"),\n+    )\n+\n+Here are the options that are available:\n+\n+``docstrings`` (True / False)\n+    Whether or not to include docstring in the Python extension. If False, the binary size\n+    will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+    empty string.\n+    Default is True.\n+\n+``embed_pos_in_docstring`` (True / False)\n+    Embed the source code position in the docstrings of functions and classes.\n+    Default is False.\n+\n+``emit_code_comments`` (True / False)\n+    Copy the original source code line by line into C code comments\n+    in the generated code file to help with understanding the output.\n+    Default is True.\n+\n+``generate_cleanup_code`` (integer)\n+    Decref global variables in this module on exit for garbage collection.\n+    0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n+    Mostly for reducing noise in Valgrind, only executes at process exit\n+    (when all memory will be reclaimed anyways).\n+    Default is 0.\n+\n+``annotate`` (True / False)\n+    Generate an annotated HTML version of the input source files.\n+    This has the same effect as the ``annotate`` argument in :func:`cythonize`.\n+    Default is False.\n+\n+``fast_fail`` (True / False)\n+    This will abort the compilation on the first error occurred rather than trying\n+    to keep going and printing further error messages.\n+    Default is False.\n+\n+``warning_errors`` (True / False)\n+    Make all warnings into errors.\n+    Default is False.\n+\n+``error_on_unknown_names`` (True / False)\n+    Make unknown names an error.  Python raises a NameError when\n+    encountering unknown names at runtime, whereas this option makes\n+    them a compile time error.  If you want full Python compatibility,\n+    you should disable this option and also 'cache_builtins'.\n+    Default is True.\n+\n+``error_on_uninitialized`` (True / False)\n+    Make uninitialized local variable reference a compile time error.\n+    Python raises UnboundLocalError at runtime, whereas this option makes\n+    them a compile time error. Note that this option affects only variables\n+    of \"python object\" type.\n+    Default is True.\n+\n+``convert_range`` (True / False)\n+    This will convert statements of the form ``for i in range(...)``\n+    to ``for i from ...`` when ``i`` is a C integer type, and the direction\n+    (i.e. sign of step) can be determined.\n+    WARNING: This may change the semantics if the range causes assignment to\n+    i to overflow. Specifically, if this option is set, an error will be\n+    raised before the loop is entered, whereas without this option the loop\n+    will execute until an overflowing value is encountered.\n+    Default is True.\n+\n+``cache_builtins`` (True / False)\n+    Perform lookups on builtin names only once, at module initialisation\n+    time.  This will prevent the module from getting imported if a\n+    builtin name that it uses cannot be found during initialisation.\n+    Default is True.\n+\n+``gcc_branch_hints`` (True / False)\n+    Generate branch prediction hints to speed up error handling etc.\n+    Default is True.\n+\n+``lookup_module_cpdef`` (True / False)\n+    Enable this to allow one to write ``your_module.foo = ...`` to overwrite the\n+    definition if the cpdef function foo, at the cost of an extra dictionary\n+    lookup on every call.\n+    If this is false it generates only the Python wrapper and no override check.\n+    Default is False.\n+\n+``embed`` (True / False)\n+    Whether or not to embed the Python interpreter, for use in making a\n+    standalone executable or calling from external libraries.\n+    This will provide a method which initialises the interpreter and\n+    executes the body of this module.\n+    See `this demo <https://github.com/cython/cython/tree/master/Demos/embed>`_\n+    for a concrete example.",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r190825393",
            "id": 190825393,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDgyNTM5Mw==",
            "original_commit_id": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "original_position": 108,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 123279221,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190825393",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2291#discussion_r191042305"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2291"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/191042305"
                }
            },
            "author_association": "MEMBER",
            "body": "Why \"undocumented\" ?",
            "commit_id": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "created_at": "2018-05-26T07:25:44Z",
            "diff_hunk": "@@ -28,94 +28,122 @@ def __repr__(self):\n         \"Illegal access of '%s' from Options module rather than directive '%s'\"\n         % (self.options_name, self.directive_name))\n \n-# Include docstrings.\n+\n+\"\"\" \n+The members of this module are documented using autodata in \n+Cython/docs/src/reference/compilation.rst.\n+See http://www.sphinx-doc.org/en/master/ext/autodoc.html#directive-autoattribute\n+for how autodata works. \n+Descriptions of those members should start with a #:\n+Donc forget to keep the docs in sync by removing and adding\n+the members in both this file and the .rst file.\n+\"\"\"\n+\n+#: Whether or not to include docstring in the Python extension. If False, the binary size\n+#: will be smaller, but the ``__doc__`` attribute of any class or function will be an\n+#: empty string.\n docstrings = True\n \n-# Embed the source code position in the docstrings of functions and classes.\n+#: Embed the source code position in the docstrings of functions and classes.\n embed_pos_in_docstring = False\n \n-# Copy the original source code line by line into C code comments\n-# in the generated code file to help with understanding the output.\n+#: Copy the original source code line by line into C code comments\n+#: in the generated code file to help with understanding the output.\n+#: This is also required for coverage analysis.\n emit_code_comments = True\n \n-pre_import = None  # undocumented\n+# undocumented\n+pre_import = None\n \n-# Decref global variables in this module on exit for garbage collection.\n-# 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n-# Mostly for reducing noise in Valgrind, only executes at process exit\n-# (when all memory will be reclaimed anyways).\n+#: Decref global variables in each module on exit for garbage collection.\n+#: 0: None, 1+: interned objects, 2+: cdef globals, 3+: types objects\n+#: Mostly for reducing noise in Valgrind, only executes at process exit\n+#: (when all memory will be reclaimed anyways).\n generate_cleanup_code = False\n \n-# Should tp_clear() set object fields to None instead of clearing them to NULL?\n+#: Should tp_clear() set object fields to None instead of clearing them to NULL?\n clear_to_none = True\n \n-# Generate an annotated HTML version of the input source files.\n+#: Generate an annotated HTML version of the input source files for debugging and optimisation purposes.\n+#: This has the same effect as the ``annotate`` argument in :func:`cythonize`.\n annotate = False\n \n # When annotating source files in HTML, include coverage information from\n # this file.\n+# Undocumented\n annotate_coverage_xml = None",
            "html_url": "https://github.com/cython/cython/pull/2291#discussion_r191042305",
            "id": 191042305,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTA0MjMwNQ==",
            "original_commit_id": "9caaec47f661ebd923ac73a360bd8dc9fa822b4d",
            "original_position": 58,
            "path": "Cython/Compiler/Options.py",
            "position": null,
            "pull_request_review_id": 123550115,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2291",
            "updated_at": "2018-06-29T16:54:39Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/191042305",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2291/comments",
    "commit_data": [
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1a443c2056673cde1646f86c758cb00f6a0ddea3/comments",
            "commit": {
                "author": {
                    "date": "2018-05-21T20:34:09Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-21T20:34:09Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Added the docs for the compiler options.",
                "tree": {
                    "sha": "5b36e9266d35fd1973cc33aa77402f617ce02eb8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/5b36e9266d35fd1973cc33aa77402f617ce02eb8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1a443c2056673cde1646f86c758cb00f6a0ddea3",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjFhNDQzYzIwNTY2NzNjZGUxNjQ2Zjg2Yzc1OGNiMDBmNmEwZGRlYTM=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c2a3457a262f98da57151aa44d7257f3b0bf48e1",
                    "sha": "c2a3457a262f98da57151aa44d7257f3b0bf48e1",
                    "url": "https://api.github.com/repos/cython/cython/commits/c2a3457a262f98da57151aa44d7257f3b0bf48e1"
                }
            ],
            "sha": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
            "url": "https://api.github.com/repos/cython/cython/commits/1a443c2056673cde1646f86c758cb00f6a0ddea3"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1d7ab99622204057038db5a1b1382d7f53bf921a/comments",
            "commit": {
                "author": {
                    "date": "2018-05-25T20:32:09Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-26T07:47:30Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Used autodata to avoid duplication of the options descriptions in the docs and in the python file.",
                "tree": {
                    "sha": "02e6016212f316ceb407de85b3b2d50679f20362",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/02e6016212f316ceb407de85b3b2d50679f20362"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1d7ab99622204057038db5a1b1382d7f53bf921a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/1d7ab99622204057038db5a1b1382d7f53bf921a",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjFkN2FiOTk2MjIyMDQwNTcwMzhkYjVhMWIxMzgyZDdmNTNiZjkyMWE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1a443c2056673cde1646f86c758cb00f6a0ddea3",
                    "sha": "1a443c2056673cde1646f86c758cb00f6a0ddea3",
                    "url": "https://api.github.com/repos/cython/cython/commits/1a443c2056673cde1646f86c758cb00f6a0ddea3"
                }
            ],
            "sha": "1d7ab99622204057038db5a1b1382d7f53bf921a",
            "url": "https://api.github.com/repos/cython/cython/commits/1d7ab99622204057038db5a1b1382d7f53bf921a"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/7e6908e1cb71ca71d648baae24069e4fbecfcf70/comments",
            "commit": {
                "author": {
                    "date": "2018-06-29T16:53:39Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-06-29T16:53:39Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Added a temporary workaround for autodocs not working with readthedocs.io.",
                "tree": {
                    "sha": "d9e48c86f0857a04707b104ad9e7012bba9ba9d6",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/d9e48c86f0857a04707b104ad9e7012bba9ba9d6"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/7e6908e1cb71ca71d648baae24069e4fbecfcf70",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjdlNjkwOGUxY2I3MWNhNzFkNjQ4YmFhZTI0MDY5ZTRmYmVjZmNmNzA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1d7ab99622204057038db5a1b1382d7f53bf921a",
                    "sha": "1d7ab99622204057038db5a1b1382d7f53bf921a",
                    "url": "https://api.github.com/repos/cython/cython/commits/1d7ab99622204057038db5a1b1382d7f53bf921a"
                }
            ],
            "sha": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
            "url": "https://api.github.com/repos/cython/cython/commits/7e6908e1cb71ca71d648baae24069e4fbecfcf70"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/2291/commits",
    "created_at": "2018-05-21T20:38:43Z",
    "diff_url": "https://github.com/cython/cython/pull/2291.diff",
    "head": {
        "label": "gabrieldemarmiesse:compiler_options",
        "ref": "compiler_options",
        "repo": {
            "archive_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/branches{/branch}",
            "clone_url": "https://github.com/gabrieldemarmiesse/cython.git",
            "collaborators_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contributors",
            "created_at": "2018-03-11T10:14:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/downloads",
            "events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/forks",
            "full_name": "gabrieldemarmiesse/cython",
            "git_commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/tags{/sha}",
            "git_url": "git://github.com/gabrieldemarmiesse/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/hooks",
            "html_url": "https://github.com/gabrieldemarmiesse/cython",
            "id": 124744628,
            "issue_comment_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/merges",
            "milestones_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjQ3NDQ2Mjg=",
            "notifications_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/pulls{/number}",
            "pushed_at": "2018-06-30T14:28:24Z",
            "releases_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/releases{/id}",
            "size": 51076,
            "ssh_url": "git@github.com:gabrieldemarmiesse/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscription",
            "svn_url": "https://github.com/gabrieldemarmiesse/cython",
            "tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/tags",
            "teams_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/teams",
            "trees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/trees{/sha}",
            "updated_at": "2018-06-22T18:57:43Z",
            "url": "https://api.github.com/repos/gabrieldemarmiesse/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "7e6908e1cb71ca71d648baae24069e4fbecfcf70",
        "user": {
            "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
            "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
            "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
            "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
            "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gabrieldemarmiesse",
            "id": 12891691,
            "login": "gabrieldemarmiesse",
            "node_id": "MDQ6VXNlcjEyODkxNjkx",
            "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
            "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
            "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gabrieldemarmiesse"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/2291",
    "id": 189481971,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/2291",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "34f1e6ed45df07d49dfe9c174ba4721f485eaa89",
    "merged_at": null,
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTg5NDgxOTcx",
    "number": 2291,
    "patch_url": "https://github.com/cython/cython/pull/2291.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/2291/comments",
    "state": "open",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/7e6908e1cb71ca71d648baae24069e4fbecfcf70",
    "title": "Added the docs for the compiler options.",
    "updated_at": "2018-06-29T16:57:41Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/2291",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
        "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
        "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
        "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gabrieldemarmiesse",
        "id": 12891691,
        "login": "gabrieldemarmiesse",
        "node_id": "MDQ6VXNlcjEyODkxNjkx",
        "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
        "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
        "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gabrieldemarmiesse"
    }
}