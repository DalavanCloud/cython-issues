{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/2067/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2067/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/2067"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/2067"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2067/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2067"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 680,
            "forks_count": 680,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 523,
            "open_issues_count": 523,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2018-06-08T19:51:12Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 50849,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 3175,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2018-06-08T21:26:35Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 3175,
            "watchers_count": 3175
        },
        "sha": "796cdbe5da38afb1c0349f6649c5668d46cc7f27",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "A common use case for extension types is to instantiate them from existing C/C++ pointers without copying. The documentation is not very clear on how to do this - there is a mention of 'factory function' in [extension type reference documentation](http://cython.readthedocs.io/en/latest/src/reference/extension_types.html?highlight=factory) but no example.\r\n\r\nThis is one of the most frequently asked questions on Q/A forums and websites like stack overflow with many new users struggling to get this right the first time, or why it doesn't work for extension types from pointers but does for extension types from native types. I also struggled with this when first starting to use Cython.\r\n\r\nThis example should help with this common question. The example code works as-is and can be compiled directly with cython to see how it works. Also added a link to the guide section from the reference document.\r\n\r\nLet me know if anything else is needed and many thanks for the awesome project.",
    "closed_at": "2018-05-23T17:45:32Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r161144387"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/161144387"
                }
            },
            "author_association": "MEMBER",
            "body": "There should be discussion here about pointer ownership, possibly tracked by a boolean. ",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-01-12T05:44:49Z",
            "diff_hunk": "@@ -484,6 +484,76 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+\n+        def __dealloc__(self):\n+            # De-allocate if we have a non-null pointer",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r161144387",
            "id": 161144387,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTE0NDM4Nw==",
            "original_commit_id": "de72d44066228e6c2229922f5f0148f802321cbc",
            "original_position": 32,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 88384327,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/161144387",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r161144446"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/161144446"
                }
            },
            "author_association": "MEMBER",
            "body": "These could also be static members on the class itself, which might be more natural than free functions. ",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-01-12T05:45:27Z",
            "diff_hunk": "@@ -484,6 +484,76 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+\n+        def __dealloc__(self):\n+            # De-allocate if we have a non-null pointer\n+            if self._ptr is not NULL:\n+                free(self._ptr)\n+\n+\n+    cdef WrapperClass PyWrapperClass(my_c_struct *_ptr):",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r161144446",
            "id": 161144446,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTE0NDQ0Ng==",
            "original_commit_id": "de72d44066228e6c2229922f5f0148f802321cbc",
            "original_position": 37,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 88384327,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/161144446",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r161197180"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/161197180"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Can you explain a little bit what you mean by pointer ownership? Like the class has a flag that if set, means it 'owns' the pointer and should de-allocate it?",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-01-12T11:16:39Z",
            "diff_hunk": "@@ -484,6 +484,76 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+\n+        def __dealloc__(self):\n+            # De-allocate if we have a non-null pointer",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r161197180",
            "id": 161197180,
            "in_reply_to_id": 161144387,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTE5NzE4MA==",
            "original_commit_id": "de72d44066228e6c2229922f5f0148f802321cbc",
            "original_position": 32,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 88446965,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/161197180",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r161199582"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/161199582"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I don't think static methods would be appropriate in this case. `PyWrapperClass` could well be a `cpdef` function to be used in both C and Python space, which static methods do not currently allow. Making it a regular python function then results in it having to be called via Python even when used in C code. A `def` staticmethod also raises compiler warnings about it not being a prototype due to the `PyObject*` return type without `void` arguments.\r\n\r\nHappy to add a note that they could be written as `@staticmethods` if you'd like, depending on developer preference and how they will be used.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-01-12T11:30:33Z",
            "diff_hunk": "@@ -484,6 +484,76 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+\n+        def __dealloc__(self):\n+            # De-allocate if we have a non-null pointer\n+            if self._ptr is not NULL:\n+                free(self._ptr)\n+\n+\n+    cdef WrapperClass PyWrapperClass(my_c_struct *_ptr):",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r161199582",
            "id": 161199582,
            "in_reply_to_id": 161144446,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTE5OTU4Mg==",
            "original_commit_id": "de72d44066228e6c2229922f5f0148f802321cbc",
            "original_position": 37,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 88449975,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/161199582",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r161353504"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/161353504"
                }
            },
            "author_association": "MEMBER",
            "body": "It can't be a cpdef method, for the same reason it can't just be the constructor, it must be a cdef method. I was suggesting something like\r\n\r\n```\r\ncdef class WrapperClass:\r\n    ...\r\n    @staticmethod\r\n    cdef WrapperClass create(c_data *ptr):\r\n        ...\r\n\r\n\r\ncdef WrapperClass o = WrapperClass.create(&c_data)\r\n```\r\n\r\n",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-01-13T00:15:43Z",
            "diff_hunk": "@@ -484,6 +484,76 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+\n+        def __dealloc__(self):\n+            # De-allocate if we have a non-null pointer\n+            if self._ptr is not NULL:\n+                free(self._ptr)\n+\n+\n+    cdef WrapperClass PyWrapperClass(my_c_struct *_ptr):",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r161353504",
            "id": 161353504,
            "in_reply_to_id": 161144446,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM1MzUwNA==",
            "original_commit_id": "de72d44066228e6c2229922f5f0148f802321cbc",
            "original_position": 37,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 88637525,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/161353504",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r161353518"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/161353518"
                }
            },
            "author_association": "MEMBER",
            "body": "Yep. ",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-01-13T00:15:48Z",
            "diff_hunk": "@@ -484,6 +484,76 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+\n+        def __dealloc__(self):\n+            # De-allocate if we have a non-null pointer",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r161353518",
            "id": 161353518,
            "in_reply_to_id": 161144387,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MTM1MzUxOA==",
            "original_commit_id": "de72d44066228e6c2229922f5f0148f802321cbc",
            "original_position": 32,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 88637540,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/161353518",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r162308890"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/162308890"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Sure, will make that change.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-01-18T10:57:18Z",
            "diff_hunk": "@@ -484,6 +484,76 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+\n+        def __dealloc__(self):\n+            # De-allocate if we have a non-null pointer\n+            if self._ptr is not NULL:\n+                free(self._ptr)\n+\n+\n+    cdef WrapperClass PyWrapperClass(my_c_struct *_ptr):",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r162308890",
            "id": 162308890,
            "in_reply_to_id": 161144446,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjMwODg5MA==",
            "original_commit_id": "de72d44066228e6c2229922f5f0148f802321cbc",
            "original_position": 37,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 89741646,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/162308890",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189503887"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189503887"
                }
            },
            "author_association": "MEMBER",
            "body": "Given that the pointer is NULL here, I think it would make more sense if this was False by default.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:27:44Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189503887",
            "id": 189503887,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwMzg4Nw==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 31,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189503887",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189503989"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189503989"
                }
            },
            "author_association": "MEMBER",
            "body": "This anchor belongs below the section.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:28:10Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189503989",
            "id": 189503989,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwMzk4OQ==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 2,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189503989",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189504317"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189504317"
                }
            },
            "author_association": "MEMBER",
            "body": "Here, the wrapper should not take ownership of the pointer (i.e. not free it). Alternatively, allow passing an explicit flag argument that transfers the ownership into the wrapper, so that it calls `free()` on dealloc.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:30:32Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189504317",
            "id": 189504317,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwNDMxNw==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 54,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189504317",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189504431"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189504431"
                }
            },
            "author_association": "MEMBER",
            "body": "Here, the wrapper must take ownership of the pointer.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:31:21Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr\n+            return wrapper\n+\n+        @staticmethod\n+        cdef WrapperClass new_struct():\n+            \"\"\"Factory function to create WrapperClass objects with\n+            newly allocated my_c_struct\"\"\"\n+            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n+            if _ptr is NULL:\n+                raise MemoryError\n+            _ptr.a = 0\n+            _ptr.b = 0\n+            return WrapperClass.from_ptr(_ptr)",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189504431",
            "id": 189504431,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwNDQzMQ==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 66,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189504431",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189504597"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189504597"
                }
            },
            "author_association": "MEMBER",
            "body": "\"wrap it at the same time\"",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:32:35Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr\n+            return wrapper\n+\n+        @staticmethod\n+        cdef WrapperClass new_struct():\n+            \"\"\"Factory function to create WrapperClass objects with\n+            newly allocated my_c_struct\"\"\"\n+            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n+            if _ptr is NULL:\n+                raise MemoryError\n+            _ptr.a = 0\n+            _ptr.b = 0\n+            return WrapperClass.from_ptr(_ptr)\n+\n+\n+To then create a ``WrapperClass`` object from an existing ``my_c_struct``\n+pointer, ``WrapperClass.from_ptr(ptr)`` can be used in Cython code. To allocate\n+a new structure and wrap it at same time, ``WrapperClass.new_struct`` can be",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189504597",
            "id": 189504597,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwNDU5Nw==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 71,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189504597",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189505301"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189505301"
                }
            },
            "author_association": "MEMBER",
            "body": "I'd say, remove this paragraph. It's not a good idea to free the GIL in `__dealloc__`. Why would you? The operations there should be short and quick, just clean up and then let your real code do its work again.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:37:36Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr\n+            return wrapper\n+\n+        @staticmethod\n+        cdef WrapperClass new_struct():\n+            \"\"\"Factory function to create WrapperClass objects with\n+            newly allocated my_c_struct\"\"\"\n+            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n+            if _ptr is NULL:\n+                raise MemoryError\n+            _ptr.a = 0\n+            _ptr.b = 0\n+            return WrapperClass.from_ptr(_ptr)\n+\n+\n+To then create a ``WrapperClass`` object from an existing ``my_c_struct``\n+pointer, ``WrapperClass.from_ptr(ptr)`` can be used in Cython code. To allocate\n+a new structure and wrap it at same time, ``WrapperClass.new_struct`` can be\n+used instead.\n+\n+It is possible to create multiple Python objects all from the same pointer\n+which point to the same in-memory data, if that is wanted, though care must be\n+taken when de-allocating as can be seen above.\n+Additionally, the ``ptr_owner`` flag can be used to control which\n+``WrapperClass`` object owns the pointer and is responsible for de-allocation -\n+this is set to ``True`` by default in the example.\n+\n+The GIL must *not* be released in ``__dealloc__`` either, or another lock used\n+if it is, in such cases or race conditions can occur with multiple\n+de-allocations.",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189505301",
            "id": 189505301,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwNTMwMQ==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 83,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189505301",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189505771"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189505771"
                }
            },
            "author_association": "MEMBER",
            "body": "\"Being a part of the object constructor, the `__cinit__` method has a Python signature, which makes it impossible to accept a `my_c_struct` pointer as an argument. Attempts to use pointers in a Python signature will result in errors like:\"",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:40:57Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr\n+            return wrapper\n+\n+        @staticmethod\n+        cdef WrapperClass new_struct():\n+            \"\"\"Factory function to create WrapperClass objects with\n+            newly allocated my_c_struct\"\"\"\n+            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n+            if _ptr is NULL:\n+                raise MemoryError\n+            _ptr.a = 0\n+            _ptr.b = 0\n+            return WrapperClass.from_ptr(_ptr)\n+\n+\n+To then create a ``WrapperClass`` object from an existing ``my_c_struct``\n+pointer, ``WrapperClass.from_ptr(ptr)`` can be used in Cython code. To allocate\n+a new structure and wrap it at same time, ``WrapperClass.new_struct`` can be\n+used instead.\n+\n+It is possible to create multiple Python objects all from the same pointer\n+which point to the same in-memory data, if that is wanted, though care must be\n+taken when de-allocating as can be seen above.\n+Additionally, the ``ptr_owner`` flag can be used to control which\n+``WrapperClass`` object owns the pointer and is responsible for de-allocation -\n+this is set to ``True`` by default in the example.\n+\n+The GIL must *not* be released in ``__dealloc__`` either, or another lock used\n+if it is, in such cases or race conditions can occur with multiple\n+de-allocations.\n+\n+Attempts to accept ``my_c_struct`` pointers in ``__cinit__`` will result in",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189505771",
            "id": 189505771,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwNTc3MQ==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 85,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189505771",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189505997"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189505997"
                }
            },
            "author_association": "MEMBER",
            "body": "\"convert the structure\" -> \"convert a pointer\"\r\nConverting structs from and to Python dicts is actually a supported feature.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:42:25Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr\n+            return wrapper\n+\n+        @staticmethod\n+        cdef WrapperClass new_struct():\n+            \"\"\"Factory function to create WrapperClass objects with\n+            newly allocated my_c_struct\"\"\"\n+            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n+            if _ptr is NULL:\n+                raise MemoryError\n+            _ptr.a = 0\n+            _ptr.b = 0\n+            return WrapperClass.from_ptr(_ptr)\n+\n+\n+To then create a ``WrapperClass`` object from an existing ``my_c_struct``\n+pointer, ``WrapperClass.from_ptr(ptr)`` can be used in Cython code. To allocate\n+a new structure and wrap it at same time, ``WrapperClass.new_struct`` can be\n+used instead.\n+\n+It is possible to create multiple Python objects all from the same pointer\n+which point to the same in-memory data, if that is wanted, though care must be\n+taken when de-allocating as can be seen above.\n+Additionally, the ``ptr_owner`` flag can be used to control which\n+``WrapperClass`` object owns the pointer and is responsible for de-allocation -\n+this is set to ``True`` by default in the example.\n+\n+The GIL must *not* be released in ``__dealloc__`` either, or another lock used\n+if it is, in such cases or race conditions can occur with multiple\n+de-allocations.\n+\n+Attempts to accept ``my_c_struct`` pointers in ``__cinit__`` will result in\n+errors like::\n+\n+  Cannot convert 'my_c_struct *' to Python object\n+\n+This is because Cython cannot automatically convert the structure to a Python",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189505997",
            "id": 189505997,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwNTk5Nw==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 90,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189505997",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189506165"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189506165"
                }
            },
            "author_association": "MEMBER",
            "body": "\"... data is not copied and the extension class is responsible for deallocating the memory.\"",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T06:43:35Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr\n+            return wrapper\n+\n+        @staticmethod\n+        cdef WrapperClass new_struct():\n+            \"\"\"Factory function to create WrapperClass objects with\n+            newly allocated my_c_struct\"\"\"\n+            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n+            if _ptr is NULL:\n+                raise MemoryError\n+            _ptr.a = 0\n+            _ptr.b = 0\n+            return WrapperClass.from_ptr(_ptr)\n+\n+\n+To then create a ``WrapperClass`` object from an existing ``my_c_struct``\n+pointer, ``WrapperClass.from_ptr(ptr)`` can be used in Cython code. To allocate\n+a new structure and wrap it at same time, ``WrapperClass.new_struct`` can be\n+used instead.\n+\n+It is possible to create multiple Python objects all from the same pointer\n+which point to the same in-memory data, if that is wanted, though care must be\n+taken when de-allocating as can be seen above.\n+Additionally, the ``ptr_owner`` flag can be used to control which\n+``WrapperClass`` object owns the pointer and is responsible for de-allocation -\n+this is set to ``True`` by default in the example.\n+\n+The GIL must *not* be released in ``__dealloc__`` either, or another lock used\n+if it is, in such cases or race conditions can occur with multiple\n+de-allocations.\n+\n+Attempts to accept ``my_c_struct`` pointers in ``__cinit__`` will result in\n+errors like::\n+\n+  Cannot convert 'my_c_struct *' to Python object\n+\n+This is because Cython cannot automatically convert the structure to a Python\n+object, unlike with native types like ``int``.\n+\n+Note that for native types, Cython will copy the value and create a new Python\n+object while in the above case, data is not copied and it is responsibility of\n+the extension class to correctly de-allocate.",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189506165",
            "id": 189506165,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTUwNjE2NQ==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 95,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121694098,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189506165",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189581569"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189581569"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "You'd remove the GIL when calling external C/C++ functions to handle exiting/de-allocation. These are often not that light weight and benefit from releasing the GIL when using multi-threading via Python stdlib. When wrapping external libraries, this is often the case.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T13:00:21Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr\n+            return wrapper\n+\n+        @staticmethod\n+        cdef WrapperClass new_struct():\n+            \"\"\"Factory function to create WrapperClass objects with\n+            newly allocated my_c_struct\"\"\"\n+            cdef my_c_struct *_ptr = <my_c_struct *>malloc(sizeof(my_c_struct))\n+            if _ptr is NULL:\n+                raise MemoryError\n+            _ptr.a = 0\n+            _ptr.b = 0\n+            return WrapperClass.from_ptr(_ptr)\n+\n+\n+To then create a ``WrapperClass`` object from an existing ``my_c_struct``\n+pointer, ``WrapperClass.from_ptr(ptr)`` can be used in Cython code. To allocate\n+a new structure and wrap it at same time, ``WrapperClass.new_struct`` can be\n+used instead.\n+\n+It is possible to create multiple Python objects all from the same pointer\n+which point to the same in-memory data, if that is wanted, though care must be\n+taken when de-allocating as can be seen above.\n+Additionally, the ``ptr_owner`` flag can be used to control which\n+``WrapperClass`` object owns the pointer and is responsible for de-allocation -\n+this is set to ``True`` by default in the example.\n+\n+The GIL must *not* be released in ``__dealloc__`` either, or another lock used\n+if it is, in such cases or race conditions can occur with multiple\n+de-allocations.",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189581569",
            "id": 189581569,
            "in_reply_to_id": 189505301,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTU4MTU2OQ==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 83,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121787289,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189581569",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189636940"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189636940"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Updated.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T16:10:13Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189636940",
            "id": 189636940,
            "in_reply_to_id": 189503887,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTYzNjk0MA==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 31,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121854915,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189636940",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189636980"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189636980"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Moved anchor.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T16:10:22Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189636980",
            "id": 189636980,
            "in_reply_to_id": 189503989,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTYzNjk4MA==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 2,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121854959,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189636980",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189637177"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189637177"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Added flag for pointer ownership, changed ``new_struct`` to make itself owner.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T16:10:56Z",
            "diff_hunk": "@@ -532,6 +532,100 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n \n .. _making_extension_types_weak_referenceable:\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self):\n+            # On cinit, do not create new structure but set pointer to NULL\n+            self._ptr = NULL\n+            self.ptr_owner = True\n+\n+        def __dealloc__(self):\n+            # De-allocate if not null and flag is set\n+            if self._ptr is not NULL and self.ptr_owner is True:\n+                free(self._ptr)\n+                self._ptr = NULL\n+\n+        # Extension class properties\n+        @property\n+        def a(self):\n+            return self._ptr.a if self._ptr is not NULL else None\n+\n+        @property\n+        def b(self):\n+            return self._ptr.b if self._ptr is not NULL else None\n+\n+        @staticmethod\n+        cdef WrapperClass from_ptr(my_c_struct *_ptr):\n+            \"\"\"Factory function to create WrapperClass objects from\n+            given my_c_struct pointer\"\"\"\n+            # Call to __new__ bypasses __init__ constructor\n+            cdef WrapperClass wrapper = WrapperClass.__new__(WrapperClass)\n+            wrapper._ptr = _ptr",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189637177",
            "id": 189637177,
            "in_reply_to_id": 189504317,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTYzNzE3Nw==",
            "original_commit_id": "69942272ad9ca13a7518ed58a2c77bb9a587db79",
            "original_position": 54,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121855168,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189637177",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r189684960"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189684960"
                }
            },
            "author_association": "MEMBER",
            "body": "I wouldn't recommend this approach, for two reasons.\r\n1) The argument is Python user visible and controllable, which makes it less safe from a C point of view.\r\n2) Passing a keyword argument through Python (or, in fact, any arguments at all) is not the most efficient thing you can do, and wrapper instantiation is often time critical.\r\n\r\nApart from passing pointers, one of the main reasons why people use factory functions is performance, because calling `__new__()` and setting attributes directly can be much faster than going through the complete Python object instantiation and especially passing arguments through the constructor, but you wouldn't want to spread that ugly instantiation code all through your code base. Thus, factory functions/methods.\r\n\r\nI thus consider it good practice to\r\n1) Pass no arguments into `__cinit__()` (if possible) and only bring the object into the minimally sane state there. You also don't need to set any pointer attributes to `NULL` there, since the object memory is always zeroed out after allocation.\r\n2) If instantiation from Python is allowed, do the non-trivial state initialisation (and thorough input checking, etc.) from `__init__()`, also to nicely support subclassing. In your example, you could accept a tuple with two integers as arguments to show that, and create a new struct from their values.\r\n3) Create cdef factory methods for time citical or non-Python input initialisation, and let them do the complete state setup with all attribute setting. Since they can only be called from C(ython) code, they can focus on speed rather than safety and don't need to do as much input checking.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-21T19:08:51Z",
            "diff_hunk": "@@ -530,6 +530,107 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = None\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self, owner=False):",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r189684960",
            "id": 189684960,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTY4NDk2MA==",
            "original_commit_id": "e98b190fc63df6b81bf64207ed0ff94eebc90145",
            "original_position": 28,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 121912369,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:55:51Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189684960",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2067#discussion_r190170666"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2067"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/190170666"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "All good points, thank you. Have updated without any arguments to `__cinit__`.",
            "commit_id": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "created_at": "2018-05-23T08:56:16Z",
            "diff_hunk": "@@ -530,6 +530,107 @@ statically sized freelist of ``N`` instances for a given type.  Example::\n     penguin = None\n     penguin = Penguin('fish 2')  # does not need to allocate memory!\n \n+.. _existing-pointers-instantiation:\n+\n+Instantiation from existing C/C++ pointers\n+===========================================\n+\n+It is quite common to want to instantiate an extension class from an existing\n+(pointer to a) data structure, often as returned by external C/C++ functions.\n+\n+As extension classes can only accept Python objects as arguments in their\n+contructors, this necessitates the use of factory functions. For example, ::\n+\n+    from libc.stdlib cimport malloc, free\n+\n+    # Example C struct\n+    ctypedef struct my_c_struct:\n+        int a\n+        int b\n+\n+\n+    cdef class WrapperClass:\n+        \"\"\"A wrapper class for a C/C++ data structure\"\"\"\n+        cdef my_c_struct *_ptr\n+        cdef bint ptr_owner\n+\n+        def __cinit__(self, owner=False):",
            "html_url": "https://github.com/cython/cython/pull/2067#discussion_r190170666",
            "id": 190170666,
            "in_reply_to_id": 189684960,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDE3MDY2Ng==",
            "original_commit_id": "e98b190fc63df6b81bf64207ed0ff94eebc90145",
            "original_position": 28,
            "path": "docs/src/userguide/extension_types.rst",
            "position": null,
            "pull_request_review_id": 122489955,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2067",
            "updated_at": "2018-05-23T08:56:16Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/190170666",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2067/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f0552fe2e82617df16c32deafaf160f2d5b97797/comments",
            "commit": {
                "author": {
                    "date": "2018-01-11T11:14:40Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-21T12:51:44Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "message": "Added documentation on extension class instantiation from existing pointer",
                "tree": {
                    "sha": "ac6aab63787d752efe098f47691da10e89c3b8c8",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/ac6aab63787d752efe098f47691da10e89c3b8c8"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f0552fe2e82617df16c32deafaf160f2d5b97797",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "html_url": "https://github.com/cython/cython/commit/f0552fe2e82617df16c32deafaf160f2d5b97797",
            "node_id": "MDY6Q29tbWl0MTAwMDc1NTU2OmYwNTUyZmUyZTgyNjE3ZGYxNmMzMmRlYWZhZjE2MGYyZDViOTc3OTc=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/796cdbe5da38afb1c0349f6649c5668d46cc7f27",
                    "sha": "796cdbe5da38afb1c0349f6649c5668d46cc7f27",
                    "url": "https://api.github.com/repos/cython/cython/commits/796cdbe5da38afb1c0349f6649c5668d46cc7f27"
                }
            ],
            "sha": "f0552fe2e82617df16c32deafaf160f2d5b97797",
            "url": "https://api.github.com/repos/cython/cython/commits/f0552fe2e82617df16c32deafaf160f2d5b97797"
        },
        {
            "author": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/f267baea99994870ebd14369cae28d3766004971/comments",
            "commit": {
                "author": {
                    "date": "2018-01-16T19:53:10Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-21T12:51:44Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "message": "fixup! Added documentation on extension class instantiation from existing pointer",
                "tree": {
                    "sha": "38eaf8d37efb7382230ef40a6b4da1944e712432",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/38eaf8d37efb7382230ef40a6b4da1944e712432"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/f267baea99994870ebd14369cae28d3766004971",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "html_url": "https://github.com/cython/cython/commit/f267baea99994870ebd14369cae28d3766004971",
            "node_id": "MDY6Q29tbWl0MTAwMDc1NTU2OmYyNjdiYWVhOTk5OTQ4NzBlYmQxNDM2OWNhZTI4ZDM3NjYwMDQ5NzE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f0552fe2e82617df16c32deafaf160f2d5b97797",
                    "sha": "f0552fe2e82617df16c32deafaf160f2d5b97797",
                    "url": "https://api.github.com/repos/cython/cython/commits/f0552fe2e82617df16c32deafaf160f2d5b97797"
                }
            ],
            "sha": "f267baea99994870ebd14369cae28d3766004971",
            "url": "https://api.github.com/repos/cython/cython/commits/f267baea99994870ebd14369cae28d3766004971"
        },
        {
            "author": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e98b190fc63df6b81bf64207ed0ff94eebc90145/comments",
            "commit": {
                "author": {
                    "date": "2018-05-21T16:00:05Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-21T16:00:05Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "message": "fixup! fixup! Added documentation on extension class instantiation from existing pointer",
                "tree": {
                    "sha": "2584f9205a1435331ef5e8798f565c6545ac58d1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/2584f9205a1435331ef5e8798f565c6545ac58d1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e98b190fc63df6b81bf64207ed0ff94eebc90145",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "html_url": "https://github.com/cython/cython/commit/e98b190fc63df6b81bf64207ed0ff94eebc90145",
            "node_id": "MDY6Q29tbWl0MTAwMDc1NTU2OmU5OGIxOTBmYzYzZGY2YjgxYmY2NDIwN2VkMGZmOTRlZWJjOTAxNDU=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/f267baea99994870ebd14369cae28d3766004971",
                    "sha": "f267baea99994870ebd14369cae28d3766004971",
                    "url": "https://api.github.com/repos/cython/cython/commits/f267baea99994870ebd14369cae28d3766004971"
                }
            ],
            "sha": "e98b190fc63df6b81bf64207ed0ff94eebc90145",
            "url": "https://api.github.com/repos/cython/cython/commits/e98b190fc63df6b81bf64207ed0ff94eebc90145"
        },
        {
            "author": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "comments_url": "https://api.github.com/repos/cython/cython/commits/300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d/comments",
            "commit": {
                "author": {
                    "date": "2018-02-22T20:34:02Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-23T08:55:45Z",
                    "email": "zuboci@yandex.com",
                    "name": "Pan"
                },
                "message": "fixup! fixup! fixup! Added documentation on extension class instantiation from existing pointer",
                "tree": {
                    "sha": "21ec833bb702123f1e34be246eb7bbd92b9de1a1",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/21ec833bb702123f1e34be246eb7bbd92b9de1a1"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "html_url": "https://github.com/cython/cython/commit/300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "node_id": "MDY6Q29tbWl0MTAwMDc1NTU2OjMwMGMzN2E0ZjM1Yzk1YTU0MGEyZjJkMGZhMGI2ZjVmYTMzNmNjN2Q=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e98b190fc63df6b81bf64207ed0ff94eebc90145",
                    "sha": "e98b190fc63df6b81bf64207ed0ff94eebc90145",
                    "url": "https://api.github.com/repos/cython/cython/commits/e98b190fc63df6b81bf64207ed0ff94eebc90145"
                }
            ],
            "sha": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
            "url": "https://api.github.com/repos/cython/cython/commits/300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/2067/commits",
    "created_at": "2018-01-11T11:23:14Z",
    "diff_url": "https://github.com/cython/cython/pull/2067.diff",
    "head": {
        "label": "pkittenis:ext_class_pointer_example",
        "ref": "ext_class_pointer_example",
        "repo": {
            "archive_url": "https://api.github.com/repos/pkittenis/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/pkittenis/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/pkittenis/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/pkittenis/cython/branches{/branch}",
            "clone_url": "https://github.com/pkittenis/cython.git",
            "collaborators_url": "https://api.github.com/repos/pkittenis/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/pkittenis/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/pkittenis/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/pkittenis/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/pkittenis/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/pkittenis/cython/contributors",
            "created_at": "2017-08-11T22:59:44Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/pkittenis/cython/deployments",
            "description": "A Python to C compiler",
            "downloads_url": "https://api.github.com/repos/pkittenis/cython/downloads",
            "events_url": "https://api.github.com/repos/pkittenis/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/pkittenis/cython/forks",
            "full_name": "pkittenis/cython",
            "git_commits_url": "https://api.github.com/repos/pkittenis/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/pkittenis/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/pkittenis/cython/git/tags{/sha}",
            "git_url": "git://github.com/pkittenis/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/pkittenis/cython/hooks",
            "html_url": "https://github.com/pkittenis/cython",
            "id": 100075556,
            "issue_comment_url": "https://api.github.com/repos/pkittenis/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/pkittenis/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/pkittenis/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/pkittenis/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/pkittenis/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/pkittenis/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/pkittenis/cython/merges",
            "milestones_url": "https://api.github.com/repos/pkittenis/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDAwNzU1NTY=",
            "notifications_url": "https://api.github.com/repos/pkittenis/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
                "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
                "followers_url": "https://api.github.com/users/pkittenis/followers",
                "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pkittenis",
                "id": 1391208,
                "login": "pkittenis",
                "node_id": "MDQ6VXNlcjEzOTEyMDg=",
                "organizations_url": "https://api.github.com/users/pkittenis/orgs",
                "received_events_url": "https://api.github.com/users/pkittenis/received_events",
                "repos_url": "https://api.github.com/users/pkittenis/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pkittenis"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/pkittenis/cython/pulls{/number}",
            "pushed_at": "2018-05-25T13:13:58Z",
            "releases_url": "https://api.github.com/repos/pkittenis/cython/releases{/id}",
            "size": 50558,
            "ssh_url": "git@github.com:pkittenis/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/pkittenis/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/pkittenis/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/pkittenis/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/pkittenis/cython/subscription",
            "svn_url": "https://github.com/pkittenis/cython",
            "tags_url": "https://api.github.com/repos/pkittenis/cython/tags",
            "teams_url": "https://api.github.com/repos/pkittenis/cython/teams",
            "trees_url": "https://api.github.com/repos/pkittenis/cython/git/trees{/sha}",
            "updated_at": "2017-08-11T22:59:48Z",
            "url": "https://api.github.com/repos/pkittenis/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
        "user": {
            "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
            "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
            "followers_url": "https://api.github.com/users/pkittenis/followers",
            "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
            "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/pkittenis",
            "id": 1391208,
            "login": "pkittenis",
            "node_id": "MDQ6VXNlcjEzOTEyMDg=",
            "organizations_url": "https://api.github.com/users/pkittenis/orgs",
            "received_events_url": "https://api.github.com/users/pkittenis/received_events",
            "repos_url": "https://api.github.com/users/pkittenis/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/pkittenis"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/2067",
    "id": 162356741,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/2067",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "8cab7b0af130cba0e101ced858402d9d793b7ccc",
    "merged_at": "2018-05-23T17:45:32Z",
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTYyMzU2NzQx",
    "number": 2067,
    "patch_url": "https://github.com/cython/cython/pull/2067.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/2067/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/300c37a4f35c95a540a2f2d0fa0b6f5fa336cc7d",
    "title": "[Docs][Ready for Review] Added documentation on extension class instanciation from existing pointer",
    "updated_at": "2018-05-24T08:50:00Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/2067",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1391208?v=4",
        "events_url": "https://api.github.com/users/pkittenis/events{/privacy}",
        "followers_url": "https://api.github.com/users/pkittenis/followers",
        "following_url": "https://api.github.com/users/pkittenis/following{/other_user}",
        "gists_url": "https://api.github.com/users/pkittenis/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pkittenis",
        "id": 1391208,
        "login": "pkittenis",
        "node_id": "MDQ6VXNlcjEzOTEyMDg=",
        "organizations_url": "https://api.github.com/users/pkittenis/orgs",
        "received_events_url": "https://api.github.com/users/pkittenis/received_events",
        "repos_url": "https://api.github.com/users/pkittenis/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pkittenis/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pkittenis/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pkittenis"
    }
}