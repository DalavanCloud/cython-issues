{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/2151/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2151/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/2151"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/2151"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2151/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2151"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 680,
            "forks_count": 680,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 523,
            "open_issues_count": 523,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2018-06-08T19:51:12Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 50849,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 3175,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2018-06-08T21:26:35Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 3175,
            "watchers_count": 3175
        },
        "sha": "831ce22f76d0d53fce86618b6914f7d0950e5070",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Hi! \r\nI changed the writing of the example. I tried to make it more clear for users. Also, I tried to use a more Pythonic syntax. I added some timings and explanations about the html report. \r\n\r\nPlease tell me if I should rephrase anything.",
    "closed_at": "2018-03-17T15:06:33Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175214719"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175214719"
                }
            },
            "author_association": "MEMBER",
            "body": "\"we'll have\" sounds like you get a segfault also in this case, so \"we would\" seems better. And calling it a \"nice\" segfault seems a bit ... early at this stage, I'd say. Remember, not everyone who reads this tutorial knows C.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:07:27Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175214719",
            "id": 175214719,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNDcxOQ==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 26,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104718314,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175214719",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175214944"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175214944"
                }
            },
            "author_association": "MEMBER",
            "body": "It's not clear here what \"p\" is, so maybe:\r\n\"The result is stored in the statically allocated C array ``p`` during processing, and will be copied into a Python list at the end ...\"",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:08:43Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175214944",
            "id": 175214944,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNDk0NA==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 19,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104718583,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175214944",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175215577"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175215577"
                }
            },
            "author_association": "MEMBER",
            "body": "Again, readers might not know C, so I suggest being a bit less hard on \"ugly C\" here to avoid sounding offensive.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:12:08Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice\n+segmentation fault, just like in C). ::\n+\n+    len_p = 0  # The number of elements in p\n+    n = 2\n+    while len_p < nb_primes:\n \n Lines 7-9 set up for a loop which will test candidate numbers for primeness\n-until the required number of primes has been found. Lines 11-12, which try\n-dividing a candidate by all the primes found so far, are of particular\n-interest. Because no Python objects are referred to, the loop is translated\n-entirely into C code, and thus runs very fast.\n-\n-When a prime is found, lines 14-15 add it to the p array for fast access by\n-the testing loop, and line 16 adds it to the result list. Again, you'll notice\n-that line 16 looks very much like a Python statement, and in fact it is, with\n-the twist that the C parameter ``n`` is automatically converted to a Python\n-object before being passed to the append method. Finally, at line 18, a normal\n+until the required number of primes has been found. ::\n+\n+    # Is n prime?\n+    for i in p[:len_p]:\n+        if n % i == 0:\n+            break\n+\n+Lines 11-12, which try dividing a candidate by all the primes found so far,\n+are of particular interest. Because no Python objects are referred to,\n+the loop is translated entirely into C code, and thus runs very fast.\n+You will notice the way we iterate over the ``p`` C array.  ::\n+\n+    for i in p[:len_p]:\n+\n+The loop gets translated into C code transparently. No more ugly C for loops!\n+Well don't forget how to loop in C style with integers yet, you might need it someday.",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175215577",
            "id": 175215577,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNTU3Nw==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 59,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104719363,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175215577",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175215937"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175215937"
                }
            },
            "author_association": "MEMBER",
            "body": "And again, mentioning a segfault here seems more confusing than helpful.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:14:11Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice\n+segmentation fault, just like in C). ::\n+\n+    len_p = 0  # The number of elements in p\n+    n = 2\n+    while len_p < nb_primes:\n \n Lines 7-9 set up for a loop which will test candidate numbers for primeness\n-until the required number of primes has been found. Lines 11-12, which try\n-dividing a candidate by all the primes found so far, are of particular\n-interest. Because no Python objects are referred to, the loop is translated\n-entirely into C code, and thus runs very fast.\n-\n-When a prime is found, lines 14-15 add it to the p array for fast access by\n-the testing loop, and line 16 adds it to the result list. Again, you'll notice\n-that line 16 looks very much like a Python statement, and in fact it is, with\n-the twist that the C parameter ``n`` is automatically converted to a Python\n-object before being passed to the append method. Finally, at line 18, a normal\n+until the required number of primes has been found. ::\n+\n+    # Is n prime?\n+    for i in p[:len_p]:\n+        if n % i == 0:\n+            break\n+\n+Lines 11-12, which try dividing a candidate by all the primes found so far,\n+are of particular interest. Because no Python objects are referred to,\n+the loop is translated entirely into C code, and thus runs very fast.\n+You will notice the way we iterate over the ``p`` C array.  ::\n+\n+    for i in p[:len_p]:\n+\n+The loop gets translated into C code transparently. No more ugly C for loops!\n+Well don't forget how to loop in C style with integers yet, you might need it someday.\n+If you don't use ``:len_p`` then Cython will loop over the 1000 elements of\n+the array (it won't go out of bounds and give a segmentation fault). ::",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175215937",
            "id": 175215937,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNTkzNw==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 61,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104719818,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175215937",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175216433"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175216433"
                }
            },
            "author_association": "MEMBER",
            "body": "\"an else after\" (\"else\" starts with a vowel sound and needs to be linked with \"an\").\r\nI'd also suggest putting \"else\" into quotes to make it stick out of the flow of English words, and I always write \"for-loop\" with a hyphen for exactly the same purpose.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:16:57Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice\n+segmentation fault, just like in C). ::\n+\n+    len_p = 0  # The number of elements in p\n+    n = 2\n+    while len_p < nb_primes:\n \n Lines 7-9 set up for a loop which will test candidate numbers for primeness\n-until the required number of primes has been found. Lines 11-12, which try\n-dividing a candidate by all the primes found so far, are of particular\n-interest. Because no Python objects are referred to, the loop is translated\n-entirely into C code, and thus runs very fast.\n-\n-When a prime is found, lines 14-15 add it to the p array for fast access by\n-the testing loop, and line 16 adds it to the result list. Again, you'll notice\n-that line 16 looks very much like a Python statement, and in fact it is, with\n-the twist that the C parameter ``n`` is automatically converted to a Python\n-object before being passed to the append method. Finally, at line 18, a normal\n+until the required number of primes has been found. ::\n+\n+    # Is n prime?\n+    for i in p[:len_p]:\n+        if n % i == 0:\n+            break\n+\n+Lines 11-12, which try dividing a candidate by all the primes found so far,\n+are of particular interest. Because no Python objects are referred to,\n+the loop is translated entirely into C code, and thus runs very fast.\n+You will notice the way we iterate over the ``p`` C array.  ::\n+\n+    for i in p[:len_p]:\n+\n+The loop gets translated into C code transparently. No more ugly C for loops!\n+Well don't forget how to loop in C style with integers yet, you might need it someday.\n+If you don't use ``:len_p`` then Cython will loop over the 1000 elements of\n+the array (it won't go out of bounds and give a segmentation fault). ::\n+\n+    # If no break occurred in the loop\n+    else:\n+        p[len_p] = n\n+        len_p += 1\n+    n += 1\n+\n+If no breaks occurred, it means that we found a prime, and the block of code\n+after the ``else`` line 16 will be executed. We add the prime found to ``p``.\n+If you find having a else after a for loop strange, just know that it's a",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175216433",
            "id": 175216433,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNjQzMw==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 71,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104720431,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175216433",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175217238"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175217238"
                }
            },
            "author_association": "MEMBER",
            "body": "\"hidden secret\" -> maybe: \"lesser known features of the Python language\" ?\r\nThe next sentence (\"it's not in C\", \"as if you wrote Python\") then seems somewhat redundant, but I like the link to the blog post.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:21:06Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice\n+segmentation fault, just like in C). ::\n+\n+    len_p = 0  # The number of elements in p\n+    n = 2\n+    while len_p < nb_primes:\n \n Lines 7-9 set up for a loop which will test candidate numbers for primeness\n-until the required number of primes has been found. Lines 11-12, which try\n-dividing a candidate by all the primes found so far, are of particular\n-interest. Because no Python objects are referred to, the loop is translated\n-entirely into C code, and thus runs very fast.\n-\n-When a prime is found, lines 14-15 add it to the p array for fast access by\n-the testing loop, and line 16 adds it to the result list. Again, you'll notice\n-that line 16 looks very much like a Python statement, and in fact it is, with\n-the twist that the C parameter ``n`` is automatically converted to a Python\n-object before being passed to the append method. Finally, at line 18, a normal\n+until the required number of primes has been found. ::\n+\n+    # Is n prime?\n+    for i in p[:len_p]:\n+        if n % i == 0:\n+            break\n+\n+Lines 11-12, which try dividing a candidate by all the primes found so far,\n+are of particular interest. Because no Python objects are referred to,\n+the loop is translated entirely into C code, and thus runs very fast.\n+You will notice the way we iterate over the ``p`` C array.  ::\n+\n+    for i in p[:len_p]:\n+\n+The loop gets translated into C code transparently. No more ugly C for loops!\n+Well don't forget how to loop in C style with integers yet, you might need it someday.\n+If you don't use ``:len_p`` then Cython will loop over the 1000 elements of\n+the array (it won't go out of bounds and give a segmentation fault). ::\n+\n+    # If no break occurred in the loop\n+    else:\n+        p[len_p] = n\n+        len_p += 1\n+    n += 1\n+\n+If no breaks occurred, it means that we found a prime, and the block of code\n+after the ``else`` line 16 will be executed. We add the prime found to ``p``.\n+If you find having a else after a for loop strange, just know that it's a\n+hidden secret of the python syntax, and actually doesn't exist in C!\n+But since Cython is made to be written with the Python syntax, it'll\n+work out, as if you wrote Python code, but at C speed in this case.",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175217238",
            "id": 175217238,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNzIzOA==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 74,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104721382,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175217238",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175217343"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175217343"
                }
            },
            "author_association": "MEMBER",
            "body": "Be explicit, say \"copy\".",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:21:37Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice\n+segmentation fault, just like in C). ::\n+\n+    len_p = 0  # The number of elements in p\n+    n = 2\n+    while len_p < nb_primes:\n \n Lines 7-9 set up for a loop which will test candidate numbers for primeness\n-until the required number of primes has been found. Lines 11-12, which try\n-dividing a candidate by all the primes found so far, are of particular\n-interest. Because no Python objects are referred to, the loop is translated\n-entirely into C code, and thus runs very fast.\n-\n-When a prime is found, lines 14-15 add it to the p array for fast access by\n-the testing loop, and line 16 adds it to the result list. Again, you'll notice\n-that line 16 looks very much like a Python statement, and in fact it is, with\n-the twist that the C parameter ``n`` is automatically converted to a Python\n-object before being passed to the append method. Finally, at line 18, a normal\n+until the required number of primes has been found. ::\n+\n+    # Is n prime?\n+    for i in p[:len_p]:\n+        if n % i == 0:\n+            break\n+\n+Lines 11-12, which try dividing a candidate by all the primes found so far,\n+are of particular interest. Because no Python objects are referred to,\n+the loop is translated entirely into C code, and thus runs very fast.\n+You will notice the way we iterate over the ``p`` C array.  ::\n+\n+    for i in p[:len_p]:\n+\n+The loop gets translated into C code transparently. No more ugly C for loops!\n+Well don't forget how to loop in C style with integers yet, you might need it someday.\n+If you don't use ``:len_p`` then Cython will loop over the 1000 elements of\n+the array (it won't go out of bounds and give a segmentation fault). ::\n+\n+    # If no break occurred in the loop\n+    else:\n+        p[len_p] = n\n+        len_p += 1\n+    n += 1\n+\n+If no breaks occurred, it means that we found a prime, and the block of code\n+after the ``else`` line 16 will be executed. We add the prime found to ``p``.\n+If you find having a else after a for loop strange, just know that it's a\n+hidden secret of the python syntax, and actually doesn't exist in C!\n+But since Cython is made to be written with the Python syntax, it'll\n+work out, as if you wrote Python code, but at C speed in this case.\n+If the for...else syntax still confuses you, see this excellent\n+`blog post <https://shahriar.svbtle.com/pythons-else-clause-in-loops>`_. ::\n+\n+    # Let's put the result in a python list:\n+    result_as_list  = [prime for prime in p[:len_p]]\n+    return result_as_list\n+\n+Line 22, before returning the result, we need to convert our C array into a",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175217343",
            "id": 175217343,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNzM0Mw==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 82,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104721503,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175217343",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175217833"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175217833"
                }
            },
            "author_association": "MEMBER",
            "body": "\"Note that ... \" -> \"Cython can automatically convert many C types from and to Python types, as described in the documentation on [type conversion].\"",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:24:23Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice\n+segmentation fault, just like in C). ::\n+\n+    len_p = 0  # The number of elements in p\n+    n = 2\n+    while len_p < nb_primes:\n \n Lines 7-9 set up for a loop which will test candidate numbers for primeness\n-until the required number of primes has been found. Lines 11-12, which try\n-dividing a candidate by all the primes found so far, are of particular\n-interest. Because no Python objects are referred to, the loop is translated\n-entirely into C code, and thus runs very fast.\n-\n-When a prime is found, lines 14-15 add it to the p array for fast access by\n-the testing loop, and line 16 adds it to the result list. Again, you'll notice\n-that line 16 looks very much like a Python statement, and in fact it is, with\n-the twist that the C parameter ``n`` is automatically converted to a Python\n-object before being passed to the append method. Finally, at line 18, a normal\n+until the required number of primes has been found. ::\n+\n+    # Is n prime?\n+    for i in p[:len_p]:\n+        if n % i == 0:\n+            break\n+\n+Lines 11-12, which try dividing a candidate by all the primes found so far,\n+are of particular interest. Because no Python objects are referred to,\n+the loop is translated entirely into C code, and thus runs very fast.\n+You will notice the way we iterate over the ``p`` C array.  ::\n+\n+    for i in p[:len_p]:\n+\n+The loop gets translated into C code transparently. No more ugly C for loops!\n+Well don't forget how to loop in C style with integers yet, you might need it someday.\n+If you don't use ``:len_p`` then Cython will loop over the 1000 elements of\n+the array (it won't go out of bounds and give a segmentation fault). ::\n+\n+    # If no break occurred in the loop\n+    else:\n+        p[len_p] = n\n+        len_p += 1\n+    n += 1\n+\n+If no breaks occurred, it means that we found a prime, and the block of code\n+after the ``else`` line 16 will be executed. We add the prime found to ``p``.\n+If you find having a else after a for loop strange, just know that it's a\n+hidden secret of the python syntax, and actually doesn't exist in C!\n+But since Cython is made to be written with the Python syntax, it'll\n+work out, as if you wrote Python code, but at C speed in this case.\n+If the for...else syntax still confuses you, see this excellent\n+`blog post <https://shahriar.svbtle.com/pythons-else-clause-in-loops>`_. ::\n+\n+    # Let's put the result in a python list:\n+    result_as_list  = [prime for prime in p[:len_p]]\n+    return result_as_list\n+\n+Line 22, before returning the result, we need to convert our C array into a\n+Python list, because Python can't read C arrays. Note that Cython handle\n+for you the conversion of quite some types between C and Python (you can",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175217833",
            "id": 175217833,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxNzgzMw==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 84,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104722137,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175217833",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175218092"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175218092"
                }
            },
            "author_association": "MEMBER",
            "body": "\"given a type\" -> \"explicitly declared with a type\"",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:25:46Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end\n+of the function (line 22). ::\n+\n+    if nb_primes > 1000:\n+        nb_primes = 1000\n+\n+As in C, declaring a static array requires knowing the size at compile time.\n+We make sure the user doesn't set a value above 1000 (or we'll have a nice\n+segmentation fault, just like in C). ::\n+\n+    len_p = 0  # The number of elements in p\n+    n = 2\n+    while len_p < nb_primes:\n \n Lines 7-9 set up for a loop which will test candidate numbers for primeness\n-until the required number of primes has been found. Lines 11-12, which try\n-dividing a candidate by all the primes found so far, are of particular\n-interest. Because no Python objects are referred to, the loop is translated\n-entirely into C code, and thus runs very fast.\n-\n-When a prime is found, lines 14-15 add it to the p array for fast access by\n-the testing loop, and line 16 adds it to the result list. Again, you'll notice\n-that line 16 looks very much like a Python statement, and in fact it is, with\n-the twist that the C parameter ``n`` is automatically converted to a Python\n-object before being passed to the append method. Finally, at line 18, a normal\n+until the required number of primes has been found. ::\n+\n+    # Is n prime?\n+    for i in p[:len_p]:\n+        if n % i == 0:\n+            break\n+\n+Lines 11-12, which try dividing a candidate by all the primes found so far,\n+are of particular interest. Because no Python objects are referred to,\n+the loop is translated entirely into C code, and thus runs very fast.\n+You will notice the way we iterate over the ``p`` C array.  ::\n+\n+    for i in p[:len_p]:\n+\n+The loop gets translated into C code transparently. No more ugly C for loops!\n+Well don't forget how to loop in C style with integers yet, you might need it someday.\n+If you don't use ``:len_p`` then Cython will loop over the 1000 elements of\n+the array (it won't go out of bounds and give a segmentation fault). ::\n+\n+    # If no break occurred in the loop\n+    else:\n+        p[len_p] = n\n+        len_p += 1\n+    n += 1\n+\n+If no breaks occurred, it means that we found a prime, and the block of code\n+after the ``else`` line 16 will be executed. We add the prime found to ``p``.\n+If you find having a else after a for loop strange, just know that it's a\n+hidden secret of the python syntax, and actually doesn't exist in C!\n+But since Cython is made to be written with the Python syntax, it'll\n+work out, as if you wrote Python code, but at C speed in this case.\n+If the for...else syntax still confuses you, see this excellent\n+`blog post <https://shahriar.svbtle.com/pythons-else-clause-in-loops>`_. ::\n+\n+    # Let's put the result in a python list:\n+    result_as_list  = [prime for prime in p[:len_p]]\n+    return result_as_list\n+\n+Line 22, before returning the result, we need to convert our C array into a\n+Python list, because Python can't read C arrays. Note that Cython handle\n+for you the conversion of quite some types between C and Python (you can\n+see exactly which :ref:`here<type-conversion>`. But not C arrays. We can trick\n+Cython into doing it because Cython knows how to convert a C int to a Python int.\n+By doing a list comprehension, we \"cast\" each C int prime from p into a Python int.\n+You could have also iterated manually over the C array and used\n+``result_as_list.append(prime)``, the result would have been the same.\n+\n+You'll notice we declare a Python list exactly the same way it would be in Python.\n+Because the variable ``result_as_list`` hasn't been given a type, it is assumed to",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175218092",
            "id": 175218092,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxODA5Mg==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 92,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104722432,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175218092",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175218562"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175218562"
                }
            },
            "author_association": "MEMBER",
            "body": "-> \"Cython has a way to visualise where interaction with Python objects and Python's C-API is taking place. For this, pass the `annotate=True` parameter to `cythonize()`:\"",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:28:13Z",
            "diff_hunk": "@@ -165,6 +221,72 @@ which we can try out in the interactive interpreter as follows::\n See, it works! And if you're curious about how much work Cython has saved you,\n take a look at the C code generated for this module.\n \n+\n+It is always good to check where is the Python interaction in the code with the",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175218562",
            "id": 175218562,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxODU2Mg==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 104,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104722999,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175218562",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175218778"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175218778"
                }
            },
            "author_association": "MEMBER",
            "body": "\"makes sense ... to be yellow\" - you didn't say what yellow is or means, so it makes no sense at all ;-)",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:29:22Z",
            "diff_hunk": "@@ -165,6 +221,72 @@ which we can try out in the interactive interpreter as follows::\n See, it works! And if you're curious about how much work Cython has saved you,\n take a look at the C code generated for this module.\n \n+\n+It is always good to check where is the Python interaction in the code with the\n+``annotate=True`` parameter in ``cythonize()``. Let's see:\n+\n+.. figure:: htmlreport.png\n+\n+The function declaration and return use the Python interpreter so it makes\n+sense for those lines to be yellow. Same for the list comprehension because",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175218778",
            "id": 175218778,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxODc3OA==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 110,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104723241,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175218778",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175219167"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175219167"
                }
            },
            "author_association": "MEMBER",
            "body": "You need IPython for this, and IPython has a different prompt, so this mix is confusing.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:31:36Z",
            "diff_hunk": "@@ -165,6 +221,72 @@ which we can try out in the interactive interpreter as follows::\n See, it works! And if you're curious about how much work Cython has saved you,\n take a look at the C code generated for this module.\n \n+\n+It is always good to check where is the Python interaction in the code with the\n+``annotate=True`` parameter in ``cythonize()``. Let's see:\n+\n+.. figure:: htmlreport.png\n+\n+The function declaration and return use the Python interpreter so it makes\n+sense for those lines to be yellow. Same for the list comprehension because\n+it involves the creation of a python object. But the line ``if n % i == 0:``, why?\n+We can examine the generated C code to understand:\n+\n+.. figure:: python_division.png\n+\n+We can see that some checks happen. Because Cython defaults to the\n+Python behavior, the language will perform division checks at runtime,\n+just like Python does. You can deactivate those checks by using the\n+:ref:`compiler directives<compiler-directives>`.\n+\n+Now let's see if, even if we have division checks, we obtained a boost in speed.\n+Let's write the same program, but Python-style::\n+\n+    def primes_python(nb_primes):\n+        p = []\n+        n = 2\n+        while len(p) < nb_primes:\n+            # Is n prime?\n+            for i in p:\n+                if n % i == 0:\n+                    break\n+\n+            # If no break occurred in the loop\n+            else:\n+                p.append(n)\n+            n += 1\n+        return p\n+\n+Now we can ensure that those two programs output the same values::\n+\n+    >>> primes_python(500) == primes(500)\n+    True\n+\n+It's possible to compare the speed now::\n+\n+    >>> %timeit primes_python(500)",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175219167",
            "id": 175219167,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxOTE2Nw==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 146,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104723698,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175219167",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175219432"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175219432"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice idea to compare the two!\r\nIn fact, why not add a third measurement that benchmarks the compiled plain Python code? Then you could mention at the same time that Cython can also compile normal .py files.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:33:02Z",
            "diff_hunk": "@@ -165,6 +221,72 @@ which we can try out in the interactive interpreter as follows::\n See, it works! And if you're curious about how much work Cython has saved you,\n take a look at the C code generated for this module.\n \n+\n+It is always good to check where is the Python interaction in the code with the\n+``annotate=True`` parameter in ``cythonize()``. Let's see:\n+\n+.. figure:: htmlreport.png\n+\n+The function declaration and return use the Python interpreter so it makes\n+sense for those lines to be yellow. Same for the list comprehension because\n+it involves the creation of a python object. But the line ``if n % i == 0:``, why?\n+We can examine the generated C code to understand:\n+\n+.. figure:: python_division.png\n+\n+We can see that some checks happen. Because Cython defaults to the\n+Python behavior, the language will perform division checks at runtime,\n+just like Python does. You can deactivate those checks by using the\n+:ref:`compiler directives<compiler-directives>`.\n+\n+Now let's see if, even if we have division checks, we obtained a boost in speed.\n+Let's write the same program, but Python-style::",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175219432",
            "id": 175219432,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxOTQzMg==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 122,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": 133,
            "pull_request_review_id": 104724043,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175219432",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175219958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175219958"
                }
            },
            "author_association": "MEMBER",
            "body": "11x isn't much, and thus not very convincing. I'm sure that's because 500 is a fairly low number, so the call overhead and the final copying probably still dominate the execution time.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:35:39Z",
            "diff_hunk": "@@ -165,6 +221,72 @@ which we can try out in the interactive interpreter as follows::\n See, it works! And if you're curious about how much work Cython has saved you,\n take a look at the C code generated for this module.\n \n+\n+It is always good to check where is the Python interaction in the code with the\n+``annotate=True`` parameter in ``cythonize()``. Let's see:\n+\n+.. figure:: htmlreport.png\n+\n+The function declaration and return use the Python interpreter so it makes\n+sense for those lines to be yellow. Same for the list comprehension because\n+it involves the creation of a python object. But the line ``if n % i == 0:``, why?\n+We can examine the generated C code to understand:\n+\n+.. figure:: python_division.png\n+\n+We can see that some checks happen. Because Cython defaults to the\n+Python behavior, the language will perform division checks at runtime,\n+just like Python does. You can deactivate those checks by using the\n+:ref:`compiler directives<compiler-directives>`.\n+\n+Now let's see if, even if we have division checks, we obtained a boost in speed.\n+Let's write the same program, but Python-style::\n+\n+    def primes_python(nb_primes):\n+        p = []\n+        n = 2\n+        while len(p) < nb_primes:\n+            # Is n prime?\n+            for i in p:\n+                if n % i == 0:\n+                    break\n+\n+            # If no break occurred in the loop\n+            else:\n+                p.append(n)\n+            n += 1\n+        return p\n+\n+Now we can ensure that those two programs output the same values::\n+\n+    >>> primes_python(500) == primes(500)\n+    True\n+\n+It's possible to compare the speed now::\n+\n+    >>> %timeit primes_python(500)\n+5.8 ms ± 178 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) ::\n+\n+    >>> %timeit primes(500)\n+502 µs ± 2.22 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n+\n+The Cython version is 11 times faster than the Python version! What could explain this?",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175219958",
            "id": 175219958,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIxOTk1OA==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 152,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104724621,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175219958",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175221369"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175221369"
                }
            },
            "author_association": "MEMBER",
            "body": "Hmm, although - \"statically\" is actually wrong, it's \"stack allocated\". But it's a bit difficult to be both accurate here (for someone who knows C) and easily understandable (for someone who does not know what stack allocation is)...",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:43:40Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175221369",
            "id": 175221369,
            "in_reply_to_id": 175214944,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIyMTM2OQ==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 19,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104726339,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175221369",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175223100"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175223100"
                }
            },
            "author_association": "NONE",
            "body": "We could just say 'The result is stored in the C array p during processing, and will be copied into a Python list at the end'. It's not wrong and C users will discover later on that it was allocated on the stack. ",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-16T21:53:48Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175223100",
            "id": 175223100,
            "in_reply_to_id": 175214944,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTIyMzEwMA==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 19,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104728404,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175223100",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175254374"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175254374"
                }
            },
            "author_association": "MEMBER",
            "body": "With the caveat that stack allocation of larger chunks of data is something that should generally be avoided. The example is using up 4K of stack space on most systems, that's a lot. New users who don't know about this could easily learn bad habits from this.\r\n\r\nI'm aware that this is what the example always did, so you're not introducing a new problem here. Maybe adding a note on the memory behaviour and linking to the memory allocation chapter would help.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-17T10:34:28Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175254374",
            "id": 175254374,
            "in_reply_to_id": 175214944,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDM3NA==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 19,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104762825,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175254374",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175254894"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175254894"
                }
            },
            "author_association": "NONE",
            "body": "Ok I'll do that.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-17T10:59:51Z",
            "diff_hunk": "@@ -132,27 +132,83 @@ them as a Python list.\n     :linenos:\n \n You'll see that it starts out just like a normal Python function definition,\n-except that the parameter ``kmax`` is declared to be of type ``int`` . This\n+except that the parameter ``nb_primes`` is declared to be of type ``int`` . This\n means that the object passed will be converted to a C integer (or a\n ``TypeError.`` will be raised if it can't be).\n \n+Now, let's dig into the core of the function::\n+\n+    cdef int n, i, len_p\n+    cdef int p[1000]\n+\n Lines 2 and 3 use the ``cdef`` statement to define some local C variables.\n-Line 4 creates a Python list which will be used to return the result. You'll\n-notice that this is done exactly the same way it would be in Python. Because\n-the variable result hasn't been given a type, it is assumed to hold a Python\n-object.\n+The result is put in ``p``, it will be converted to a python list at the end",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175254894",
            "id": 175254894,
            "in_reply_to_id": 175214944,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDg5NA==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 19,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104763328,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:26:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175254894",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175255477"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175255477"
                }
            },
            "author_association": "NONE",
            "body": "I added the pure python-cythonized version below.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-17T11:27:43Z",
            "diff_hunk": "@@ -165,6 +221,72 @@ which we can try out in the interactive interpreter as follows::\n See, it works! And if you're curious about how much work Cython has saved you,\n take a look at the C code generated for this module.\n \n+\n+It is always good to check where is the Python interaction in the code with the\n+``annotate=True`` parameter in ``cythonize()``. Let's see:\n+\n+.. figure:: htmlreport.png\n+\n+The function declaration and return use the Python interpreter so it makes\n+sense for those lines to be yellow. Same for the list comprehension because\n+it involves the creation of a python object. But the line ``if n % i == 0:``, why?\n+We can examine the generated C code to understand:\n+\n+.. figure:: python_division.png\n+\n+We can see that some checks happen. Because Cython defaults to the\n+Python behavior, the language will perform division checks at runtime,\n+just like Python does. You can deactivate those checks by using the\n+:ref:`compiler directives<compiler-directives>`.\n+\n+Now let's see if, even if we have division checks, we obtained a boost in speed.\n+Let's write the same program, but Python-style::",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175255477",
            "id": 175255477,
            "in_reply_to_id": 175219432,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NTQ3Nw==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 122,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": 133,
            "pull_request_review_id": 104763864,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:27:43Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175255477",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175255536"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175255536"
                }
            },
            "author_association": "NONE",
            "body": "I increased that to 1000, but since we can't increase the size of the stack-allocated array, I couldn't get more than that.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-17T11:30:59Z",
            "diff_hunk": "@@ -165,6 +221,72 @@ which we can try out in the interactive interpreter as follows::\n See, it works! And if you're curious about how much work Cython has saved you,\n take a look at the C code generated for this module.\n \n+\n+It is always good to check where is the Python interaction in the code with the\n+``annotate=True`` parameter in ``cythonize()``. Let's see:\n+\n+.. figure:: htmlreport.png\n+\n+The function declaration and return use the Python interpreter so it makes\n+sense for those lines to be yellow. Same for the list comprehension because\n+it involves the creation of a python object. But the line ``if n % i == 0:``, why?\n+We can examine the generated C code to understand:\n+\n+.. figure:: python_division.png\n+\n+We can see that some checks happen. Because Cython defaults to the\n+Python behavior, the language will perform division checks at runtime,\n+just like Python does. You can deactivate those checks by using the\n+:ref:`compiler directives<compiler-directives>`.\n+\n+Now let's see if, even if we have division checks, we obtained a boost in speed.\n+Let's write the same program, but Python-style::\n+\n+    def primes_python(nb_primes):\n+        p = []\n+        n = 2\n+        while len(p) < nb_primes:\n+            # Is n prime?\n+            for i in p:\n+                if n % i == 0:\n+                    break\n+\n+            # If no break occurred in the loop\n+            else:\n+                p.append(n)\n+            n += 1\n+        return p\n+\n+Now we can ensure that those two programs output the same values::\n+\n+    >>> primes_python(500) == primes(500)\n+    True\n+\n+It's possible to compare the speed now::\n+\n+    >>> %timeit primes_python(500)\n+5.8 ms ± 178 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) ::\n+\n+    >>> %timeit primes(500)\n+502 µs ± 2.22 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n+\n+The Cython version is 11 times faster than the Python version! What could explain this?",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175255536",
            "id": 175255536,
            "in_reply_to_id": 175219958,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NTUzNg==",
            "original_commit_id": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "original_position": 152,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104763920,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T11:30:59Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175255536",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175260941"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175260941"
                }
            },
            "author_association": "MEMBER",
            "body": "> But not C arrays\r\n\r\nI actually just remembered that that's not true. Simply returning the array should make Cython copy it into a list. The problem is that returning a sliced array does not work (yet).\r\n\r\nI'll make a couple of minor changes here and there.",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-17T15:20:04Z",
            "diff_hunk": "@@ -184,29 +191,29 @@ the array (it won't go out of bounds and give a segmentation fault). ::\n \n If no breaks occurred, it means that we found a prime, and the block of code\n after the ``else`` line 16 will be executed. We add the prime found to ``p``.\n-If you find having a else after a for loop strange, just know that it's a\n-hidden secret of the python syntax, and actually doesn't exist in C!\n-But since Cython is made to be written with the Python syntax, it'll\n-work out, as if you wrote Python code, but at C speed in this case.\n-If the for...else syntax still confuses you, see this excellent\n+If you find having an ``else`` after a ``for-loop`` strange, just know that it's a\n+lesser known features of the Python language of the python syntax, and\n+actually doesn't exist in C! But since Cython is made to be written with the\n+Python syntax, it'll work out, but at C speed in this case.\n+If the ``for-else`` syntax still confuses you, see this excellent\n `blog post <https://shahriar.svbtle.com/pythons-else-clause-in-loops>`_. ::\n \n     # Let's put the result in a python list:\n     result_as_list  = [prime for prime in p[:len_p]]\n     return result_as_list\n \n-Line 22, before returning the result, we need to convert our C array into a\n-Python list, because Python can't read C arrays. Note that Cython handle\n-for you the conversion of quite some types between C and Python (you can\n-see exactly which :ref:`here<type-conversion>`. But not C arrays. We can trick\n+Line 22, before returning the result, we need to copy our C array into a\n+Python list, because Python can't read C arrays. Cython can automatically\n+convert many C types from and to Python types, as described in the\n+documentation on :ref:`type conversion <type-conversion>`. But not C arrays. We can trick",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175260941",
            "id": 175260941,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2MDk0MQ==",
            "original_commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "original_position": 69,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104769150,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T15:20:04Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175260941",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2151#discussion_r175261176"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2151"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175261176"
                }
            },
            "author_association": "NONE",
            "body": "I didn't know Cython could do it. Thanks for the info!",
            "commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "created_at": "2018-03-17T15:29:49Z",
            "diff_hunk": "@@ -184,29 +191,29 @@ the array (it won't go out of bounds and give a segmentation fault). ::\n \n If no breaks occurred, it means that we found a prime, and the block of code\n after the ``else`` line 16 will be executed. We add the prime found to ``p``.\n-If you find having a else after a for loop strange, just know that it's a\n-hidden secret of the python syntax, and actually doesn't exist in C!\n-But since Cython is made to be written with the Python syntax, it'll\n-work out, as if you wrote Python code, but at C speed in this case.\n-If the for...else syntax still confuses you, see this excellent\n+If you find having an ``else`` after a ``for-loop`` strange, just know that it's a\n+lesser known features of the Python language of the python syntax, and\n+actually doesn't exist in C! But since Cython is made to be written with the\n+Python syntax, it'll work out, but at C speed in this case.\n+If the ``for-else`` syntax still confuses you, see this excellent\n `blog post <https://shahriar.svbtle.com/pythons-else-clause-in-loops>`_. ::\n \n     # Let's put the result in a python list:\n     result_as_list  = [prime for prime in p[:len_p]]\n     return result_as_list\n \n-Line 22, before returning the result, we need to convert our C array into a\n-Python list, because Python can't read C arrays. Note that Cython handle\n-for you the conversion of quite some types between C and Python (you can\n-see exactly which :ref:`here<type-conversion>`. But not C arrays. We can trick\n+Line 22, before returning the result, we need to copy our C array into a\n+Python list, because Python can't read C arrays. Cython can automatically\n+convert many C types from and to Python types, as described in the\n+documentation on :ref:`type conversion <type-conversion>`. But not C arrays. We can trick",
            "html_url": "https://github.com/cython/cython/pull/2151#discussion_r175261176",
            "id": 175261176,
            "in_reply_to_id": 175260941,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI2MTE3Ng==",
            "original_commit_id": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "original_position": 69,
            "path": "docs/src/tutorial/cython_tutorial.rst",
            "position": null,
            "pull_request_review_id": 104769396,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2151",
            "updated_at": "2018-03-17T15:29:49Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175261176",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2151/comments",
    "commit_data": [
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1105d7225823eb87d50d69ac7e7ab3c166fec8f4/comments",
            "commit": {
                "author": {
                    "date": "2018-03-14T19:01:22Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-14T19:01:22Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Some improvements one the tutorial page.",
                "tree": {
                    "sha": "587d6f0774b03bb567cc3a27ae916dc5edbe001f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/587d6f0774b03bb567cc3a27ae916dc5edbe001f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1105d7225823eb87d50d69ac7e7ab3c166fec8f4",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/1105d7225823eb87d50d69ac7e7ab3c166fec8f4",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjExMDVkNzIyNTgyM2ViODdkNTBkNjlhYzdlN2FiM2MxNjZmZWM4ZjQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/831ce22f76d0d53fce86618b6914f7d0950e5070",
                    "sha": "831ce22f76d0d53fce86618b6914f7d0950e5070",
                    "url": "https://api.github.com/repos/cython/cython/commits/831ce22f76d0d53fce86618b6914f7d0950e5070"
                }
            ],
            "sha": "1105d7225823eb87d50d69ac7e7ab3c166fec8f4",
            "url": "https://api.github.com/repos/cython/cython/commits/1105d7225823eb87d50d69ac7e7ab3c166fec8f4"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c6daaccfa01a34d9891cc387e20a04fe8b83191b/comments",
            "commit": {
                "author": {
                    "date": "2018-03-15T19:03:26Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-15T19:03:26Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Corrected a big mistake about speedup.",
                "tree": {
                    "sha": "176a51be491a9ccced2712bf5c1cd2728470a955",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/176a51be491a9ccced2712bf5c1cd2728470a955"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c6daaccfa01a34d9891cc387e20a04fe8b83191b",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OmM2ZGFhY2NmYTAxYTM0ZDk4OTFjYzM4N2UyMGEwNGZlOGI4MzE5MWI=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1105d7225823eb87d50d69ac7e7ab3c166fec8f4",
                    "sha": "1105d7225823eb87d50d69ac7e7ab3c166fec8f4",
                    "url": "https://api.github.com/repos/cython/cython/commits/1105d7225823eb87d50d69ac7e7ab3c166fec8f4"
                }
            ],
            "sha": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
            "url": "https://api.github.com/repos/cython/cython/commits/c6daaccfa01a34d9891cc387e20a04fe8b83191b"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0/comments",
            "commit": {
                "author": {
                    "date": "2018-03-17T11:26:03Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-17T11:26:03Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Made all the necessary changes.",
                "tree": {
                    "sha": "1f791efa505cea37e7fa01fe93b10c577da2143b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/1f791efa505cea37e7fa01fe93b10c577da2143b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjhmOTQ4NWNjMGI0MWZlNzhkYzlmZDdjNWEyOTg0YzQzYzZhMTQ2ZDA=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c6daaccfa01a34d9891cc387e20a04fe8b83191b",
                    "sha": "c6daaccfa01a34d9891cc387e20a04fe8b83191b",
                    "url": "https://api.github.com/repos/cython/cython/commits/c6daaccfa01a34d9891cc387e20a04fe8b83191b"
                }
            ],
            "sha": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
            "url": "https://api.github.com/repos/cython/cython/commits/8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/2151/commits",
    "created_at": "2018-03-14T19:04:38Z",
    "diff_url": "https://github.com/cython/cython/pull/2151.diff",
    "head": {
        "label": "gabrieldemarmiesse:example_cython_tutorial",
        "ref": "example_cython_tutorial",
        "repo": {
            "archive_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/branches{/branch}",
            "clone_url": "https://github.com/gabrieldemarmiesse/cython.git",
            "collaborators_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contributors",
            "created_at": "2018-03-11T10:14:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/downloads",
            "events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/forks",
            "full_name": "gabrieldemarmiesse/cython",
            "git_commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/tags{/sha}",
            "git_url": "git://github.com/gabrieldemarmiesse/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/hooks",
            "html_url": "https://github.com/gabrieldemarmiesse/cython",
            "id": 124744628,
            "issue_comment_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/merges",
            "milestones_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjQ3NDQ2Mjg=",
            "notifications_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/pulls{/number}",
            "pushed_at": "2018-06-05T11:12:34Z",
            "releases_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/releases{/id}",
            "size": 50659,
            "ssh_url": "git@github.com:gabrieldemarmiesse/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscription",
            "svn_url": "https://github.com/gabrieldemarmiesse/cython",
            "tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/tags",
            "teams_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/teams",
            "trees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/trees{/sha}",
            "updated_at": "2018-05-28T12:43:28Z",
            "url": "https://api.github.com/repos/gabrieldemarmiesse/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
        "user": {
            "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
            "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
            "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
            "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
            "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gabrieldemarmiesse",
            "id": 12891691,
            "login": "gabrieldemarmiesse",
            "node_id": "MDQ6VXNlcjEyODkxNjkx",
            "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
            "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
            "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gabrieldemarmiesse"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/2151",
    "id": 175055785,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/2151",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "de2a01e23dd2c86c91b49911584de9640a5da02f",
    "merged_at": "2018-03-17T15:06:33Z",
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc1MDU1Nzg1",
    "number": 2151,
    "patch_url": "https://github.com/cython/cython/pull/2151.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/2151/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/8f9485cc0b41fe78dc9fd7c5a2984c43c6a146d0",
    "title": "An improved version of the tutorial.",
    "updated_at": "2018-05-10T17:06:32Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/2151",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
        "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
        "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
        "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gabrieldemarmiesse",
        "id": 12891691,
        "login": "gabrieldemarmiesse",
        "node_id": "MDQ6VXNlcjEyODkxNjkx",
        "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
        "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
        "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gabrieldemarmiesse"
    }
}