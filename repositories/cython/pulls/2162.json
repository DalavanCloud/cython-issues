{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/2162/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2162/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/2162"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/2162"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2162/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2162"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/a171e51a9388cf65a745a3d9ead7fbcb040c37ba"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 680,
            "forks_count": 680,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 523,
            "open_issues_count": 523,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2018-06-08T19:51:12Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 50849,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 3175,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2018-06-08T21:26:35Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 3175,
            "watchers_count": 3175
        },
        "sha": "89cfbb4a3a0540abeec1703fd3ee31eba9293936",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "Hi!\r\n\r\nI'll need some help one two points. I'm trying to explain the speed gains in the docs.\r\n\r\n- Using `infer_types=True` make the code faster than when manually declaring type. See line 377.\r\n\r\n- Using fused types make the code faster than when supporting only one type. See line 420.\r\n\r\nThank you!\r\n\r\n",
    "closed_at": "2018-03-23T06:36:03Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175901966"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175901966"
                }
            },
            "author_association": "MEMBER",
            "body": "I think a more concrete directory name would be nice for these files. Why not name it \"memoryviews\" rather than \"userguide\"? That's what they showcase, after all.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T19:54:43Z",
            "diff_hunk": "@@ -136,50 +136,8 @@ valid Python and valid Cython code. I'll refer to it as both\n :file:`convolve_py.py` for the Python version and :file:`convolve1.pyx` for the\n Cython version -- Cython uses \".pyx\" as its file suffix.\n \n-.. code-block:: python\n-\n-    from __future__ import division\n-    import numpy as np\n-    def naive_convolve(f, g):\n-        # f is an image and is indexed by (v, w)\n-        # g is a filter kernel and is indexed by (s, t),\n-        #   it needs odd dimensions\n-        # h is the output image and is indexed by (x, y),\n-        #   it is not cropped\n-        if g.shape[0] % 2 != 1 or g.shape[1] % 2 != 1:\n-            raise ValueError(\"Only odd dimensions on filter supported\")\n-        # smid and tmid are number of pixels between the center pixel\n-        # and the edge, ie for a 5x5 filter they will be 2.\n-        #\n-        # The output size is calculated by adding smid, tmid to each\n-        # side of the dimensions of the input image.\n-        vmax = f.shape[0]\n-        wmax = f.shape[1]\n-        smax = g.shape[0]\n-        tmax = g.shape[1]\n-        smid = smax // 2\n-        tmid = tmax // 2\n-        xmax = vmax + 2*smid\n-        ymax = wmax + 2*tmid\n-        # Allocate result image.\n-        h = np.zeros([xmax, ymax], dtype=f.dtype)\n-        # Do convolution\n-        for x in range(xmax):\n-            for y in range(ymax):\n-                # Calculate pixel value for h at (x,y). Sum one component\n-                # for each pixel (s, t) of the filter g.\n-                s_from = max(smid - x, -smid)\n-                s_to = min((xmax - x) - smid, smid + 1)\n-                t_from = max(tmid - y, -tmid)\n-                t_to = min((ymax - y) - tmid, tmid + 1)\n-                value = 0\n-                for s in range(s_from, s_to):\n-                    for t in range(t_from, t_to):\n-                        v = x - smid + s\n-                        w = y - tmid + t\n-                        value += g[smid - s, tmid - t] * f[v, w]\n-                h[x, y] = value\n-        return h\n+.. literalinclude:: ../../examples/userguide/convolve_py.py",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175901966",
            "id": 175901966,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwMTk2Ng==",
            "original_commit_id": "adc1aa70f1548eee6711e428c25f5172936c37bf",
            "original_position": 57,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105511049,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175901966",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175902403"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175902403"
                }
            },
            "author_association": "MEMBER",
            "body": "\"longuer\" -> \"longer\". But actually, I'd remove this sentence all together. I don't consider it helpful in any way.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T19:56:05Z",
            "diff_hunk": "@@ -6,35 +6,29 @@\n Cython for NumPy users\n **************************\n \n-.. NOTE:: Cython 0.16 introduced typed memoryviews as a successor to the NumPy\n-          integration described here.  They are easier to use than the buffer syntax\n-          below, have less overhead, and can be passed around without requiring the GIL.\n-          They should be preferred to the syntax presented in this page.\n-          See :ref:`Typed Memoryviews <memoryviews>`.\n-\n-\n This tutorial is aimed at NumPy users who have no experience with Cython at\n all. If you have some knowledge of Cython you may want to skip to the\n-''Efficient indexing'' section which explains the new improvements made in\n-summer 2008.\n+''Efficient indexing'' section.\n \n The main scenario considered is NumPy end-use rather than NumPy/SciPy\n development. The reason is that Cython is not (yet) able to support functions\n-that are generic with respect to datatype and the number of dimensions in a\n+that are generic with respect to the number of dimensions in a\n high-level fashion. This restriction is much more severe for SciPy development\n than more specific, \"end-user\" functions. See the last section for more\n information on this.\n \n The style of this tutorial will not fit everybody, so you can also consider:\n \n-* Robert Bradshaw's `slides on cython for SciPy2008\n-  <http://wiki.sagemath.org/scipy08?action=AttachFile&do=get&target=scipy-cython.tgz>`_\n-  (a higher-level and quicker introduction)\n-* Basic Cython documentation (see `Cython front page <http://cython.org>`_).\n-* ``[:enhancements/buffer:Spec for the efficient indexing]``\n+* Kurt Smith's `video tutorial of Cython at SciPy 2015\n+  <https://www.youtube.com/watch?v=gMvkiQ-gOW8&t=4730s&ab_channel=Enthought>`_.\n+  It's longuer but some readers like watching talks more than reading.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175902403",
            "id": 175902403,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwMjQwMw==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 34,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105511568,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175902403",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175903016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175903016"
                }
            },
            "author_association": "MEMBER",
            "body": "actually not for \"full programs\", but rather \"Cython implemented libraries and packages\".",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T19:58:15Z",
            "diff_hunk": "@@ -70,31 +64,36 @@ However there are several options to automate these steps:\n \n 1. The `SAGE <http://sagemath.org>`_ mathematics software system provides\n    excellent support for using Cython and NumPy from an interactive command\n-   line (like IPython) or through a notebook interface (like\n+   line or through a notebook interface (like\n    Maple/Mathematica). See `this documentation\n-   <http://www.sagemath.org/doc/prog/node40.html>`_.\n-2. A version of `pyximport <http://www.prescod.net/pyximport/>`_ is shipped\n-   with Cython, so that you can import pyx-files dynamically into Python and\n+   <http://doc.sagemath.org/html/en/developer/coding_in_cython.html>`_.\n+2. Cython can be used as an extension within a Jupyter notebook,\n+   making it easy to compile and use Cython code with just a ``%%cython``\n+   at the top of a cell. For more information see\n+   :ref:`Using the Jupyter Notebook <jupyter-notebook>`.\n+3. A version of pyximport is shipped with Cython,\n+   so that you can import pyx-files dynamically into Python and\n    have them compiled automatically (See :ref:`pyximport`).\n-3. Cython supports distutils so that you can very easily create build scripts\n+4. Cython supports distutils so that you can very easily create build scripts\n    which automate the process, this is the preferred method for full programs.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175903016",
            "id": 175903016,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwMzAxNg==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 79,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105512381,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175903016",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175903863"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175903863"
                }
            },
            "author_association": "MEMBER",
            "body": "This doesn't really apply directly to Jupyter, where users are not expected to \"compile\" anything but things are happening behind their back when running a Cython cell. When you change something in a Jupyter Cython cell, it will automatically be recompiled. If you don't change anything, it won't be.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:01:19Z",
            "diff_hunk": "@@ -70,31 +64,36 @@ However there are several options to automate these steps:\n \n 1. The `SAGE <http://sagemath.org>`_ mathematics software system provides\n    excellent support for using Cython and NumPy from an interactive command\n-   line (like IPython) or through a notebook interface (like\n+   line or through a notebook interface (like\n    Maple/Mathematica). See `this documentation\n-   <http://www.sagemath.org/doc/prog/node40.html>`_.\n-2. A version of `pyximport <http://www.prescod.net/pyximport/>`_ is shipped\n-   with Cython, so that you can import pyx-files dynamically into Python and\n+   <http://doc.sagemath.org/html/en/developer/coding_in_cython.html>`_.\n+2. Cython can be used as an extension within a Jupyter notebook,\n+   making it easy to compile and use Cython code with just a ``%%cython``\n+   at the top of a cell. For more information see\n+   :ref:`Using the Jupyter Notebook <jupyter-notebook>`.\n+3. A version of pyximport is shipped with Cython,\n+   so that you can import pyx-files dynamically into Python and\n    have them compiled automatically (See :ref:`pyximport`).\n-3. Cython supports distutils so that you can very easily create build scripts\n+4. Cython supports distutils so that you can very easily create build scripts\n    which automate the process, this is the preferred method for full programs.\n-4. Manual compilation (see below)\n+   See :ref:`Compiling with distutils <compiling-distutils>`.\n+5. Manual compilation (see below)\n \n .. Note::\n     If using another interactive command line environment than SAGE, like\n-    IPython or Python itself, it is important that you restart the process\n+    IPython, Jupyter Notebook or Python itself, it is important that you restart the process",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175903863",
            "id": 175903863,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwMzg2Mw==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 87,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105513418,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175903863",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175904569"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175904569"
                }
            },
            "author_association": "MEMBER",
            "body": "Removing this paragraph removes information that users would need for manual compilation: \"call `numpy.get_include()` and add the result to your C include paths.\"",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:04:02Z",
            "diff_hunk": "@@ -125,10 +124,6 @@ like::\n \n     $ gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -fno-strict-aliasing -I/usr/include/python2.7 -o yourmod.so yourmod.c\n \n-``gcc`` should have access to the NumPy C header files so if they are not\n-installed at :file:`/usr/include/numpy` or similar you may need to pass another\n-option for those.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175904569",
            "id": 175904569,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwNDU2OQ==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 115,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105514301,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175904569",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175905720"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175905720"
                }
            },
            "author_association": "MEMBER",
            "body": "for-loops",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:08:34Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175905720",
            "id": 175905720,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwNTcyMA==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 51,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105515802,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175905720",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175906691"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175906691"
                }
            },
            "author_association": "MEMBER",
            "body": "I actually think that all the index/size variables should use `Py_ssize_t` rather than `int` as type, just to avoid providing bad examples.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:11:58Z",
            "diff_hunk": "@@ -0,0 +1,60 @@\n+import numpy as np\r\n+\r\n+# \"def\" can type its arguments but not have a return type. The type of the\r\n+# arguments for a \"def\" function is checked at run-time when entering the\r\n+# function.\r\n+# We now need to fix a datatype for our arrays. I've used the variable\r\n+# DTYPE for this, which is assigned to the usual NumPy runtime\r\n+# type info object.\r\n+DTYPE = np.intc\r\n+# The arrays f, g and h is typed as \"np.ndarray\" instances. The only effect\r\n+# this has is to a) insert checks that the function arguments really are\r\n+# NumPy arrays, and b) make some attribute access like f.shape[0] much\r\n+# more efficient. (In this example this doesn't matter though.)\r\n+def naive_convolve_memview(int [:,:] f, int [:,:] g):\r\n+    if g.shape[0] % 2 != 1 or g.shape[1] % 2 != 1:\r\n+        raise ValueError(\"Only odd dimensions on filter supported\")\r\n+    # The \"cdef\" keyword is also used within functions to type variables. It\r\n+    # can only be used at the top indentation level (there are non-trivial\r\n+    # problems with allowing them in other places, though we'd love to see\r\n+    # good and thought out proposals for it).\r\n+    #\r\n+    # For the indices, the \"int\" type is used. This corresponds to a C int,\r\n+    # other C types (like \"unsigned int\") could have been used instead.\r\n+    # Purists could use \"Py_ssize_t\" which is the proper Python type for\r\n+    # array indices.\r\n+    cdef int vmax = f.shape[0]\r\n+    cdef int wmax = f.shape[1]\r\n+    cdef int smax = g.shape[0]\r\n+    cdef int tmax = g.shape[1]\r\n+    cdef int smid = smax // 2\r\n+    cdef int tmid = tmax // 2\r\n+    cdef int xmax = vmax + 2*smid\r\n+    cdef int ymax = wmax + 2*tmid\r\n+    h_np =  np.zeros([xmax, ymax], dtype=DTYPE)\r\n+    cdef int [:,:] h = h_np\r\n+    cdef int x, y, s, t, v, w\r",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175906691",
            "id": 175906691,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwNjY5MQ==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 36,
            "path": "docs/examples/userguide/convolve_memview.pyx",
            "position": null,
            "pull_request_review_id": 105516976,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175906691",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175906958"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175906958"
                }
            },
            "author_association": "MEMBER",
            "body": "\"we pass C int values\" (or size_t or whatever you choose).",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:12:56Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines\n+of C code to set up while in :file:`convolve_typed.c` a normal C for loop is used.\n \n After building this and continuing my (very informal) benchmarks, I get:\n \n .. sourcecode:: ipython\n \n-    In [21]: import convolve2\n-    In [22]: %timeit -n2 -r3 convolve2.naive_convolve(f, g)\n-    2 loops, best of 3: 828 ms per loop\n+    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n+    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n+    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [22]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n+    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n \n-Efficient indexing\n-====================\n+So in the end, adding types make the Cython code slower?\n+\n+What happend is that most of the time spend in this code is spent on line\n+60. ::\n+\n+    value += g[smid - s, tmid - t] * f[v, w]\n+\n+So what made this line so much slower than in the pure Python version?\n+\n+``g`` and ``f`` are still NumPy arrays, so Python objects, and expect\n+Python integers as indexes. Here we give C integers. So every time",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175906958",
            "id": 175906958,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwNjk1OA==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 80,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105517295,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175906958",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175908035"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175908035"
                }
            },
            "author_association": "MEMBER",
            "body": "I would explicitly say \"to Python int objects\" here, to emphasise the difference to native C values.\r\nAnd \"it outweighs\" the speed benefits.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:16:53Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines\n+of C code to set up while in :file:`convolve_typed.c` a normal C for loop is used.\n \n After building this and continuing my (very informal) benchmarks, I get:\n \n .. sourcecode:: ipython\n \n-    In [21]: import convolve2\n-    In [22]: %timeit -n2 -r3 convolve2.naive_convolve(f, g)\n-    2 loops, best of 3: 828 ms per loop\n+    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n+    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n+    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [22]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n+    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n \n-Efficient indexing\n-====================\n+So in the end, adding types make the Cython code slower?\n+\n+What happend is that most of the time spend in this code is spent on line\n+60. ::\n+\n+    value += g[smid - s, tmid - t] * f[v, w]\n+\n+So what made this line so much slower than in the pure Python version?\n+\n+``g`` and ``f`` are still NumPy arrays, so Python objects, and expect\n+Python integers as indexes. Here we give C integers. So every time\n+Cython reaches this line, it has to convert all the C integers to Python\n+integers. Since this line is called very often, it outweight the speed",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175908035",
            "id": 175908035,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwODAzNQ==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 82,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105518639,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175908035",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175908555"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175908555"
                }
            },
            "author_association": "MEMBER",
            "body": "\"and since 'value' is a C integer\"",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:18:33Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines\n+of C code to set up while in :file:`convolve_typed.c` a normal C for loop is used.\n \n After building this and continuing my (very informal) benchmarks, I get:\n \n .. sourcecode:: ipython\n \n-    In [21]: import convolve2\n-    In [22]: %timeit -n2 -r3 convolve2.naive_convolve(f, g)\n-    2 loops, best of 3: 828 ms per loop\n+    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n+    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n+    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [22]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n+    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n \n-Efficient indexing\n-====================\n+So in the end, adding types make the Cython code slower?\n+\n+What happend is that most of the time spend in this code is spent on line\n+60. ::\n+\n+    value += g[smid - s, tmid - t] * f[v, w]\n+\n+So what made this line so much slower than in the pure Python version?\n+\n+``g`` and ``f`` are still NumPy arrays, so Python objects, and expect\n+Python integers as indexes. Here we give C integers. So every time\n+Cython reaches this line, it has to convert all the C integers to Python\n+integers. Since this line is called very often, it outweight the speed\n+benefits of the pure C loops that were created from the ``range()`` earlier.\n+\n+Furthermore, ``g[smid - s, tmid - t] * f[v, w]`` returns a Python integer\n+and ``value`` is a C integers, Cython has to do a type conversion again.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175908555",
            "id": 175908555,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwODU1NQ==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 86,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105519252,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175908555",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175908722"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175908722"
                }
            },
            "author_association": "MEMBER",
            "body": "\"type conversions\"",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:19:02Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines\n+of C code to set up while in :file:`convolve_typed.c` a normal C for loop is used.\n \n After building this and continuing my (very informal) benchmarks, I get:\n \n .. sourcecode:: ipython\n \n-    In [21]: import convolve2\n-    In [22]: %timeit -n2 -r3 convolve2.naive_convolve(f, g)\n-    2 loops, best of 3: 828 ms per loop\n+    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n+    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n+    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [22]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n+    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n \n-Efficient indexing\n-====================\n+So in the end, adding types make the Cython code slower?\n+\n+What happend is that most of the time spend in this code is spent on line\n+60. ::\n+\n+    value += g[smid - s, tmid - t] * f[v, w]\n+\n+So what made this line so much slower than in the pure Python version?\n+\n+``g`` and ``f`` are still NumPy arrays, so Python objects, and expect\n+Python integers as indexes. Here we give C integers. So every time\n+Cython reaches this line, it has to convert all the C integers to Python\n+integers. Since this line is called very often, it outweight the speed\n+benefits of the pure C loops that were created from the ``range()`` earlier.\n+\n+Furthermore, ``g[smid - s, tmid - t] * f[v, w]`` returns a Python integer\n+and ``value`` is a C integers, Cython has to do a type conversion again.\n+In the end those types conversions add up. And made our convolution really",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175908722",
            "id": 175908722,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwODcyMg==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 87,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105519462,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175908722",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175908886"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175908886"
                }
            },
            "author_association": "MEMBER",
            "body": "\"two bottlenecks that degrade the performance\"",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:19:37Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines\n+of C code to set up while in :file:`convolve_typed.c` a normal C for loop is used.\n \n After building this and continuing my (very informal) benchmarks, I get:\n \n .. sourcecode:: ipython\n \n-    In [21]: import convolve2\n-    In [22]: %timeit -n2 -r3 convolve2.naive_convolve(f, g)\n-    2 loops, best of 3: 828 ms per loop\n+    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n+    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n+    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [22]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n+    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n \n-Efficient indexing\n-====================\n+So in the end, adding types make the Cython code slower?\n+\n+What happend is that most of the time spend in this code is spent on line\n+60. ::\n+\n+    value += g[smid - s, tmid - t] * f[v, w]\n+\n+So what made this line so much slower than in the pure Python version?\n+\n+``g`` and ``f`` are still NumPy arrays, so Python objects, and expect\n+Python integers as indexes. Here we give C integers. So every time\n+Cython reaches this line, it has to convert all the C integers to Python\n+integers. Since this line is called very often, it outweight the speed\n+benefits of the pure C loops that were created from the ``range()`` earlier.\n+\n+Furthermore, ``g[smid - s, tmid - t] * f[v, w]`` returns a Python integer\n+and ``value`` is a C integers, Cython has to do a type conversion again.\n+In the end those types conversions add up. And made our convolution really\n+slow. But this can be solved easily by using memoryviews.\n+\n+Efficient indexing with memoryviews\n+===================================\n \n-There's still a bottleneck killing performance, and that is the array lookups\n-and assignments. The ``[]``-operator still uses full Python operations --\n+There are still two bottleneck killing performance, and that is the array lookups",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175908886",
            "id": 175908886,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwODg4Ng==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 95,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105519665,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175908886",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175909621"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175909621"
                }
            },
            "author_association": "MEMBER",
            "body": "Well, a pointer, yes, but also all the necessary buffer metadata to provide efficient and safe access: dimensions, strides, item size, item type information, etc.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:21:58Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines\n+of C code to set up while in :file:`convolve_typed.c` a normal C for loop is used.\n \n After building this and continuing my (very informal) benchmarks, I get:\n \n .. sourcecode:: ipython\n \n-    In [21]: import convolve2\n-    In [22]: %timeit -n2 -r3 convolve2.naive_convolve(f, g)\n-    2 loops, best of 3: 828 ms per loop\n+    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n+    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n+    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [22]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n+    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n \n-Efficient indexing\n-====================\n+So in the end, adding types make the Cython code slower?\n+\n+What happend is that most of the time spend in this code is spent on line\n+60. ::\n+\n+    value += g[smid - s, tmid - t] * f[v, w]\n+\n+So what made this line so much slower than in the pure Python version?\n+\n+``g`` and ``f`` are still NumPy arrays, so Python objects, and expect\n+Python integers as indexes. Here we give C integers. So every time\n+Cython reaches this line, it has to convert all the C integers to Python\n+integers. Since this line is called very often, it outweight the speed\n+benefits of the pure C loops that were created from the ``range()`` earlier.\n+\n+Furthermore, ``g[smid - s, tmid - t] * f[v, w]`` returns a Python integer\n+and ``value`` is a C integers, Cython has to do a type conversion again.\n+In the end those types conversions add up. And made our convolution really\n+slow. But this can be solved easily by using memoryviews.\n+\n+Efficient indexing with memoryviews\n+===================================\n \n-There's still a bottleneck killing performance, and that is the array lookups\n-and assignments. The ``[]``-operator still uses full Python operations --\n+There are still two bottleneck killing performance, and that is the array lookups\n+and assignments, as well as C/Python types conversion.\n+The ``[]``-operator still uses full Python operations --\n what we would like to do instead is to access the data buffer directly at C\n speed.\n \n What we need to do then is to type the contents of the :obj:`ndarray` objects.\n-We do this with a special \"buffer\" syntax which must be told the datatype\n-(first argument) and number of dimensions (\"ndim\" keyword-only argument, if\n-not provided then one-dimensional is assumed).\n+We do this with a memoryview. There is :ref:`a page in the Cython documentation\n+<memoryviews>` dedicated to it.\n \n-More information on this syntax [:enhancements/buffer:can be found here].\n+In short, memoryviews are C structures that can hold a pointer to the data\n+of a NumPy array. They also support slices, so they work even if",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175909621",
            "id": 175909621,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkwOTYyMQ==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 110,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105520540,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175909621",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175911832"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175911832"
                }
            },
            "author_association": "MEMBER",
            "body": "I would add a quick reminder here what \"h\" and \"h_np\" were, e.g. \"we can use the view 'h' for efficient indexing and at the end return the real NumPy array 'h_np' that holds the data that we operated on.\"",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:29:26Z",
            "diff_hunk": "@@ -187,62 +189,95 @@ compatibility. Here's :file:`convolve_typed.pyx`. *Read the comments!*\n .. literalinclude:: ../../examples/userguide/convolve_typed.pyx\n     :linenos:\n \n-At this point, have a look at the generated C code for :file:`convolve1.pyx` and\n-:file:`convolve2.pyx`. Click on the lines to expand them and see corresponding C.\n-(Note that this code annotation is currently experimental and especially\n-\"trailing\" cleanup code for a block may stick to the last expression in the\n-block and make it look worse than it is -- use some common sense).\n+.. figure:: convolve_types_html.png\n \n-* .. literalinclude: convolve1.html\n-* .. literalinclude: convolve2.html\n+At this point, have a look at the generated C code for :file:`convolve_cy.pyx` and\n+:file:`convolve_typed.pyx`. Click on the lines to expand them and see corresponding C.\n \n-Especially have a look at the for loops: In :file:`convolve1.c`, these are ~20 lines\n-of C code to set up while in :file:`convolve2.c` a normal C for loop is used.\n+Especially have a look at the for loops: In :file:`convolve_cy.c`, these are ~20 lines\n+of C code to set up while in :file:`convolve_typed.c` a normal C for loop is used.\n \n After building this and continuing my (very informal) benchmarks, I get:\n \n .. sourcecode:: ipython\n \n-    In [21]: import convolve2\n-    In [22]: %timeit -n2 -r3 convolve2.naive_convolve(f, g)\n-    2 loops, best of 3: 828 ms per loop\n+    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n+    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n+    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n+    In [22]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n+    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n \n-Efficient indexing\n-====================\n+So in the end, adding types make the Cython code slower?\n+\n+What happend is that most of the time spend in this code is spent on line\n+60. ::\n+\n+    value += g[smid - s, tmid - t] * f[v, w]\n+\n+So what made this line so much slower than in the pure Python version?\n+\n+``g`` and ``f`` are still NumPy arrays, so Python objects, and expect\n+Python integers as indexes. Here we give C integers. So every time\n+Cython reaches this line, it has to convert all the C integers to Python\n+integers. Since this line is called very often, it outweight the speed\n+benefits of the pure C loops that were created from the ``range()`` earlier.\n+\n+Furthermore, ``g[smid - s, tmid - t] * f[v, w]`` returns a Python integer\n+and ``value`` is a C integers, Cython has to do a type conversion again.\n+In the end those types conversions add up. And made our convolution really\n+slow. But this can be solved easily by using memoryviews.\n+\n+Efficient indexing with memoryviews\n+===================================\n \n-There's still a bottleneck killing performance, and that is the array lookups\n-and assignments. The ``[]``-operator still uses full Python operations --\n+There are still two bottleneck killing performance, and that is the array lookups\n+and assignments, as well as C/Python types conversion.\n+The ``[]``-operator still uses full Python operations --\n what we would like to do instead is to access the data buffer directly at C\n speed.\n \n What we need to do then is to type the contents of the :obj:`ndarray` objects.\n-We do this with a special \"buffer\" syntax which must be told the datatype\n-(first argument) and number of dimensions (\"ndim\" keyword-only argument, if\n-not provided then one-dimensional is assumed).\n+We do this with a memoryview. There is :ref:`a page in the Cython documentation\n+<memoryviews>` dedicated to it.\n \n-More information on this syntax [:enhancements/buffer:can be found here].\n+In short, memoryviews are C structures that can hold a pointer to the data\n+of a NumPy array. They also support slices, so they work even if\n+the NumPy array isn't contiguous in memory.\n+They can be indexed by C integers, thus allowing fast access to the\n+NumPy array data.\n \n-Showing the changes needed to produce :file:`convolve3.pyx` only\n+No data is copied from the NumPy array to the memoryview in our example.\n+As the name implies, it is only a \"view\" of the memory. So we can use\n+``h`` for efficient indexing and return then ``h_np``",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175911832",
            "id": 175911832,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkxMTgzMg==",
            "original_commit_id": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "original_position": 118,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105523296,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175911832",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175913805"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175913805"
                }
            },
            "author_association": "MEMBER",
            "body": "You meant \"Fortran-contiguous\" here.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T20:36:38Z",
            "diff_hunk": "@@ -319,18 +326,20 @@ Declaring the NumPy arrays as contiguous\n \n For extra speed gains, if you know that the NumPy arrays you are\n providing are contiguous in memory, you can declare the\n-memoryview as holding data contiguous in memory.\n+memoryview as contiguous.\n \n We give an example on an array that has 3 dimensions.\n-If they are C-contiguous you have to declare the memoryview like this::\n+If you want to give Cython the information that the data is C-contiguous\n+you have to declare the memoryview like this::\n \n     cdef int [:,:,::1] a\n \n-if they are F-contiguous, you can declare the memoryview like this::\n+If you want to give Cython the information that the data is C-contiguous",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175913805",
            "id": 175913805,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkxMzgwNQ==",
            "original_commit_id": "5e03b2ed4a9ec322858095f1ace07c279f97d058",
            "original_position": 67,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105525824,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175913805",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175926119"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175926119"
                }
            },
            "author_association": "MEMBER",
            "body": "\"can only work\" or \"only works\".",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T21:19:24Z",
            "diff_hunk": "@@ -356,43 +340,83 @@ get by declaring the memoryviews as contiguous:\n \n .. sourcecode:: ipython\n \n-    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n-    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n-    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n-    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n-    In [21]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n-    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n-    In [22]: %timeit -n2 -r3 convolve_memview.naive_convolve(f, g)\n-    13.5 ms ± 455 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n-    In [23]: %timeit -n2 -r3 convolve_index.naive_convolve(f, g)\n-    7.57 ms ± 151 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n-    In [23]: %timeit -n2 -r3 convolve_contiguous.naive_convolve(f, g)\n+    In [23]: %timeit convolve_contiguous.naive_convolve(f, g)\n     7.2 ms ± 40.6 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n \n+We're now 541 times faster than the interpreted Python version.\n \n Making the function cleaner\n ===========================\n \n Declaring types can make your code quite verbose. If you don't mind\n Cython inferring the C types of your variables, you can use\n-the `infer_types=True` compiler directive. It will save you quite a bit\n-of typing.\n+the ``infer_types=True`` compiler directive at the top of the file.\n+It will save you quite a bit of typing.\n+\n+Note that since type declarations must happen at the top indentation level,\n+Cython won't infer the type of variable declared for the first time\n+in other indentation levels. It would change too much the meaning of\n+our code. This is why, we must still declare manually the type of the\n+``value`` variable.\n \n-# explain here why value must be typed\n+And actually, manually giving the type of the ``value`` variable will\n+be useful when using fused types.\n \n .. literalinclude:: ../../examples/userguide/convolve_infer_types.pyx\n     :linenos:\n \n-# explain here why it is faster.\n+We now do a speed test:\n+\n+.. sourcecode:: ipython\n+\n+    In [24]: %timeit convolve_infer_types.naive_convolve(f, g)\n+    5.33 ms ± 72.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n+\n+We're now 731 times faster than the interpreted Python version.\n+\n+# Explain the black magic of why it's faster.\n \n More generic code\n ==================\n \n-# Explain here templated\n+All those speed gains are nice, but adding types constrains our code.\n+At the moment, it would mean that our function only work with",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175926119",
            "id": 175926119,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkyNjExOQ==",
            "original_commit_id": "fc37e45b2a0ec26df6e7da732fac32be0d9a63d5",
            "original_position": 121,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105540650,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175926119",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175927196"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175927196"
                }
            },
            "author_association": "MEMBER",
            "body": "\"By comparing types in if-conditions, it is also possible to execute entirely different code paths depending on the specific data type.\"",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T21:23:16Z",
            "diff_hunk": "@@ -356,43 +340,83 @@ get by declaring the memoryviews as contiguous:\n \n .. sourcecode:: ipython\n \n-    In [19]: %timeit -n2 -r3 convolve_py.naive_convolve(f, g)\n-    3.9 s ± 12.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n-    In [20]: %timeit -n2 -r3 convolve_cy.naive_convolve(f, g)\n-    3.12 s ± 15.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n-    In [21]: %timeit -n2 -r3 convolve_typed.naive_convolve(f, g)\n-    13.8 s ± 122 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n-    In [22]: %timeit -n2 -r3 convolve_memview.naive_convolve(f, g)\n-    13.5 ms ± 455 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n-    In [23]: %timeit -n2 -r3 convolve_index.naive_convolve(f, g)\n-    7.57 ms ± 151 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n-    In [23]: %timeit -n2 -r3 convolve_contiguous.naive_convolve(f, g)\n+    In [23]: %timeit convolve_contiguous.naive_convolve(f, g)\n     7.2 ms ± 40.6 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n \n+We're now 541 times faster than the interpreted Python version.\n \n Making the function cleaner\n ===========================\n \n Declaring types can make your code quite verbose. If you don't mind\n Cython inferring the C types of your variables, you can use\n-the `infer_types=True` compiler directive. It will save you quite a bit\n-of typing.\n+the ``infer_types=True`` compiler directive at the top of the file.\n+It will save you quite a bit of typing.\n+\n+Note that since type declarations must happen at the top indentation level,\n+Cython won't infer the type of variable declared for the first time\n+in other indentation levels. It would change too much the meaning of\n+our code. This is why, we must still declare manually the type of the\n+``value`` variable.\n \n-# explain here why value must be typed\n+And actually, manually giving the type of the ``value`` variable will\n+be useful when using fused types.\n \n .. literalinclude:: ../../examples/userguide/convolve_infer_types.pyx\n     :linenos:\n \n-# explain here why it is faster.\n+We now do a speed test:\n+\n+.. sourcecode:: ipython\n+\n+    In [24]: %timeit convolve_infer_types.naive_convolve(f, g)\n+    5.33 ms ± 72.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n+\n+We're now 731 times faster than the interpreted Python version.\n+\n+# Explain the black magic of why it's faster.\n \n More generic code\n ==================\n \n-# Explain here templated\n+All those speed gains are nice, but adding types constrains our code.\n+At the moment, it would mean that our function only work with\n+NumPy arrays with the ``np.intc`` type. Is it possible to make our\n+code work for multiple NumPy data types?\n+\n+Yes, with the help of a new feature called fused types.\n+You can learn more about it at :ref:`this section of the documentation\n+<fusedtypes>`.\n+It is similar to C++ 's templates. It generates mutiple function declarations\n+at compile time, and then chooses the right one at run-time based on the\n+types of the arguments provided. It is also possible to check with\n+``if-else`` statements what is the value of the fused type.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175927196",
            "id": 175927196,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkyNzE5Ng==",
            "original_commit_id": "fc37e45b2a0ec26df6e7da732fac32be0d9a63d5",
            "original_position": 131,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105541881,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175927196",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175928406"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175928406"
                }
            },
            "author_association": "MEMBER",
            "body": "Cython _has_ support for different `complex` types, so I'm not sure if this doesn't work out of the box.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T21:27:43Z",
            "diff_hunk": "@@ -472,21 +367,16 @@ here has gone through a lot of thinking and planning already; still they may\n or may not happen depending on available developer time and resources for\n Cython.\n \n-1. Support for efficient access to structs/records stored in arrays; currently\n-   only primitive types are allowed.\n-2. Support for efficient access to complex floating point types in arrays. The\n+1. Support for efficient access to complex floating point types in arrays. The\n    main obstacle here is getting support for efficient complex datatypes in\n    Cython.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175928406",
            "id": 175928406,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkyODQwNg==",
            "original_commit_id": "adc1aa70f1548eee6711e428c25f5172936c37bf",
            "original_position": 219,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105543289,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175928406",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175929407"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175929407"
                }
            },
            "author_association": "MEMBER",
            "body": "Cython maps some of the operations to C calls in `numpy/__init__.pxd` (a.k.a. `cimport numpy`). That's not what this comment refers to, but it's not like there's nothing there at this front...\r\nI'd remove that comment, also because it's fairly unclear and unhelpful overall.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T21:31:20Z",
            "diff_hunk": "@@ -472,21 +367,16 @@ here has gone through a lot of thinking and planning already; still they may\n or may not happen depending on available developer time and resources for\n Cython.\n \n-1. Support for efficient access to structs/records stored in arrays; currently\n-   only primitive types are allowed.\n-2. Support for efficient access to complex floating point types in arrays. The\n+1. Support for efficient access to complex floating point types in arrays. The\n    main obstacle here is getting support for efficient complex datatypes in\n    Cython.\n-3. Calling NumPy/SciPy functions currently has a Python call overhead; it\n+2. Calling NumPy/SciPy functions currently has a Python call overhead; it\n    would be possible to take a short-cut from Cython directly to C. (This does\n    however require some isolated and incremental changes to those libraries;\n    mail the Cython mailing list for details).",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175929407",
            "id": 175929407,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkyOTQwNw==",
            "original_commit_id": "adc1aa70f1548eee6711e428c25f5172936c37bf",
            "original_position": 224,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105544366,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175929407",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175930090"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175930090"
                }
            },
            "author_association": "MEMBER",
            "body": "One more thing to hint at here is the Pythran support. The drawback is that it really only currently works with the buffer syntax and not yet with memory views. So now, after changing all of this tutorial to memoryviews (which is great!), it doesn't really line up anymore.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T21:33:58Z",
            "diff_hunk": "@@ -462,7 +355,9 @@ compile-time if the type is set to :obj:`np.ndarray`, specifically it is\n assumed that the data is stored in pure strided mode and not in indirect\n mode).\n \n-[:enhancements/buffer:More information]\n+Where to go from here?\n+======================",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175930090",
            "id": 175930090,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkzMDA5MA==",
            "original_commit_id": "adc1aa70f1548eee6711e428c25f5172936c37bf",
            "original_position": 205,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105545133,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175930090",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r175930323"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/175930323"
                }
            },
            "author_association": "MEMBER",
            "body": "Since there's almost nothing left in this \"future\" section, I'd vote for deleting it.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-20T21:34:55Z",
            "diff_hunk": "@@ -472,21 +367,16 @@ here has gone through a lot of thinking and planning already; still they may\n or may not happen depending on available developer time and resources for\n Cython.\n \n-1. Support for efficient access to structs/records stored in arrays; currently\n-   only primitive types are allowed.\n-2. Support for efficient access to complex floating point types in arrays. The\n+1. Support for efficient access to complex floating point types in arrays. The\n    main obstacle here is getting support for efficient complex datatypes in\n    Cython.\n-3. Calling NumPy/SciPy functions currently has a Python call overhead; it\n+2. Calling NumPy/SciPy functions currently has a Python call overhead; it\n    would be possible to take a short-cut from Cython directly to C. (This does\n    however require some isolated and incremental changes to those libraries;\n    mail the Cython mailing list for details).\n-4. Efficient code that is generic with respect to the number of dimensions.\n+3. Efficient code that is generic with respect to the number of dimensions.\n    This can probably be done today by calling the NumPy C multi-dimensional\n    iterator API directly; however it would be nice to have for-loops over\n    :func:`enumerate` and :func:`ndenumerate` on NumPy arrays create efficient\n    code.\n-5. A high-level construct for writing type-generic code, so that one can write\n-   functions that work simultaneously with many datatypes. Note however that a\n-   macro preprocessor language can help with doing this for now.\n ",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r175930323",
            "id": 175930323,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTkzMDMyMw==",
            "original_commit_id": "adc1aa70f1548eee6711e428c25f5172936c37bf",
            "original_position": 234,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105545419,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/175930323",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r176238810"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/176238810"
                }
            },
            "author_association": "NONE",
            "body": "I was thinking more about importing in a notebook a cython module created by a `setup.py`. I see now my wording can be confusing.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-21T21:08:39Z",
            "diff_hunk": "@@ -70,31 +64,36 @@ However there are several options to automate these steps:\n \n 1. The `SAGE <http://sagemath.org>`_ mathematics software system provides\n    excellent support for using Cython and NumPy from an interactive command\n-   line (like IPython) or through a notebook interface (like\n+   line or through a notebook interface (like\n    Maple/Mathematica). See `this documentation\n-   <http://www.sagemath.org/doc/prog/node40.html>`_.\n-2. A version of `pyximport <http://www.prescod.net/pyximport/>`_ is shipped\n-   with Cython, so that you can import pyx-files dynamically into Python and\n+   <http://doc.sagemath.org/html/en/developer/coding_in_cython.html>`_.\n+2. Cython can be used as an extension within a Jupyter notebook,\n+   making it easy to compile and use Cython code with just a ``%%cython``\n+   at the top of a cell. For more information see\n+   :ref:`Using the Jupyter Notebook <jupyter-notebook>`.\n+3. A version of pyximport is shipped with Cython,\n+   so that you can import pyx-files dynamically into Python and\n    have them compiled automatically (See :ref:`pyximport`).\n-3. Cython supports distutils so that you can very easily create build scripts\n+4. Cython supports distutils so that you can very easily create build scripts\n    which automate the process, this is the preferred method for full programs.\n-4. Manual compilation (see below)\n+   See :ref:`Compiling with distutils <compiling-distutils>`.\n+5. Manual compilation (see below)\n \n .. Note::\n     If using another interactive command line environment than SAGE, like\n-    IPython or Python itself, it is important that you restart the process\n+    IPython, Jupyter Notebook or Python itself, it is important that you restart the process",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r176238810",
            "id": 176238810,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjIzODgxMA==",
            "original_commit_id": "5e03b2ed4a9ec322858095f1ace07c279f97d058",
            "original_position": 91,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105908270,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/176238810",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r176239929"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/176239929"
                }
            },
            "author_association": "NONE",
            "body": "Does the user have to do this for memoryviews too? I just now that it's the case when using the old numpy buffer syntax.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-21T21:12:37Z",
            "diff_hunk": "@@ -125,10 +124,6 @@ like::\n \n     $ gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -fno-strict-aliasing -I/usr/include/python2.7 -o yourmod.so yourmod.c\n \n-``gcc`` should have access to the NumPy C header files so if they are not\n-installed at :file:`/usr/include/numpy` or similar you may need to pass another\n-option for those.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r176239929",
            "id": 176239929,
            "in_reply_to_id": 175904569,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjIzOTkyOQ==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 115,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105909572,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/176239929",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r176240747"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/176240747"
                }
            },
            "author_association": "MEMBER",
            "body": "Ah, true. The include path is only required when you do `cimport numpy`. Meaning, it's also independent of the buffer syntax and only depends on the `numpy` cimport (plain Python imports are also fine).",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-21T21:15:44Z",
            "diff_hunk": "@@ -125,10 +124,6 @@ like::\n \n     $ gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -fno-strict-aliasing -I/usr/include/python2.7 -o yourmod.so yourmod.c\n \n-``gcc`` should have access to the NumPy C header files so if they are not\n-installed at :file:`/usr/include/numpy` or similar you may need to pass another\n-option for those.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r176240747",
            "id": 176240747,
            "in_reply_to_id": 175904569,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjI0MDc0Nw==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 115,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105910542,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:41:31Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/176240747",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2162#discussion_r176263587"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2162"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/176263587"
                }
            },
            "author_association": "NONE",
            "body": "I added the note about the numpy headers and added another line just after that it's needed only if doing `cimport numpy`.",
            "commit_id": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "created_at": "2018-03-21T22:48:05Z",
            "diff_hunk": "@@ -125,10 +124,6 @@ like::\n \n     $ gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -fno-strict-aliasing -I/usr/include/python2.7 -o yourmod.so yourmod.c\n \n-``gcc`` should have access to the NumPy C header files so if they are not\n-installed at :file:`/usr/include/numpy` or similar you may need to pass another\n-option for those.",
            "html_url": "https://github.com/cython/cython/pull/2162#discussion_r176263587",
            "id": 176263587,
            "in_reply_to_id": 175904569,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjI2MzU4Nw==",
            "original_commit_id": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "original_position": 115,
            "path": "docs/src/userguide/numpy_tutorial.rst",
            "position": null,
            "pull_request_review_id": 105936139,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2162",
            "updated_at": "2018-03-21T22:48:05Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/176263587",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2162/comments",
    "commit_data": [
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a/comments",
            "commit": {
                "author": {
                    "date": "2018-03-18T15:11:52Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-18T15:11:52Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Added the examples of the numpy tutorial.",
                "tree": {
                    "sha": "8ab744c2f72ae3ad623684223b296603d800e0f5",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/8ab744c2f72ae3ad623684223b296603d800e0f5"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjkzYzUxZDZlZDRkNGJhZWNkMzk5NmJmYjBjZTQ0YmIyNzdiYmQwNmE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/d902b7cf24eba5bc5be9e8001d639abd912adf6d",
                    "sha": "d902b7cf24eba5bc5be9e8001d639abd912adf6d",
                    "url": "https://api.github.com/repos/cython/cython/commits/d902b7cf24eba5bc5be9e8001d639abd912adf6d"
                }
            ],
            "sha": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
            "url": "https://api.github.com/repos/cython/cython/commits/93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/adc1aa70f1548eee6711e428c25f5172936c37bf/comments",
            "commit": {
                "author": {
                    "date": "2018-03-18T19:17:27Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-18T19:17:27Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Inserted the files in the tutorial.",
                "tree": {
                    "sha": "87274770bd63e9279fd7c50d6c8248ee8314ad3f",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/87274770bd63e9279fd7c50d6c8248ee8314ad3f"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/adc1aa70f1548eee6711e428c25f5172936c37bf",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/adc1aa70f1548eee6711e428c25f5172936c37bf",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OmFkYzFhYTcwZjE1NDhlZWU2NzExZTQyOGMyNWY1MTcyOTM2YzM3YmY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
                    "sha": "93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a",
                    "url": "https://api.github.com/repos/cython/cython/commits/93c51d6ed4d4baecd3996bfb0ce44bb277bbd06a"
                }
            ],
            "sha": "adc1aa70f1548eee6711e428c25f5172936c37bf",
            "url": "https://api.github.com/repos/cython/cython/commits/adc1aa70f1548eee6711e428c25f5172936c37bf"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/e2941f2b04a2eb14e6735b704eeb6e2922c45e9f/comments",
            "commit": {
                "author": {
                    "date": "2018-03-18T19:48:00Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-18T19:48:00Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Finished 'the first cython program'.",
                "tree": {
                    "sha": "cd92ac923e135cc1ac8328c24f457dccc619d232",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/cd92ac923e135cc1ac8328c24f457dccc619d232"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/e2941f2b04a2eb14e6735b704eeb6e2922c45e9f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/e2941f2b04a2eb14e6735b704eeb6e2922c45e9f",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OmUyOTQxZjJiMDRhMmViMTRlNjczNWI3MDRlZWI2ZTI5MjJjNDVlOWY=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/adc1aa70f1548eee6711e428c25f5172936c37bf",
                    "sha": "adc1aa70f1548eee6711e428c25f5172936c37bf",
                    "url": "https://api.github.com/repos/cython/cython/commits/adc1aa70f1548eee6711e428c25f5172936c37bf"
                }
            ],
            "sha": "e2941f2b04a2eb14e6735b704eeb6e2922c45e9f",
            "url": "https://api.github.com/repos/cython/cython/commits/e2941f2b04a2eb14e6735b704eeb6e2922c45e9f"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/c00d9ed682ef85f4e78f235c38703aae20843161/comments",
            "commit": {
                "author": {
                    "date": "2018-03-18T20:15:03Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-18T20:15:03Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Small change.",
                "tree": {
                    "sha": "4ec6cb45cb133a8ba54ffe60a079b0ab1b4b2d2a",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/4ec6cb45cb133a8ba54ffe60a079b0ab1b4b2d2a"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/c00d9ed682ef85f4e78f235c38703aae20843161",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/c00d9ed682ef85f4e78f235c38703aae20843161",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OmMwMGQ5ZWQ2ODJlZjg1ZjRlNzhmMjM1YzM4NzAzYWFlMjA4NDMxNjE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/e2941f2b04a2eb14e6735b704eeb6e2922c45e9f",
                    "sha": "e2941f2b04a2eb14e6735b704eeb6e2922c45e9f",
                    "url": "https://api.github.com/repos/cython/cython/commits/e2941f2b04a2eb14e6735b704eeb6e2922c45e9f"
                }
            ],
            "sha": "c00d9ed682ef85f4e78f235c38703aae20843161",
            "url": "https://api.github.com/repos/cython/cython/commits/c00d9ed682ef85f4e78f235c38703aae20843161"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/1d86d5fe033d3eab38d6152a11bfb88f69167451/comments",
            "commit": {
                "author": {
                    "date": "2018-03-18T22:58:54Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-18T22:58:54Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Quite some progress with this tutorial. Only two parts missing.",
                "tree": {
                    "sha": "f551580b4e64e0f8e5b97b611dd5d9133e742ace",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/f551580b4e64e0f8e5b97b611dd5d9133e742ace"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/1d86d5fe033d3eab38d6152a11bfb88f69167451",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjFkODZkNWZlMDMzZDNlYWIzOGQ2MTUyYTExYmZiODhmNjkxNjc0NTE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/c00d9ed682ef85f4e78f235c38703aae20843161",
                    "sha": "c00d9ed682ef85f4e78f235c38703aae20843161",
                    "url": "https://api.github.com/repos/cython/cython/commits/c00d9ed682ef85f4e78f235c38703aae20843161"
                }
            ],
            "sha": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
            "url": "https://api.github.com/repos/cython/cython/commits/1d86d5fe033d3eab38d6152a11bfb88f69167451"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/fc37e45b2a0ec26df6e7da732fac32be0d9a63d5/comments",
            "commit": {
                "author": {
                    "date": "2018-03-18T23:37:47Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-18T23:37:47Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Finished v1.",
                "tree": {
                    "sha": "c48889099c40c6580eefb447e344b231ffd47622",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/c48889099c40c6580eefb447e344b231ffd47622"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/fc37e45b2a0ec26df6e7da732fac32be0d9a63d5",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/fc37e45b2a0ec26df6e7da732fac32be0d9a63d5",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OmZjMzdlNDViMmEwZWMyNmRmNmU3ZGE3MzJmYWMzMmJlMGQ5YTYzZDU=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/1d86d5fe033d3eab38d6152a11bfb88f69167451",
                    "sha": "1d86d5fe033d3eab38d6152a11bfb88f69167451",
                    "url": "https://api.github.com/repos/cython/cython/commits/1d86d5fe033d3eab38d6152a11bfb88f69167451"
                }
            ],
            "sha": "fc37e45b2a0ec26df6e7da732fac32be0d9a63d5",
            "url": "https://api.github.com/repos/cython/cython/commits/fc37e45b2a0ec26df6e7da732fac32be0d9a63d5"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/5e03b2ed4a9ec322858095f1ace07c279f97d058/comments",
            "commit": {
                "author": {
                    "date": "2018-03-19T19:22:31Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-19T19:22:31Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Some rewording.",
                "tree": {
                    "sha": "36f11e768b105a6854e98f099bce0561274b8284",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/36f11e768b105a6854e98f099bce0561274b8284"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/5e03b2ed4a9ec322858095f1ace07c279f97d058",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/5e03b2ed4a9ec322858095f1ace07c279f97d058",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjVlMDNiMmVkNGE5ZWMzMjI4NTgwOTVmMWFjZTA3YzI3OWY5N2QwNTg=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/fc37e45b2a0ec26df6e7da732fac32be0d9a63d5",
                    "sha": "fc37e45b2a0ec26df6e7da732fac32be0d9a63d5",
                    "url": "https://api.github.com/repos/cython/cython/commits/fc37e45b2a0ec26df6e7da732fac32be0d9a63d5"
                }
            ],
            "sha": "5e03b2ed4a9ec322858095f1ace07c279f97d058",
            "url": "https://api.github.com/repos/cython/cython/commits/5e03b2ed4a9ec322858095f1ace07c279f97d058"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/a171e51a9388cf65a745a3d9ead7fbcb040c37ba/comments",
            "commit": {
                "author": {
                    "date": "2018-03-21T22:40:40Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-03-21T22:40:40Z",
                    "email": "gabrieldemarmiesse@google.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Changed according to the code review.",
                "tree": {
                    "sha": "daa995f474151f113bd08f53cb5f034d10c8592e",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/daa995f474151f113bd08f53cb5f034d10c8592e"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OmExNzFlNTFhOTM4OGNmNjVhNzQ1YTNkOWVhZDdmYmNiMDQwYzM3YmE=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/5e03b2ed4a9ec322858095f1ace07c279f97d058",
                    "sha": "5e03b2ed4a9ec322858095f1ace07c279f97d058",
                    "url": "https://api.github.com/repos/cython/cython/commits/5e03b2ed4a9ec322858095f1ace07c279f97d058"
                }
            ],
            "sha": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
            "url": "https://api.github.com/repos/cython/cython/commits/a171e51a9388cf65a745a3d9ead7fbcb040c37ba"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/2162/commits",
    "created_at": "2018-03-18T23:36:48Z",
    "diff_url": "https://github.com/cython/cython/pull/2162.diff",
    "head": {
        "label": "gabrieldemarmiesse:cython_numpy_users",
        "ref": "cython_numpy_users",
        "repo": {
            "archive_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/branches{/branch}",
            "clone_url": "https://github.com/gabrieldemarmiesse/cython.git",
            "collaborators_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contributors",
            "created_at": "2018-03-11T10:14:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/downloads",
            "events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/forks",
            "full_name": "gabrieldemarmiesse/cython",
            "git_commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/tags{/sha}",
            "git_url": "git://github.com/gabrieldemarmiesse/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/hooks",
            "html_url": "https://github.com/gabrieldemarmiesse/cython",
            "id": 124744628,
            "issue_comment_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/merges",
            "milestones_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjQ3NDQ2Mjg=",
            "notifications_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/pulls{/number}",
            "pushed_at": "2018-06-05T11:12:34Z",
            "releases_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/releases{/id}",
            "size": 50659,
            "ssh_url": "git@github.com:gabrieldemarmiesse/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscription",
            "svn_url": "https://github.com/gabrieldemarmiesse/cython",
            "tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/tags",
            "teams_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/teams",
            "trees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/trees{/sha}",
            "updated_at": "2018-05-28T12:43:28Z",
            "url": "https://api.github.com/repos/gabrieldemarmiesse/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
        "user": {
            "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
            "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
            "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
            "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
            "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gabrieldemarmiesse",
            "id": 12891691,
            "login": "gabrieldemarmiesse",
            "node_id": "MDQ6VXNlcjEyODkxNjkx",
            "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
            "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
            "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gabrieldemarmiesse"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/2162",
    "id": 175780647,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/2162",
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425561345,
            "name": "Documentation",
            "node_id": "MDU6TGFiZWw0MjU1NjEzNDU=",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "locked": false,
    "merge_commit_sha": "3c2dd5a8db6d78f109448fd0d7998412c39e25b2",
    "merged_at": "2018-03-23T06:36:03Z",
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc1NzgwNjQ3",
    "number": 2162,
    "patch_url": "https://github.com/cython/cython/pull/2162.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/2162/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/a171e51a9388cf65a745a3d9ead7fbcb040c37ba",
    "title": "Cython numpy users",
    "updated_at": "2018-05-10T17:06:44Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/2162",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
        "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
        "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
        "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gabrieldemarmiesse",
        "id": 12891691,
        "login": "gabrieldemarmiesse",
        "node_id": "MDQ6VXNlcjEyODkxNjkx",
        "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
        "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
        "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gabrieldemarmiesse"
    }
}