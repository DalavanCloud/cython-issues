{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/cython/cython/issues/2287/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2287/commits"
        },
        "html": {
            "href": "https://github.com/cython/cython/pull/2287"
        },
        "issue": {
            "href": "https://api.github.com/repos/cython/cython/issues/2287"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/cython/cython/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2287/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/cython/cython/pulls/2287"
        },
        "statuses": {
            "href": "https://api.github.com/repos/cython/cython/statuses/edf2fd7cec2277c7fddea462be6374800dae3714"
        }
    },
    "assignee": null,
    "assignees": [],
    "author_association": "FIRST_TIME_CONTRIBUTOR",
    "base": {
        "label": "cython:master",
        "ref": "master",
        "repo": {
            "archive_url": "https://api.github.com/repos/cython/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/cython/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/cython/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/cython/cython/branches{/branch}",
            "clone_url": "https://github.com/cython/cython.git",
            "collaborators_url": "https://api.github.com/repos/cython/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/cython/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/cython/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/cython/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/cython/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/cython/cython/contributors",
            "created_at": "2010-11-21T07:44:20Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/cython/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/cython/cython/downloads",
            "events_url": "https://api.github.com/repos/cython/cython/events",
            "fork": false,
            "forks": 680,
            "forks_count": 680,
            "forks_url": "https://api.github.com/repos/cython/cython/forks",
            "full_name": "cython/cython",
            "git_commits_url": "https://api.github.com/repos/cython/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/cython/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/cython/cython/git/tags{/sha}",
            "git_url": "git://github.com/cython/cython.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/cython/cython/hooks",
            "html_url": "https://github.com/cython/cython",
            "id": 1099265,
            "issue_comment_url": "https://api.github.com/repos/cython/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/cython/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/cython/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/cython/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/cython/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/cython/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/cython/cython/merges",
            "milestones_url": "https://api.github.com/repos/cython/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMDk5MjY1",
            "notifications_url": "https://api.github.com/repos/cython/cython/notifications{?since,all,participating}",
            "open_issues": 523,
            "open_issues_count": 523,
            "owner": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
                "events_url": "https://api.github.com/users/cython/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython/followers",
                "following_url": "https://api.github.com/users/cython/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython",
                "id": 486082,
                "login": "cython",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
                "organizations_url": "https://api.github.com/users/cython/orgs",
                "received_events_url": "https://api.github.com/users/cython/received_events",
                "repos_url": "https://api.github.com/users/cython/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/cython"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/cython/cython/pulls{/number}",
            "pushed_at": "2018-06-08T19:51:12Z",
            "releases_url": "https://api.github.com/repos/cython/cython/releases{/id}",
            "size": 50849,
            "ssh_url": "git@github.com:cython/cython.git",
            "stargazers_count": 3175,
            "stargazers_url": "https://api.github.com/repos/cython/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/cython/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/cython/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/cython/cython/subscription",
            "svn_url": "https://github.com/cython/cython",
            "tags_url": "https://api.github.com/repos/cython/cython/tags",
            "teams_url": "https://api.github.com/repos/cython/cython/teams",
            "trees_url": "https://api.github.com/repos/cython/cython/git/trees{/sha}",
            "updated_at": "2018-06-08T21:26:35Z",
            "url": "https://api.github.com/repos/cython/cython",
            "watchers": 3175,
            "watchers_count": 3175
        },
        "sha": "2f3ee7ad0465ff3b24c5ec768c362bcccb89f343",
        "user": {
            "avatar_url": "https://avatars3.githubusercontent.com/u/486082?v=4",
            "events_url": "https://api.github.com/users/cython/events{/privacy}",
            "followers_url": "https://api.github.com/users/cython/followers",
            "following_url": "https://api.github.com/users/cython/following{/other_user}",
            "gists_url": "https://api.github.com/users/cython/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/cython",
            "id": 486082,
            "login": "cython",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ4NjA4Mg==",
            "organizations_url": "https://api.github.com/users/cython/orgs",
            "received_events_url": "https://api.github.com/users/cython/received_events",
            "repos_url": "https://api.github.com/users/cython/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/cython/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cython/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/cython"
        }
    },
    "body": "There might be other possible arguments. I didn't look much. I'm going to do another  PR later with the arguments covered in ``**options``.",
    "closed_at": "2018-05-20T20:12:46Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189465665"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189465665"
                }
            },
            "author_association": "MEMBER",
            "body": "It's even cooler than that! :)\r\nYou can also pass `Extension` objects that have `glob` patterns as their `sources`. Then, `cythonize` will resolve the pattern and create a copy of the  `Extension` for every matching file.",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T17:46:20Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189465665",
            "id": 189465665,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2NTY2NQ==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 26,
            "path": "docs/src/reference/compilation.rst",
            "position": 26,
            "pull_request_review_id": 121650358,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189465665",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189465698"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189465698"
                }
            },
            "author_association": "MEMBER",
            "body": "sat -> say",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T17:47:44Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.\n+\n+    :param exclude: When passing glob patterns as ``module_list``, you can exclude certain\n+                    module names explicitly by passing them into the ``exclude`` option.\n+\n+    :param nthreads: The number of concurrent builds for parallel compilation\n+                     (requires the Python module multiprocessing).\n+\n+    :param aliases: If you want to use compiler directives like ``# distutils: ...`` but\n+                    can only know at compile time (when running the ``setup.py``) which values\n+                    to use, you can use aliases and pass a dictionary mapping those aliases\n+                    to Python strings when calling :func:`cythonize`. As an example, sat you",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189465698",
            "id": 189465698,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2NTY5OA==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 37,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 121650358,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189465698",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189465717"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189465717"
                }
            },
            "author_association": "MEMBER",
            "body": "requires the \\`\\`multiprocessing\\`\\` module.",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T17:48:34Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.\n+\n+    :param exclude: When passing glob patterns as ``module_list``, you can exclude certain\n+                    module names explicitly by passing them into the ``exclude`` option.\n+\n+    :param nthreads: The number of concurrent builds for parallel compilation\n+                     (requires the Python module multiprocessing).",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189465717",
            "id": 189465717,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2NTcxNw==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 32,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 121650358,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189465717",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189465799"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189465799"
                }
            },
            "author_association": "MEMBER",
            "body": "The last sentence seems redundant. They'll see the message when they disobey the recommendation.",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T17:51:33Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.\n+\n+    :param exclude: When passing glob patterns as ``module_list``, you can exclude certain\n+                    module names explicitly by passing them into the ``exclude`` option.\n+\n+    :param nthreads: The number of concurrent builds for parallel compilation\n+                     (requires the Python module multiprocessing).\n+\n+    :param aliases: If you want to use compiler directives like ``# distutils: ...`` but\n+                    can only know at compile time (when running the ``setup.py``) which values\n+                    to use, you can use aliases and pass a dictionary mapping those aliases\n+                    to Python strings when calling :func:`cythonize`. As an example, sat you\n+                    want to use the compiler\n+                    directive ``# distutils: include_dirs = ../static_libs/include/``\n+                    but this path isn't always fixed and you want to find it when running\n+                    the ``setup.py``. You can then do ``# distutils: include_dirs = MY_HEADERS``,\n+                    find the value of ``MY_HEADERS`` in the ``setup.py``, put it in a python\n+                    variable called ``foo`` as a string, and then call\n+                    ``cythonize(..., aliases={'MY_HEADERS': foo})``.\n+\n+    :param quiet: If True, Cython won't print error and warning messages during the compilation.\n+\n+    :param force: Forces the recompilation of the Cython modules, even if the timestamps\n+                  don't indicate that a recompilation is necessary.\n+\n+    :param language: To globally enable C++ mode, you can pass ``language='c++'``. Otherwise, this\n+                     will be determined at a per-file level based on compiler directives.  This\n+                     affects only modules found based on file names.  Extension instances passed\n+                     into :func:`cythonize` will not be changed. It is recommended to rather\n+                     use the compiler directive ``# distutils: language = c++`` than this option.\n+                     If you don't, Cython will print a message telling you to use the\n+                     compiler directives.",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189465799",
            "id": 189465799,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2NTc5OQ==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 57,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 121650358,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189465799",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189465820"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189465820"
                }
            },
            "author_association": "MEMBER",
            "body": "\".pxd files\" -> \".pyx or .py files\"",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T17:52:49Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.\n+\n+    :param exclude: When passing glob patterns as ``module_list``, you can exclude certain\n+                    module names explicitly by passing them into the ``exclude`` option.\n+\n+    :param nthreads: The number of concurrent builds for parallel compilation\n+                     (requires the Python module multiprocessing).\n+\n+    :param aliases: If you want to use compiler directives like ``# distutils: ...`` but\n+                    can only know at compile time (when running the ``setup.py``) which values\n+                    to use, you can use aliases and pass a dictionary mapping those aliases\n+                    to Python strings when calling :func:`cythonize`. As an example, sat you\n+                    want to use the compiler\n+                    directive ``# distutils: include_dirs = ../static_libs/include/``\n+                    but this path isn't always fixed and you want to find it when running\n+                    the ``setup.py``. You can then do ``# distutils: include_dirs = MY_HEADERS``,\n+                    find the value of ``MY_HEADERS`` in the ``setup.py``, put it in a python\n+                    variable called ``foo`` as a string, and then call\n+                    ``cythonize(..., aliases={'MY_HEADERS': foo})``.\n+\n+    :param quiet: If True, Cython won't print error and warning messages during the compilation.\n+\n+    :param force: Forces the recompilation of the Cython modules, even if the timestamps\n+                  don't indicate that a recompilation is necessary.\n+\n+    :param language: To globally enable C++ mode, you can pass ``language='c++'``. Otherwise, this\n+                     will be determined at a per-file level based on compiler directives.  This\n+                     affects only modules found based on file names.  Extension instances passed\n+                     into :func:`cythonize` will not be changed. It is recommended to rather\n+                     use the compiler directive ``# distutils: language = c++`` than this option.\n+                     If you don't, Cython will print a message telling you to use the\n+                     compiler directives.\n+\n+    :param exclude_failures: For a broad 'try to compile' mode that ignores compilation\n+                             failures and simply excludes the failed extensions,\n+                             pass ``exclude_failures=True``. Note that this only\n+                             really makes sense for compiling ``.py`` files which can also\n+                             be used without compilation.\n+\n+    :param annotate: If ``True``, will produce a HTML file for each of the ``.pxd`` files compiled.",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189465820",
            "id": 189465820,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2NTgyMA==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 65,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 121650358,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189465820",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189465845"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189465845"
                }
            },
            "author_association": "MEMBER",
            "body": "Nice!",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T17:53:42Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.\n+\n+    :param exclude: When passing glob patterns as ``module_list``, you can exclude certain\n+                    module names explicitly by passing them into the ``exclude`` option.\n+\n+    :param nthreads: The number of concurrent builds for parallel compilation\n+                     (requires the Python module multiprocessing).\n+\n+    :param aliases: If you want to use compiler directives like ``# distutils: ...`` but\n+                    can only know at compile time (when running the ``setup.py``) which values\n+                    to use, you can use aliases and pass a dictionary mapping those aliases\n+                    to Python strings when calling :func:`cythonize`. As an example, sat you\n+                    want to use the compiler\n+                    directive ``# distutils: include_dirs = ../static_libs/include/``\n+                    but this path isn't always fixed and you want to find it when running\n+                    the ``setup.py``. You can then do ``# distutils: include_dirs = MY_HEADERS``,\n+                    find the value of ``MY_HEADERS`` in the ``setup.py``, put it in a python\n+                    variable called ``foo`` as a string, and then call\n+                    ``cythonize(..., aliases={'MY_HEADERS': foo})``.\n+\n+    :param quiet: If True, Cython won't print error and warning messages during the compilation.\n+\n+    :param force: Forces the recompilation of the Cython modules, even if the timestamps\n+                  don't indicate that a recompilation is necessary.\n+\n+    :param language: To globally enable C++ mode, you can pass ``language='c++'``. Otherwise, this\n+                     will be determined at a per-file level based on compiler directives.  This\n+                     affects only modules found based on file names.  Extension instances passed\n+                     into :func:`cythonize` will not be changed. It is recommended to rather\n+                     use the compiler directive ``# distutils: language = c++`` than this option.\n+                     If you don't, Cython will print a message telling you to use the\n+                     compiler directives.\n+\n+    :param exclude_failures: For a broad 'try to compile' mode that ignores compilation\n+                             failures and simply excludes the failed extensions,\n+                             pass ``exclude_failures=True``. Note that this only\n+                             really makes sense for compiling ``.py`` files which can also\n+                             be used without compilation.\n+\n+    :param annotate: If ``True``, will produce a HTML file for each of the ``.pxd`` files compiled.\n+                     This HTML file will show each line of Cython code with how much\n+                     Python interaction there is. It also allows you to see the C/C++ code\n+                     generated for each line of Cython code. This report is invaluable when\n+                     optimizing a function for speed,\n+                     and for determining when to :ref:`release the GIL <nogil>`:\n+                     in general, a ``nogil`` block may contain only \"white\" code.\n+                     See examples in :ref:`determining_where_to_add_types` or\n+                     :ref:`primes`.",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189465845",
            "id": 189465845,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2NTg0NQ==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 73,
            "path": "docs/src/reference/compilation.rst",
            "position": 77,
            "pull_request_review_id": 121650358,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189465845",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189465884"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189465884"
                }
            },
            "author_association": "MEMBER",
            "body": "\"The HTML file gives an indication of how much Python interaction there is in each of the source code lines, compared to plain C code.\"",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T17:55:50Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.\n+\n+    :param exclude: When passing glob patterns as ``module_list``, you can exclude certain\n+                    module names explicitly by passing them into the ``exclude`` option.\n+\n+    :param nthreads: The number of concurrent builds for parallel compilation\n+                     (requires the Python module multiprocessing).\n+\n+    :param aliases: If you want to use compiler directives like ``# distutils: ...`` but\n+                    can only know at compile time (when running the ``setup.py``) which values\n+                    to use, you can use aliases and pass a dictionary mapping those aliases\n+                    to Python strings when calling :func:`cythonize`. As an example, sat you\n+                    want to use the compiler\n+                    directive ``# distutils: include_dirs = ../static_libs/include/``\n+                    but this path isn't always fixed and you want to find it when running\n+                    the ``setup.py``. You can then do ``# distutils: include_dirs = MY_HEADERS``,\n+                    find the value of ``MY_HEADERS`` in the ``setup.py``, put it in a python\n+                    variable called ``foo`` as a string, and then call\n+                    ``cythonize(..., aliases={'MY_HEADERS': foo})``.\n+\n+    :param quiet: If True, Cython won't print error and warning messages during the compilation.\n+\n+    :param force: Forces the recompilation of the Cython modules, even if the timestamps\n+                  don't indicate that a recompilation is necessary.\n+\n+    :param language: To globally enable C++ mode, you can pass ``language='c++'``. Otherwise, this\n+                     will be determined at a per-file level based on compiler directives.  This\n+                     affects only modules found based on file names.  Extension instances passed\n+                     into :func:`cythonize` will not be changed. It is recommended to rather\n+                     use the compiler directive ``# distutils: language = c++`` than this option.\n+                     If you don't, Cython will print a message telling you to use the\n+                     compiler directives.\n+\n+    :param exclude_failures: For a broad 'try to compile' mode that ignores compilation\n+                             failures and simply excludes the failed extensions,\n+                             pass ``exclude_failures=True``. Note that this only\n+                             really makes sense for compiling ``.py`` files which can also\n+                             be used without compilation.\n+\n+    :param annotate: If ``True``, will produce a HTML file for each of the ``.pxd`` files compiled.\n+                     This HTML file will show each line of Cython code with how much\n+                     Python interaction there is. It also allows you to see the C/C++ code",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189465884",
            "id": 189465884,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2NTg4NA==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 67,
            "path": "docs/src/reference/compilation.rst",
            "position": null,
            "pull_request_review_id": 121650358,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:22Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189465884",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189468755"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189468755"
                }
            },
            "author_association": "NONE",
            "body": "Fixed next line.",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T19:54:53Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189468755",
            "id": 189468755,
            "in_reply_to_id": 189465665,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2ODc1NQ==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 26,
            "path": "docs/src/reference/compilation.rst",
            "position": 26,
            "pull_request_review_id": 121653282,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:54:54Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189468755",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/cython/cython/pull/2287#discussion_r189468773"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/2287"
                },
                "self": {
                    "href": "https://api.github.com/repos/cython/cython/pulls/comments/189468773"
                }
            },
            "author_association": "NONE",
            "body": "I can't fix that.",
            "commit_id": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "created_at": "2018-05-20T19:55:29Z",
            "diff_hunk": "@@ -237,6 +237,80 @@ Just as an example, this adds ``mylib`` as library to every extension::\n     then the argument to ``create_extension`` must be pickleable.\n     In particular, it cannot be a lambda function.\n \n+Cythonize arguments\n+-------------------\n+\n+The function :func:`cythonize` can take extra arguments which will allow you to\n+customize your build.\n+\n+.. py:function:: cythonize(module_list, \\\n+                           exclude=None, \\\n+                           nthreads=0, \\\n+                           aliases=None, \\\n+                           quiet=False, \\\n+                           force=False, \\\n+                           language=None, \\\n+                           exclude_failures=False, \\\n+                           **options)\n+\n+    Compile a set of source modules into C/C++ files and return a list of distutils\n+    Extension objects for them.\n+\n+    :param module_list: As module list, pass either a glob pattern, a list of glob\n+                        patterns or a list of Extension objects.  The latter\n+                        allows you to configure the extensions separately\n+                        through the normal distutils options.\n+\n+    :param exclude: When passing glob patterns as ``module_list``, you can exclude certain\n+                    module names explicitly by passing them into the ``exclude`` option.\n+\n+    :param nthreads: The number of concurrent builds for parallel compilation\n+                     (requires the Python module multiprocessing).\n+\n+    :param aliases: If you want to use compiler directives like ``# distutils: ...`` but\n+                    can only know at compile time (when running the ``setup.py``) which values\n+                    to use, you can use aliases and pass a dictionary mapping those aliases\n+                    to Python strings when calling :func:`cythonize`. As an example, sat you\n+                    want to use the compiler\n+                    directive ``# distutils: include_dirs = ../static_libs/include/``\n+                    but this path isn't always fixed and you want to find it when running\n+                    the ``setup.py``. You can then do ``# distutils: include_dirs = MY_HEADERS``,\n+                    find the value of ``MY_HEADERS`` in the ``setup.py``, put it in a python\n+                    variable called ``foo`` as a string, and then call\n+                    ``cythonize(..., aliases={'MY_HEADERS': foo})``.\n+\n+    :param quiet: If True, Cython won't print error and warning messages during the compilation.\n+\n+    :param force: Forces the recompilation of the Cython modules, even if the timestamps\n+                  don't indicate that a recompilation is necessary.\n+\n+    :param language: To globally enable C++ mode, you can pass ``language='c++'``. Otherwise, this\n+                     will be determined at a per-file level based on compiler directives.  This\n+                     affects only modules found based on file names.  Extension instances passed\n+                     into :func:`cythonize` will not be changed. It is recommended to rather\n+                     use the compiler directive ``# distutils: language = c++`` than this option.\n+                     If you don't, Cython will print a message telling you to use the\n+                     compiler directives.\n+\n+    :param exclude_failures: For a broad 'try to compile' mode that ignores compilation\n+                             failures and simply excludes the failed extensions,\n+                             pass ``exclude_failures=True``. Note that this only\n+                             really makes sense for compiling ``.py`` files which can also\n+                             be used without compilation.\n+\n+    :param annotate: If ``True``, will produce a HTML file for each of the ``.pxd`` files compiled.\n+                     This HTML file will show each line of Cython code with how much\n+                     Python interaction there is. It also allows you to see the C/C++ code\n+                     generated for each line of Cython code. This report is invaluable when\n+                     optimizing a function for speed,\n+                     and for determining when to :ref:`release the GIL <nogil>`:\n+                     in general, a ``nogil`` block may contain only \"white\" code.\n+                     See examples in :ref:`determining_where_to_add_types` or\n+                     :ref:`primes`.",
            "html_url": "https://github.com/cython/cython/pull/2287#discussion_r189468773",
            "id": 189468773,
            "in_reply_to_id": 189465845,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4OTQ2ODc3Mw==",
            "original_commit_id": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "original_position": 73,
            "path": "docs/src/reference/compilation.rst",
            "position": 77,
            "pull_request_review_id": 121653299,
            "pull_request_url": "https://api.github.com/repos/cython/cython/pulls/2287",
            "updated_at": "2018-05-20T19:55:29Z",
            "url": "https://api.github.com/repos/cython/cython/pulls/comments/189468773",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2287/comments",
    "commit_data": [
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/806120e50ee1862dc0ae6a66f698aaed74f9af7f/comments",
            "commit": {
                "author": {
                    "date": "2018-05-20T16:01:48Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-20T17:34:31Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Added a documentation for the Cythonize function and its arguments.",
                "tree": {
                    "sha": "9e919f357b0a94fbf32b2fbb035012a158e5d85d",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9e919f357b0a94fbf32b2fbb035012a158e5d85d"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/806120e50ee1862dc0ae6a66f698aaed74f9af7f",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OjgwNjEyMGU1MGVlMTg2MmRjMGFlNmE2NmY2OThhYWVkNzRmOWFmN2Y=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/2f3ee7ad0465ff3b24c5ec768c362bcccb89f343",
                    "sha": "2f3ee7ad0465ff3b24c5ec768c362bcccb89f343",
                    "url": "https://api.github.com/repos/cython/cython/commits/2f3ee7ad0465ff3b24c5ec768c362bcccb89f343"
                }
            ],
            "sha": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
            "url": "https://api.github.com/repos/cython/cython/commits/806120e50ee1862dc0ae6a66f698aaed74f9af7f"
        },
        {
            "author": null,
            "comments_url": "https://api.github.com/repos/cython/cython/commits/edf2fd7cec2277c7fddea462be6374800dae3714/comments",
            "commit": {
                "author": {
                    "date": "2018-05-20T19:53:29Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2018-05-20T19:53:29Z",
                    "email": "gabriel.demarmiesse@teraki.com",
                    "name": "gabrieldemarmiesse"
                },
                "message": "Fixed typos, removed a redondant sentence and done some rephrasing.",
                "tree": {
                    "sha": "9d02d42c23c466ec958dc8701a909f6f5cd4593b",
                    "url": "https://api.github.com/repos/cython/cython/git/trees/9d02d42c23c466ec958dc8701a909f6f5cd4593b"
                },
                "url": "https://api.github.com/repos/cython/cython/git/commits/edf2fd7cec2277c7fddea462be6374800dae3714",
                "verification": {
                    "payload": null,
                    "reason": "unsigned",
                    "signature": null,
                    "verified": false
                }
            },
            "committer": null,
            "html_url": "https://github.com/cython/cython/commit/edf2fd7cec2277c7fddea462be6374800dae3714",
            "node_id": "MDY6Q29tbWl0MTI0NzQ0NjI4OmVkZjJmZDdjZWMyMjc3YzdmZGRlYTQ2MmJlNjM3NDgwMGRhZTM3MTQ=",
            "parents": [
                {
                    "html_url": "https://github.com/cython/cython/commit/806120e50ee1862dc0ae6a66f698aaed74f9af7f",
                    "sha": "806120e50ee1862dc0ae6a66f698aaed74f9af7f",
                    "url": "https://api.github.com/repos/cython/cython/commits/806120e50ee1862dc0ae6a66f698aaed74f9af7f"
                }
            ],
            "sha": "edf2fd7cec2277c7fddea462be6374800dae3714",
            "url": "https://api.github.com/repos/cython/cython/commits/edf2fd7cec2277c7fddea462be6374800dae3714"
        }
    ],
    "commits_url": "https://api.github.com/repos/cython/cython/pulls/2287/commits",
    "created_at": "2018-05-20T16:04:47Z",
    "diff_url": "https://github.com/cython/cython/pull/2287.diff",
    "head": {
        "label": "gabrieldemarmiesse:arguments_cythonize",
        "ref": "arguments_cythonize",
        "repo": {
            "archive_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/branches{/branch}",
            "clone_url": "https://github.com/gabrieldemarmiesse/cython.git",
            "collaborators_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/comments{/number}",
            "commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/commits{/sha}",
            "compare_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/contributors",
            "created_at": "2018-03-11T10:14:43Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/deployments",
            "description": "The most widely used Python to C compiler",
            "downloads_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/downloads",
            "events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/events",
            "fork": true,
            "forks": 0,
            "forks_count": 0,
            "forks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/forks",
            "full_name": "gabrieldemarmiesse/cython",
            "git_commits_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/tags{/sha}",
            "git_url": "git://github.com/gabrieldemarmiesse/cython.git",
            "has_downloads": true,
            "has_issues": false,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "http://cython.org",
            "hooks_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/hooks",
            "html_url": "https://github.com/gabrieldemarmiesse/cython",
            "id": 124744628,
            "issue_comment_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/issues{/number}",
            "keys_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/labels{/name}",
            "language": "Python",
            "languages_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/languages",
            "license": {
                "key": "other",
                "name": "Other",
                "node_id": "MDc6TGljZW5zZTA=",
                "spdx_id": null,
                "url": null
            },
            "merges_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/merges",
            "milestones_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/milestones{/number}",
            "mirror_url": null,
            "name": "cython",
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjQ3NDQ2Mjg=",
            "notifications_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/notifications{?since,all,participating}",
            "open_issues": 0,
            "open_issues_count": 0,
            "owner": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/pulls{/number}",
            "pushed_at": "2018-06-05T11:12:34Z",
            "releases_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/releases{/id}",
            "size": 50659,
            "ssh_url": "git@github.com:gabrieldemarmiesse/cython.git",
            "stargazers_count": 0,
            "stargazers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/stargazers",
            "statuses_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscribers",
            "subscription_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/subscription",
            "svn_url": "https://github.com/gabrieldemarmiesse/cython",
            "tags_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/tags",
            "teams_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/teams",
            "trees_url": "https://api.github.com/repos/gabrieldemarmiesse/cython/git/trees{/sha}",
            "updated_at": "2018-05-28T12:43:28Z",
            "url": "https://api.github.com/repos/gabrieldemarmiesse/cython",
            "watchers": 0,
            "watchers_count": 0
        },
        "sha": "edf2fd7cec2277c7fddea462be6374800dae3714",
        "user": {
            "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
            "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
            "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
            "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
            "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/gabrieldemarmiesse",
            "id": 12891691,
            "login": "gabrieldemarmiesse",
            "node_id": "MDQ6VXNlcjEyODkxNjkx",
            "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
            "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
            "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/gabrieldemarmiesse"
        }
    },
    "html_url": "https://github.com/cython/cython/pull/2287",
    "id": 189239959,
    "issue_url": "https://api.github.com/repos/cython/cython/issues/2287",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "0ced0629e9028c65aea63725c5a141c21a337c65",
    "merged_at": "2018-05-20T20:12:46Z",
    "milestone": null,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTg5MjM5OTU5",
    "number": 2287,
    "patch_url": "https://github.com/cython/cython/pull/2287.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/cython/cython/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/cython/cython/pulls/2287/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/cython/cython/statuses/edf2fd7cec2277c7fddea462be6374800dae3714",
    "title": "Added a documentation for the Cythonize function and its arguments.",
    "updated_at": "2018-05-22T07:36:31Z",
    "url": "https://api.github.com/repos/cython/cython/pulls/2287",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
        "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
        "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
        "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
        "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gabrieldemarmiesse",
        "id": 12891691,
        "login": "gabrieldemarmiesse",
        "node_id": "MDQ6VXNlcjEyODkxNjkx",
        "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
        "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
        "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gabrieldemarmiesse"
    }
}