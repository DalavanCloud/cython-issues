{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I've spent untold hours in the following loop:\r\n\r\n1) `python setup.py build_ext --inplace`\r\n2) `import pandas as pd`\r\n3) `ImportError: pandas/_libs/tslibs/_testing.so: undefined symbol: parse_iso_8601_datetime`\r\n4) Yell profanity at my keyboard\r\n\r\nSo the feature I'm requesting is a way to determine what symbols _are_ defined.  Or near-equivalently: what is available for `cimport`?\r\n\r\nFor a specific example, take [this](https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/hashtable.pyx#L40) extern from pandas._libs.hashtable:\r\n\r\n```\r\ncdef extern from \"numpy/npy_math.h\":\r\n    double NAN \"NPY_NAN\"\r\n```\r\n\r\nI'd like to be able to accomplish this with `cimport`, and a way to figure out where to `cimport` it from.\r\n\r\nI'll volunteer to put together a PR, need some guidance on where to start.",
    "closed_at": "2017-10-13T06:05:05Z",
    "comment_data": [
        {
            "author_association": "OWNER",
            "body": "What symbols are defined in where? Where do you expect\nparse_iso_8601_datetime to be defined? Presumably if you're using it via\nheaders, those headers match the shared library you're linking against. And\nif so you should be getting a compile time error or link error rather than\na runtime error.\n\nGenerally the set of cimportable symbols should be declared in a pxd\nfile(s) that ships with the library one defines (though for numpy in\nparticular we ship our own numpy.pxd so you can just do \"from numpy cimport\nNAN\" or whatever).\n\nFWIW, it's also recommended that one use cythonize so that when pxd files\nchange (either of an upstream library, or within your own code) all\ndependent pyx files get recompiled rather than just the ones that were\ntouched.\n\n(There's nm for an arbitrary library of course, but that's probably not\nwhat you're looking for.)\n\nOn Tue, Sep 19, 2017 at 5:32 PM, jbrockmendel <notifications@github.com>\nwrote:\n\n> I've spent untold hours in the following loop:\n>\n>    1. python setup.py build_ext --inplace\n>    2. import pandas as pd\n>    3. ImportError: pandas/_libs/tslibs/_testing.so: undefined symbol:\n>    parse_iso_8601_datetime\n>    4. Yell profanity at my keyboard\n>\n> So the feature I'm requesting is a way to determine what symbols *are*\n> defined. Or near-equivalently: what is available for cimport?\n>\n> For a specific example, take this\n> <https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/hashtable.pyx#L40>\n> extern from pandas._libs.hashtable:\n>\n> cdef extern from \"numpy/npy_math.h\":\n>     double NAN \"NPY_NAN\"\n>\n> I'd like to be able to accomplish this with cimport, and a way to figure\n> out where to cimport it from.\n>\n> I'll volunteer to put together a PR, need some guidance on where to start.\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/cython/cython/issues/1875>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAdqgSmWxKBSUfLluowujqENUBMu4B6Kks5skF0JgaJpZM4PdMF0>\n> .\n>\n",
            "created_at": "2017-09-20T03:50:10Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-330737618",
            "id": 330737618,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-09-20T03:50:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/330737618",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "NONE",
            "body": "> What symbols are defined in where? Where do you expect parse_iso_8601_datetime to be defined?\r\n\r\nTrial and error with many variants and lots of very similar names means I'm going to have a hard time exactly replicating the exact errors from earlier.  Rather than give a kinda-sorta example, I'll hold onto this until next time this comes up and I can produce a real case.\r\n\r\n<b>Update</b> Real life example: I cannot for the life of me figure out how to cimport `PyExc_ValueError`\r\n\r\n> though for numpy in particular we ship our own numpy.pxd so you can just do \"from numpy cimport NAN\" or whatever\r\n\r\nThe \"or whatever\" bit is the part that could be made more python-friendly.  This might be an easy case of what I have in mind.  Imagine an interactive session:\r\n\r\n```\r\n>>> import cython\r\n>>> dir(cython.numpy)\r\n[\"import_array\", \"ndarray\", \"int64_t\", ...]\r\n```\r\n\r\n> FWIW, it's also recommended that one use cythonize so that when pxd files [...]\r\n\r\nYah, there's been a couple of threads over at pandas recently regarding the specification of dependencies in the setup.py file.  The cython files seem pretty well-behaved in terms of cache-invalidation, but there are some .c and .h files that seem fragile.\r\n\r\n(Incidentally, that's why I was tinkering with parse8601, trying to implement https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/src/datetime/np_datetime_strings.c#L377 in cython.  It came out something like 10x slower than the original, which probably indicates a good stretch of learning curve ahead)",
            "created_at": "2017-09-20T04:47:50Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-330744125",
            "id": 330744125,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-09-20T04:47:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/330744125",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "NONE",
            "body": "On Tue, Sep 19, 2017 at 9:47 PM, jbrockmendel <notifications@github.com>\nwrote:\n\n> What symbols are defined in where? Where do you expect\n> parse_iso_8601_datetime to be defined?\n>\n> Trial and error with many variants and lots of very similar names means\n> I'm going to have a hard time exactly replicating the exact errors from\n> earlier. Rather than give a kinda-sorta example, I'll hold onto this until\n> next time this comes up and I can produce a real case.\n>\n> *Update* Real life example: I cannot for the life of me figure out how to\n> cimport PyExc_ValueError\n>\nYou shouldn't ever need this from Cython, just use the builtin name\nValueError. (Was this an undefined symbol error? This should have been an\nerror at compile time if you tried to use it without it being defined).\n\n> though for numpy in particular we ship our own numpy.pxd so you can just\n> do \"from numpy cimport NAN\" or whatever\n>\n> The \"or whatever\" bit is the part that could be made more python-friendly.\n> This might be an easy case of what I have in mind. Imagine an interactive\n> session:\n>\n> >>> import cython\n> >>> dir(cython.numpy)\n> [\"import_array\", \"ndarray\", \"int64_t\", ...]\n>\n> Not quite following what you mean by cython.numpy.\n\nIs this the set of symbols in numpy.pxd? (Generally pxd files are small\nenough to just read, given they contain little to know implementation.) Or\nthe symbols defined in some header file? (Parsing C/C++ header files is,\nwell, an interesting exercise.)  Or from numpy.so (e.g. nm numpy.so)?\n\n> FWIW, it's also recommended that one use cythonize so that when pxd files\n> [...]\n>\n> Yah, there's been a couple of threads over at pandas recently regarding\n> the specification of dependencies in the setup.py file. The cython files\n> seem pretty well-behaved in terms of cache-invalidation, but there are some\n> .c and .h files that seem fragile.\n>\n> (Incidentally, that's why I was tinkering with parse8601, trying to\n> implement https://github.com/pandas-dev/pandas/blob/master/pandas/_\n> libs/src/datetime/np_datetime_strings.c#L377 in cython. It came out\n> something like 10x slower than the original, which probably indicates a\n> good stretch of learning curve ahead)\n>\nYeah, that'd probably be a tough one to replicate or beat starting from\nscratch in plain old C.\n\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/cython/cython/issues/1875#issuecomment-330744125>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ATqe4ov17cs9zzB-Q1l5XCe8TUdgq9idks5skJj9gaJpZM4PdMF0>\n> .\n>\n> --\n> You received this message because you are subscribed to the Google Groups\n> \"cython-github-notifications\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to cython-github-notifications+unsubscribe@googlegroups.com.\n> To post to this group, send email to cython-github-notifications@\n> googlegroups.com.\n> To view this discussion on the web visit https://groups.google.com/d/\n> msgid/cython-github-notifications/cython/cython/issues/1875/330744125%\n> 40github.com\n> <https://groups.google.com/d/msgid/cython-github-notifications/cython/cython/issues/1875/330744125%40github.com?utm_medium=email&utm_source=footer>\n> .\n>\n> For more options, visit https://groups.google.com/d/optout.\n>\n",
            "created_at": "2017-09-20T05:08:16Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-330746531",
            "id": 330746531,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-09-20T05:08:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/330746531",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/20618978?v=4",
                "events_url": "https://api.github.com/users/cython-notifications/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython-notifications/followers",
                "following_url": "https://api.github.com/users/cython-notifications/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython-notifications/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython-notifications",
                "id": 20618978,
                "login": "cython-notifications",
                "organizations_url": "https://api.github.com/users/cython-notifications/orgs",
                "received_events_url": "https://api.github.com/users/cython-notifications/received_events",
                "repos_url": "https://api.github.com/users/cython-notifications/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython-notifications/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython-notifications/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cython-notifications"
            }
        },
        {
            "author_association": "NONE",
            "body": "> You shouldn't ever need [PyExc_ValueError] from Cython, just use the builtin name ValueError\r\n\r\nThe context of this was trying to match the original `parse_iso_8601_datetime` more closely.  It has:\r\n```\r\nparse_error:\r\n    PyErr_Format(PyExc_ValueError,\r\n                 \"Error parsing datetime string \\\"%s\\\" at position %d\", str,\r\n                 (int)(substr - str));\r\n    return -1;\r\n```\r\n\r\nSo i tried defining:\r\n```\r\ncdef int parse_error(unsigned char* dstr, int position):\r\n    raise ValueError(\"Error parsing datetime string \\\"%s\\\" at position %d\",\r\n                     <str>dstr,\r\n                     position)\r\n    #return -1\r\n```\r\n(Tried various other types for `dstr`, let's skip over that for the moment) This works fine until I try to tack `nogil` onto the definition, at which point I get compile-time errors `Converting to Python object not allowed without gil`.  So the thought was more closely matching the original might help.\r\n\r\n> Yeah, that'd probably be a tough one to replicate or beat starting from\r\nscratch in plain old C.\r\n\r\nThe actual goal (ease of packaging and dependency specification) would be accomplished if I could just drop the original C version into a pyx file.  Is that an option?",
            "created_at": "2017-09-20T16:26:13Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-330906599",
            "id": 330906599,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-09-20T16:26:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/330906599",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "OWNER",
            "body": "This discussion seems to derail a little, although it would make an excellent thread on the cython-users list. I would suggest to migrate it there, and if anything suitable comes out of it that motivates this ticket, copy the relevant comments back here.",
            "created_at": "2017-09-20T16:31:04Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-330907972",
            "id": 330907972,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-09-20T16:31:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/330907972",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Good call, will do.",
            "created_at": "2017-09-20T16:31:23Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-330908056",
            "id": 330908056,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-09-20T16:31:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/330908056",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "NONE",
            "body": "> Not quite following what you mean by cython.numpy.\r\n\r\nThis part is actually pertinent to the original topic.  `cython.numpy` was an example, the idea being that it would basically just implement `__dir__` to make it easy for beginners to figure out from the interpreter what can be `cimport`ed.\r\n\r\nWith things like `np.get_include()` it can be non-obvious what is available in the namespace, and errors can pass silently.\r\n\r\nAn example of a silent namespace error: For quite a while I had a branch of [datetime.pxd](https://github.com/pandas-dev/pandas/blob/master/pandas/_libs/src/datetime.pxd) where I tried to extern-import \"get_datetimestruct_days\" as:\r\n\r\n```\r\ncdef extern from \"numpy/ndarrayobject.h\":\r\n    npy_int64 get_datetimestruct_days(const npy_datetimestruct *dts)\r\n```\r\n\r\n... a name which I now know is not exported in that namespace (are \"exported\" and \"namespace\" the right terminology here?  Let me know if the meaning is not clear).  It did not cause an error because the same function _was_ exported by pandas' src/datetime/np_datetime.h, and while I still had a `cdef extern from \"datetime/np_datetime.h\":` block (even though `get_datetimestruct_days` was not referenced in this block).\r\n\r\nTo recap the original issue: it would be awesome to have a python-facing way of grokking namespaces.  I'll offer labor if there's an interest in making this happen.",
            "created_at": "2017-09-21T00:25:00Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-331016846",
            "id": 331016846,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-09-21T00:25:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/331016846",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "OWNER",
            "body": "If you try to cimport something that doesn't exist, you'll get a Cython compile error. Likewise, if you try to cdef extern declare something that doesn't exist in the .c or .h files, you'll get a C compile error (unless of course the .h file declared a symbol but you didn't link against the library providing that symbol, but there's nothing you can do about that, that's how C works). \r\n\r\nI'm going to close this because it's still not clear what you're asking for. Feel free to take it up again on the list. ",
            "created_at": "2017-10-13T06:05:05Z",
            "html_url": "https://github.com/cython/cython/issues/1875#issuecomment-336358979",
            "id": 336358979,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1875",
            "updated_at": "2017-10-13T06:05:05Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/336358979",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1875/comments",
    "created_at": "2017-09-20T00:32:08Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-10-13T06:05:05Z",
            "event": "closed",
            "id": 1291648914,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1291648914"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1875/events",
    "html_url": "https://github.com/cython/cython/issues/1875",
    "id": 259004840,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1875/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1875,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Feature Request: python-visible namespace for debugging",
    "updated_at": "2017-10-13T06:05:05Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1875",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
        "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
        "followers_url": "https://api.github.com/users/jbrockmendel/followers",
        "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
        "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jbrockmendel",
        "id": 8078968,
        "login": "jbrockmendel",
        "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
        "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
        "repos_url": "https://api.github.com/users/jbrockmendel/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jbrockmendel"
    }
}