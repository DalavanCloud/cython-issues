{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "After I read this [blog post](https://morepypy.blogspot.com/2018/09/inside-cpyext-why-emulating-cpython-c.html) about why emulating the CPython API is so hard for PyPy I raised the fact that we could introduce PyPy specific GC hooks for the cpyext layer in PyPy's IRC channel.\r\nThese would be used by Cython instead of `Py_INCREF` and `Py_DECREF` etc. to track the lifetime objects.\r\nWe're wondering what are the API requirements from Cython's side to implement such a thing.\r\nHow do you imagine such API to look like?\r\nHow hard would it be to generate code that uses those hooks?\r\nWhat do you think that should happen if a Cython uses `Py_INCREF` or other memory management macro manually? Should this feature be hidden under a feature flag?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "It's unclear to me what you mean by \"GC hooks\". If it's just about replacing incref/decref with something else, then that sounds like something that PyPy could do in its header files. Or is the idea to (somehow) change the lifecycle of objects?",
            "created_at": "2018-11-18T09:50:21Z",
            "html_url": "https://github.com/cython/cython/issues/2648#issuecomment-439680278",
            "id": 439680278,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2648",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY4MDI3OA==",
            "updated_at": "2018-11-18T09:50:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439680278",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "The idea is to provide a different API to interact with the GC so that PyPy would be able to completely avoid reference counting and instead use it's own optimized GC.\r\nSo instead of `Py_INCREF` and `Py_DECREF` you'd have another API.\r\nThis issue is about collaborating with the Cython community on such API.",
            "created_at": "2018-11-18T10:56:34Z",
            "html_url": "https://github.com/cython/cython/issues/2648#issuecomment-439683844",
            "id": 439683844,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2648",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY4Mzg0NA==",
            "updated_at": "2018-11-18T10:56:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439683844",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4",
                "events_url": "https://api.github.com/users/thedrow/events{/privacy}",
                "followers_url": "https://api.github.com/users/thedrow/followers",
                "following_url": "https://api.github.com/users/thedrow/following{/other_user}",
                "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thedrow",
                "id": 48936,
                "login": "thedrow",
                "node_id": "MDQ6VXNlcjQ4OTM2",
                "organizations_url": "https://api.github.com/users/thedrow/orgs",
                "received_events_url": "https://api.github.com/users/thedrow/received_events",
                "repos_url": "https://api.github.com/users/thedrow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thedrow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Ok. So, one of the problems is that Cython almost never has a complete view of the lifetime of an object. It knows when it owns a reference to it, but it often does not know who else owns it. Reference counting is a very convenient way to deal with this situation.\r\n\r\nI'd be happy to see proposals how to improve this, but I don't have any myself.",
            "created_at": "2018-11-18T11:03:53Z",
            "html_url": "https://github.com/cython/cython/issues/2648#issuecomment-439684251",
            "id": 439684251,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2648",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY4NDI1MQ==",
            "updated_at": "2018-11-18T11:03:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439684251",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Obviously we need a macro or method to mark the object as tracked by PyPy's GC.\r\nSo `PyPy_TRACK` or something similar would interact with the GC.\r\nI don't think you'll need full view of the lifetime of the object.\r\nI think you'll need to notify PyPy if the object ever leaves the current scope, thus moving itself from the nursery to an older generation. I'm no expert though.",
            "created_at": "2018-11-18T11:11:03Z",
            "html_url": "https://github.com/cython/cython/issues/2648#issuecomment-439684654",
            "id": 439684654,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2648",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY4NDY1NA==",
            "updated_at": "2018-11-18T11:11:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439684654",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4",
                "events_url": "https://api.github.com/users/thedrow/events{/privacy}",
                "followers_url": "https://api.github.com/users/thedrow/followers",
                "following_url": "https://api.github.com/users/thedrow/following{/other_user}",
                "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thedrow",
                "id": 48936,
                "login": "thedrow",
                "node_id": "MDQ6VXNlcjQ4OTM2",
                "organizations_url": "https://api.github.com/users/thedrow/orgs",
                "received_events_url": "https://api.github.com/users/thedrow/received_events",
                "repos_url": "https://api.github.com/users/thedrow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thedrow"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Could you at least outline your line of thinking or reasoning? It's still very unclear what kind of interaction you're envisioning here. For example, why should Cython use a hypothetical `PyPy_TRACK()` for objects that originate from PyPy in the first place? What GC based interaction could there be that does not involve reference counting? (And, what's wrong with reference counting when w.r.t. PyPy? They've implemented it, right?)",
            "created_at": "2018-11-18T13:30:40Z",
            "html_url": "https://github.com/cython/cython/issues/2648#issuecomment-439693009",
            "id": 439693009,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2648",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTY5MzAwOQ==",
            "updated_at": "2018-11-18T13:30:40Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439693009",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Let's begin with what's wrong with reference counting.\r\nThere are two reasons for reference counting slowing down C extensions:\r\n\r\n1. PyPy's GC is one of the main reasons PyPy is much faster than CPython.\r\n1. Crossing the border between RPython and C requires translating the object from PyObject* to W_Root and back.\r\n\r\nYou can read more about it in the blog post I linked to.\r\nTL;DR:\r\n\r\n> So, we can see that calling C from RPython introduce some overhead. Can we measure it?\r\nAssuming that the conversion between W_Root and PyObject* has a reasonable cost (as explained by the previous section), the overhead introduced by a single border-cross is still acceptable, especially if the callee is doing some non-negligible amount of work.\r\nHowever this is not always the case. There are basically three problems that make (or used to make) cpyext super slow:\r\n> 1) Paying the border-crossing cost for trivial operations which are called very often, such as Py_INCREF.\r\n> 2) Crossing the border back and forth many times, even if it's not strictly needed.\r\n> 3) Paying an excessive cost for argument and return value conversions.\r\n\r\nCalling Py_INCREF crosses the RPython-C border which causes the slowdowns described in that blog post.\r\nReference counting is indeed implemented but it is currently emulated and we translate between PyPy's representation of an object and CPython's representation.\r\nIf we could avoid that, all C extensions get a major win.\r\n\r\nCython in my opinion should only call `PyPy_TRACK()` whenever it allocates an object in C. All other objects are considered tracked since they were already created in RPython.\r\n\r\nThe GC needs to be notified when objects allocated in C go out of scope since that's how it decides if they should be moved to an older generation than the nursery and survive the current scope so Cython needs to inject that code as well.\r\n\r\nThere is a problem with this approach. Using the C API directly becomes a problem so it should either result in a compilation error or in a fallback to reference counting. Another approach is handling it on the RPython side of the border by adding a flag to indicate that this object is not reference counted and thus calling `Py_INCREF` is a no-op in those C API methods.\r\n\r\nI won't deny that this is a complicated matter, but I think the entire Python community can benefit from it.",
            "created_at": "2018-11-19T10:41:14Z",
            "html_url": "https://github.com/cython/cython/issues/2648#issuecomment-439848770",
            "id": 439848770,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2648",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTg0ODc3MA==",
            "updated_at": "2018-11-19T10:41:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/439848770",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4",
                "events_url": "https://api.github.com/users/thedrow/events{/privacy}",
                "followers_url": "https://api.github.com/users/thedrow/followers",
                "following_url": "https://api.github.com/users/thedrow/following{/other_user}",
                "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/thedrow",
                "id": 48936,
                "login": "thedrow",
                "node_id": "MDQ6VXNlcjQ4OTM2",
                "organizations_url": "https://api.github.com/users/thedrow/orgs",
                "received_events_url": "https://api.github.com/users/thedrow/received_events",
                "repos_url": "https://api.github.com/users/thedrow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/thedrow"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2648/comments",
    "created_at": "2018-10-08T08:39:30Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-11-18T13:33:44Z",
            "event": "labeled",
            "id": 1973210448,
            "label": {
                "color": "000000",
                "name": "PyPy"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE5NzMyMTA0NDg=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1973210448"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2648/events",
    "html_url": "https://github.com/cython/cython/issues/2648",
    "id": 367686551,
    "labels": [
        {
            "color": "000000",
            "default": false,
            "id": 900386392,
            "name": "PyPy",
            "node_id": "MDU6TGFiZWw5MDAzODYzOTI=",
            "url": "https://api.github.com/repos/cython/cython/labels/PyPy"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2648/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzNjc2ODY1NTE=",
    "number": 2648,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Feedback on PyPy specific GC hooks",
    "updated_at": "2018-11-19T10:41:14Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2648",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4",
        "events_url": "https://api.github.com/users/thedrow/events{/privacy}",
        "followers_url": "https://api.github.com/users/thedrow/followers",
        "following_url": "https://api.github.com/users/thedrow/following{/other_user}",
        "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/thedrow",
        "id": 48936,
        "login": "thedrow",
        "node_id": "MDQ6VXNlcjQ4OTM2",
        "organizations_url": "https://api.github.com/users/thedrow/orgs",
        "received_events_url": "https://api.github.com/users/thedrow/received_events",
        "repos_url": "https://api.github.com/users/thedrow/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/thedrow"
    }
}