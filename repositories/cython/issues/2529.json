{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Going through some of pandas' cython modules to try to make code valid-python where possible, I'm seeing cythonize-time errors.  It seems like some combinations are invalid for surprising reasons, e.g:\r\n\r\n```\r\ncpdef object get_rule_month(object source, object default='DEC')\r\n# existing, works as expected\r\n\r\ncpdef object get_rule_month(source: object, default: object='DEC'):\r\n# seems OK\r\n\r\ncpdef get_rule_month(source: object, default: object='DEC') -> object:\r\n# breaks --> Syntax error in C variable declaration\r\n\r\n@cython.ccall\r\ndef get_rule_month(source: object, default: object='DEC') -> object:\r\n# breaks --> Exception clause not allowed for function returning Python object\r\n\r\n@cython.ccall\r\ndef object get_rule_month(source: object, default: object='DEC'):\r\n# breaks --> Expected '(', found 'get_rule_month'\r\n\r\n@cython.ccall\r\n@cython.returns(object)\r\ndef get_rule_month(source: object, default: object='DEC'):\r\n# appears OK\r\n```\r\n\r\nAnother example with a slightly different set of errors:\r\n\r\n```\r\ncdef inline bint is_null_datetime64(v):\r\n# existing, OK\r\n\r\ncdef inline is_null_datetime64(v) -> bint:\r\n# breaks --> Syntax error in C variable declaration\r\n\r\n@cython.cfunc\r\ndef inline is_null_datetime64(v) -> bint:\r\n# breaks --> Expected '(', found 'is_null_datetime64\r\n\r\n@cython.cfunc\r\n@cython.inline\r\ndef is_null_datetime64(v) -> bint:\r\n# breaks --> Function signature does not match previous declaration\r\n```\r\n\r\nThis last one here is the one that is noticeably different from the first example.\r\n\r\nIs this behavior intentional?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Thanks for that list (and for trying it in the first place). It means we clearly lack tests here, and it's good to have real-world feedback about where people encounter real-world problems.\r\n\r\nRegarding the \"obvious\" cases:\r\n\r\n> `def inline func()`\r\n\r\nThis can never work, because `def` requires Python syntax. Similarly, `cdef`/`cpdef` syntax cannot be combined with `->` return type annotations, which are a Python `def` function feature. While `cpdef` + Python syntax is a debatable edge case, I'd suggest that providing the return type like this should stay illegal for now. Either you use Python syntax (`def ... -> type`) or Cython syntax (`cpdef type ...`), not both. There are probably ways to give better error messages here (I created #2530 for that).\r\n\r\nThere is an `@cython.inline` decorator, so the (currently) only correct way to use `inline` in Python code is\r\n```cython\r\n@cython.cfunc\r\n@cython.inline\r\ndef is_null_datetime64(v) -> bint:\r\n```\r\nThere is a (similar) test for this in our test suite, so I don't know right now why this would fail. Probably something trivial.\r\n\r\nhttps://github.com/cython/cython/blob/0fb73f66696e52f6614305d0ad6d42521fd128b0/tests/run/pure_py3.py#L68-L70\r\n\r\nSimilarly, `cpdef` should be expressed like this:\r\n```cython\r\n@cython.ccall\r\ndef get_rule_month(source: object, default: object='DEC') -> object:\r\n```\r\nwhich also fails for you, as you said. I remember noticing this kind of error, too, and fixing something in that corner recently. Could you try the latest master on that?",
            "created_at": "2018-08-03T05:00:31Z",
            "html_url": "https://github.com/cython/cython/issues/2529#issuecomment-410144973",
            "id": 410144973,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2529",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDE0NDk3Mw==",
            "updated_at": "2018-08-03T05:00:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/410144973",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> There is a (similar) test for this in our test suite, so I don't know right now why this would fail. Probably something trivial.\r\n\r\nPossibly relevant: there is an accompanying .pxd file that was unchanged throughout all these iterations with \"cdef  bint is_null_datetime64(v)`\r\n\r\n> I remember noticing this kind of error, too, and fixing something in that corner recently. Could you try the latest master on that?\r\n\r\nWill do.  I'll also add to the list permutations involving `nogil` and `except? -1`\r\n\r\n> Similarly, cdef/cpdef syntax cannot be combined with -> return type annotations, which are a Python def function feature.\r\n\r\nGood to know, thanks.  My intuition was that the parser would translate each of the supported forms to a canonical representation, allowing users to mix and match (even though doing so would be really weird in some cases).  Not the first time intuition has led me astray.  (Can you point me towards the part of the code responsible for this?  If it doesn't require learning the entire code-base, I'd be happy to help with fleshing out the tests)\r\n\r\n> While `cpdef` + Python syntax is a debatable edge case, I'd suggest that providing the return type like this should stay illegal for now. \r\n\r\nA use case I can imagine where this would be really convenient is linting (a large part of the motivation for trying this syntax in the first place).  With `cp?def` + Python syntax, we can probably cobble together something to pass `re.sub('^cp?def ', 'def', source).replace('cimport', 'import')` and be most of the way towards having something we can pass to `flake8`.",
            "created_at": "2018-08-03T19:12:42Z",
            "html_url": "https://github.com/cython/cython/issues/2529#issuecomment-410349505",
            "id": 410349505,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2529",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDM0OTUwNQ==",
            "updated_at": "2018-08-03T19:12:42Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/410349505",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "node_id": "MDQ6VXNlcjgwNzg5Njg=",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> there is an accompanying .pxd file that was unchanged throughout all these iterations with \"cdef bint is_null_datetime64(v)`\r\n\r\nAh, yes, I'd be surprised if that didn't make a difference. But if you have a `.pxd` file with the types in it, why do you still need to define them in the actual source file?\r\n\r\n> part of the code responsible for this\r\n\r\nThere are different aspects to this. One is the `AdjustDefByDirectives` transform, which adapts Python declarations to overrides provided in an external `.pxd` file, in decorators, or in annotations. Other tasks are done directly by certain syntax tree nodes, e.g. declaring a variable on an expression like `x: int`. Look for `annotation_typing` in the `Cython.Compiler` package.\r\n\r\nTests for this ended up in the pure Python mode tests (`pure_*.py`), in `cython3.pyx`, in `pep526_variable_annotations.py`, and in `annotation_typing.pyx`. The pure mode tests focus on anything cythonic that can run in Python, and the last one focusses on static typing with PEP 484. `.py` files are also tested in Python.\r\n\r\n> `re.sub('^cp?def ', 'def', source).replace('cimport', 'import')`\r\n\r\nFor the first part, use `def` with decorators.\r\n\r\nFor the second, there isn't currently a way to use `cimport` in Python syntax. The only use case I can see is sharing declarations, and for that, it's probably best to require `.pxd` files – in which case you can get pretty far with having your implementation in `.py` files and [override](http://docs.cython.org/en/latest/src/tutorial/pure.html#augmenting-pxd) the Python declarations with C data types/functions/classes in the corresponding `.pxd` file.",
            "created_at": "2018-08-03T20:44:16Z",
            "html_url": "https://github.com/cython/cython/issues/2529#issuecomment-410371269",
            "id": 410371269,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2529",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDM3MTI2OQ==",
            "updated_at": "2018-08-03T20:44:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/410371269",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> But if you have a .pxd file with the types in it, why do you still need to define them in the actual source file?\r\n\r\nNot sure how this status quo developed; presumably easier for contributors/reviewers if they match.  \r\n\r\n>> re.sub('^cp?def ', 'def', source).replace('cimport', 'import')\r\n>\r\n> For the first part, use def with decorators.\r\n>\r\n> For the second, there isn't currently a way to use cimport in Python syntax. \r\n\r\nThis runs into a \"if it were up to me...\" issue where its hard to predict what maintainers will or won't have a strong opinion about.  Last time I tried to move to the decorator syntax the idea was shot down.  It's totally reasonable if you want to declare that Not Cython's Problem.\r\n\r\nAs for the `source.replace(\"cimport\", \"import\")`, that's just a hack to trick a linter into think its valid python.  Feel free to ignore.\r\n\r\nI'll install from master and update results in a bit.",
            "created_at": "2018-08-04T00:58:20Z",
            "html_url": "https://github.com/cython/cython/issues/2529#issuecomment-410410168",
            "id": 410410168,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2529",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDQxMDE2OA==",
            "updated_at": "2018-08-04T01:04:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/410410168",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "node_id": "MDQ6VXNlcjgwNzg5Njg=",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        },
        {
            "author_association": "NONE",
            "body": "Installed from master, no apparent change:\r\n\r\n```\r\ncpdef get_rule_month(source: object, default: object='DEC') -> object:\r\n# still breaks --> Syntax error in C variable declaration\r\n\r\n@cython.ccall\r\ndef get_rule_month(source: object, default: object='DEC') -> object:\r\n# still breaks --> Exception clause not allowed for function returning Python object\r\n\r\ncdef inline is_null_datetime64(v) -> bint:\r\n# still breaks --> Syntax error in C variable declaration\r\n\r\n@cython.cfunc\r\ndef inline is_null_datetime64(v) -> bint:\r\n# still breaks --> Expected '(', found 'is_null_datetime64\r\n\r\n@cython.cfunc\r\n@cython.inline\r\ndef is_null_datetime64(v) -> bint:\r\n# still breaks --> Function signature does not match previous declaration\r\n```\r\n\r\nSome more cases, these _without_ an accompanying pxd file:\r\n\r\n```\r\n@cython.cfunc\r\n@cython.inline\r\ndef median_linear(a: float64_t*, n: int) -> float64_t nogil:\r\n# breaks --> Expected an identifier or literal\r\n\r\n@cython.cfunc\r\n@cython.inline\r\n@cython.nogil\r\ndef median_linear(a: float64_t*, n: int) -> float64_t:\r\n# breaks --> Expected an identifier or literal\r\n\r\n@cython.cfunc\r\n@cython.inline\r\n@cython.nogil\r\ndef median_linear(a: cython.pointer(float64_t), n: int) -> float64_t:\r\n# breaks --> Invalid directive: 'nogil'.  (+1 on the error message)\r\n```\r\n\r\nSo it looks like there exists no valid way to use type annotations on this function.\r\n\r\nA weird thing a user might do is mix/match (here using type annotation only for the `labels` kwarg:\r\n```\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ndef group_median_float64(ndarray[float64_t, ndim=2] out,\r\n                         ndarray[int64_t] counts,\r\n                         ndarray[float64_t, ndim=2] values,\r\n                         labels: ndarray[int64_t],\r\n                         Py_ssize_t min_count=-1):\r\n# breaks --> 'int64_t' is not a constant, variable or function identifier\r\n```\r\n\r\nOf course the `ndim=2` bit isn't valid python (we're in the process of converting these to `foo[:, :]`), so trying to put that in the new format:\r\n\r\n```\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ndef group_median_float64(out ndarray[float64_t, ndim=2],\r\n                         counts: ndarray[int64_t],\r\n                         values: ndarray[float64_t, ndim=2],\r\n                         labels: ndarray[int64_t],\r\n                         min_count: Py_ssize_t=-1):\r\n# breaks --> Expected ']', found '='\r\n```\r\n\r\nBut even with the memoryview syntax it chokes:\r\n\r\n```\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ndef group_cumsum(out: numeric[:, :],\r\n                 values: numeric[:, :],\r\n                 labels: int64_t[:],\r\n                 is_datetimelike,\r\n                 skipna: bint=True):\r\n# breaks --> Compiler crash in AnalyseDeclarationsTransform\r\n```\r\n\r\nNow one with an `except? -1` clause (some of these I now know will break, but listing them for thoroughness)\r\n\r\n```\r\ncdef inline get_datetime64_nanos(val: object) -> int64_t except? -1:\r\n# Syntax error in C variable declaration\r\n\r\n@cython.cfunc\r\n@cython.inline\r\n@cython.exceptval(-1)\r\ndef get_datetime64_nanos(val: object) -> int64_t:\r\n# OK!  Even with an accompanying pxd file\r\n\r\ncdef inline int64_t get_datetime64_nanos(val: object) except? -1:\r\n# OK\r\n\r\n@cython.inline\r\ncdef int64_t get_datetime64_nanos(val: object) except? -1:\r\n# OK\r\n\r\n@cython.exceptval(-1)\r\ncdef inline int64_t get_datetime64_nanos(val: object):\r\n# breaks --> Function signature does not match previous declaration\r\n\r\n@cython.exceptval(-1)\r\n@cython.inline\r\ncdef int64_t get_datetime64_nanos(val: object):\r\n# breaks --> Function signature does not match previous declaration\r\n\r\n@cython.inline\r\n@cython.cfunc\r\ndef int64_t get_datetime64_nanos(val: object) except? -1:\r\n# breaks --> Expected '(', found 'get_datetime64_nanos'\r\n\r\n@cython.inline\r\n@cython.cfunc\r\n@cython.exceptval(-1)\r\ndef int64_t get_datetime64_nanos(val: object):\r\n# breaks --> Expected '(', found 'get_datetime64_nanos'\r\n```",
            "created_at": "2018-08-04T01:24:26Z",
            "html_url": "https://github.com/cython/cython/issues/2529#issuecomment-410412181",
            "id": 410412181,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2529",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDQxMjE4MQ==",
            "updated_at": "2018-08-04T01:24:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/410412181",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
                "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
                "followers_url": "https://api.github.com/users/jbrockmendel/followers",
                "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
                "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jbrockmendel",
                "id": 8078968,
                "login": "jbrockmendel",
                "node_id": "MDQ6VXNlcjgwNzg5Njg=",
                "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
                "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
                "repos_url": "https://api.github.com/users/jbrockmendel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jbrockmendel"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2529/comments",
    "created_at": "2018-08-03T03:19:18Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2529/events",
    "html_url": "https://github.com/cython/cython/issues/2529",
    "id": 347245131,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2529/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzNDcyNDUxMzE=",
    "number": 2529,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "(@cython.cfunc + Type Annotation) Fragility",
    "updated_at": "2018-08-04T01:24:26Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2529",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
        "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
        "followers_url": "https://api.github.com/users/jbrockmendel/followers",
        "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
        "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jbrockmendel",
        "id": 8078968,
        "login": "jbrockmendel",
        "node_id": "MDQ6VXNlcjgwNzg5Njg=",
        "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
        "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
        "repos_url": "https://api.github.com/users/jbrockmendel/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jbrockmendel"
    }
}