{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Hi! I'm facing problem with generating valid c code with enabled linetracing for code like this:\r\n```\r\ntry:\r\n    return LoadJsonFromString(s, len(s))\r\nexcept Exception as e:\r\n   raise ValueError(str(e))\r\n```\r\ncython generates:\r\n```\r\n  /* \"library/python/json/loads.pyx\":9\r\n *         s = s.encode('utf-8')\r\n * \r\n *     try:             # <<<<<<<<<<<<<<\r\n *         return LoadJsonFromString(s, len(s))\r\n *     except Exception as e:\r\n */\r\n  __Pyx_TraceLine(9,0,__PYX_ERR(0, 9, __pyx_L4_error))\r\n  {\r\n    __Pyx_PyThreadState_declare\r\n    __Pyx_PyThreadState_assign\r\n    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);\r\n    __Pyx_XGOTREF(__pyx_t_5);\r\n    __Pyx_XGOTREF(__pyx_t_6);\r\n    __Pyx_XGOTREF(__pyx_t_7);\r\n    /*try:*/ {\r\n[...skipped code for generated LoadJsonFromString call...]\r\n      /* \"library/python/json/loads.pyx\":9\r\n *         s = s.encode('utf-8')\r\n * \r\n *     try:             # <<<<<<<<<<<<<<\r\n *         return LoadJsonFromString(s, len(s))\r\n *     except Exception as e:\r\n */\r\n    __pyx_L4_error:;\r\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\r\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\r\n[...skipped code for exception handling...]\r\n    /* \"library/python/json/loads.pyx\":9\r\n *         s = s.encode('utf-8')\r\n * \r\n *     try:             # <<<<<<<<<<<<<<\r\n *         return LoadJsonFromString(s, len(s))\r\n *     except Exception as e:\r\n */\r\n    __Pyx_XGIVEREF(__pyx_t_5);\r\n    __Pyx_XGIVEREF(__pyx_t_6);\r\n    __Pyx_XGIVEREF(__pyx_t_7);\r\n    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);\r\n    goto __pyx_L1_error;\r\n    __pyx_L8_try_return:;\r\n    __Pyx_XGIVEREF(__pyx_t_5);\r\n    __Pyx_XGIVEREF(__pyx_t_6);\r\n    __Pyx_XGIVEREF(__pyx_t_7);\r\n    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);\r\n    goto __pyx_L0;\r\n  }\r\n```\r\ncompiler error:\r\n```\r\nlibrary/python/json/loads.pyx.cpp:1393:3: error: variable '__pyx_tstate' is used uninitialized whenever 'if' condition is true [-Werror,-Wsometimes-uninitialized]\r\n  __Pyx_TraceLine(9,0,__PYX_ERR(0, 9, __pyx_L4_error))\r\n  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nlibrary/python/json/loads.pyx.cpp:1090:19: note: expanded from macro '__Pyx_TraceLine'\r\n              if (unlikely(ret)) goto_error;\\\r\n                  ^~~~~~~~~~~~~\r\nlibrary/python/json/loads.pyx.cpp:770:23: note: expanded from macro 'unlikely'\r\n  #define unlikely(x) __builtin_expect(!!(x), 0)\r\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\nlibrary/python/json/loads.pyx.cpp:1482:5: note: uninitialized use occurs here\r\n    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);\r\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nlibrary/python/json/loads.pyx.cpp:1119:70: note: expanded from macro '__Pyx_ExceptionReset'\r\n#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)\r\n                                                                     ^~~~~~~~~~~~\r\nlibrary/python/json/loads.pyx.cpp:1393:3: note: remove the 'if' if its condition is always false\r\n  __Pyx_TraceLine(9,0,__PYX_ERR(0, 9, __pyx_L4_error))\r\n  ^\r\nlibrary/python/json/loads.pyx.cpp:1090:15: note: expanded from macro '__Pyx_TraceLine'\r\n              if (unlikely(ret)) goto_error;\\\r\n              ^\r\nlibrary/python/json/loads.pyx.cpp:1395:5: note: variable '__pyx_tstate' is declared here\r\n    __Pyx_PyThreadState_declare\r\n    ^\r\nlibrary/python/json/loads.pyx.cpp:872:38: note: expanded from macro '__Pyx_PyThreadState_declare'\r\n#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;\r\n                                     ^\r\n```\r\nwhich says that macro __Pyx_TraceLine(9,0,__PYX_ERR(0, 9, __pyx_L4_error)) expands into code that will jumps to __pyx_L4_error label if __Pyx_call_line_trace_func returns nonzero value. Jumping to __pyx_L4_error label will skip __pyx_tstate declaration:\r\n```\r\n    __Pyx_PyThreadState_declare\r\n    __Pyx_PyThreadState_assign\r\n```\r\nwhich will be used later in the code expanded from __Pyx_ExceptionReset macro (___Pyx__ExceptionReset(__pyx_tstate, type, value, tb)_)",
    "closed_at": "2018-10-19T20:03:35Z",
    "comment_data": [
        {
            "author_association": "CONTRIBUTOR",
            "body": "Hi, can you please provide a short standalone script to reproduce the bug? I cannot reproduce it. \r\n\r\nThanks.",
            "created_at": "2018-05-17T13:48:58Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-389872596",
            "id": 389872596,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTg3MjU5Ng==",
            "updated_at": "2018-05-17T13:48:58Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/389872596",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "author_association": "NONE",
            "body": "Thanks for your quick response! Will something like this be enough?\r\n`cat lib.pyx`\r\n```\r\ncdef num(x):\r\n    try:\r\n        return x\r\n    except AttributeError as e:\r\n        raise ValueError(str(e))\r\n```\r\n`git clone https://github.com/cython/cython`\r\n`python cython/cython.py -X linetrace=True --cplus lib.pyx -o lib.pyx.cpp`\r\n`clang++-5.0 -Wall -Werror -I/usr/include/python2.7/ -DCYTHON_TRACE=1 -DCYTHON_TRACE_NOGIL=1 -c lib.pyx.cpp`\r\n```\r\nlib.pyx.cpp:1293:3: error: variable '__pyx_tstate' is used uninitialized whenever 'if' condition is true [-Werror,-Wsometimes-uninitialized]\r\n  __Pyx_TraceLine(2,0,__PYX_ERR(0, 2, __pyx_L3_error))\r\n  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nlib.pyx.cpp:1108:19: note: expanded from macro '__Pyx_TraceLine'\r\n              if (unlikely(ret)) goto_error;\\\r\n                  ^~~~~~~~~~~~~\r\nlib.pyx.cpp:788:23: note: expanded from macro 'unlikely'\r\n  #define unlikely(x) __builtin_expect(!!(x), 0)\r\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\nlib.pyx.cpp:1371:5: note: uninitialized use occurs here\r\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);\r\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nlib.pyx.cpp:1130:70: note: expanded from macro '__Pyx_ExceptionReset'\r\n#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)\r\n                                                                     ^~~~~~~~~~~~\r\nlib.pyx.cpp:1293:3: note: remove the 'if' if its condition is always false\r\n  __Pyx_TraceLine(2,0,__PYX_ERR(0, 2, __pyx_L3_error))\r\n  ^\r\nlib.pyx.cpp:1108:15: note: expanded from macro '__Pyx_TraceLine'\r\n              if (unlikely(ret)) goto_error;\\\r\n              ^\r\nlib.pyx.cpp:1295:5: note: variable '__pyx_tstate' is declared here\r\n    __Pyx_PyThreadState_declare\r\n    ^\r\nlib.pyx.cpp:890:38: note: expanded from macro '__Pyx_PyThreadState_declare'\r\n#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;\r\n                                     ^\r\n1 error generated.\r\n```\r\n\r\n",
            "created_at": "2018-05-17T14:41:30Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-389890876",
            "id": 389890876,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTg5MDg3Ng==",
            "updated_at": "2018-05-17T14:41:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/389890876",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/9540183?v=4",
                "events_url": "https://api.github.com/users/frazenshtein/events{/privacy}",
                "followers_url": "https://api.github.com/users/frazenshtein/followers",
                "following_url": "https://api.github.com/users/frazenshtein/following{/other_user}",
                "gists_url": "https://api.github.com/users/frazenshtein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frazenshtein",
                "id": 9540183,
                "login": "frazenshtein",
                "node_id": "MDQ6VXNlcjk1NDAxODM=",
                "organizations_url": "https://api.github.com/users/frazenshtein/orgs",
                "received_events_url": "https://api.github.com/users/frazenshtein/received_events",
                "repos_url": "https://api.github.com/users/frazenshtein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frazenshtein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frazenshtein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frazenshtein"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I tried to make a `setup.py` rather than manually run the cython/cython.py and  clang.\r\n\r\nThis works.\r\n\r\nlib.pyx\r\n```python\r\ncdef num(x):\r\n    try:\r\n        return x\r\n    except AttributeError as e:\r\n        raise ValueError(str(e))\r\n```\r\n\r\nsetup.py\r\n```python\r\nfrom distutils.core import setup\r\nfrom Cython.Build import cythonize\r\nfrom distutils.extension import Extension\r\n\r\nextensions = [\r\n    Extension(\"lib\", [\"lib.pyx\"], define_macros=[('CYTHON_TRACE', '1'),\r\n                                                 ('DCYTHON_TRACE_NOGIL', '1')])\r\n]\r\n\r\nsetup(\r\n    name = \"hello\",\r\n    ext_modules = cythonize(extensions, compiler_directives={'linetrace': True}),\r\n)\r\n```\r\n\r\nCommand to run:\r\n```shell\r\npython setup.py build_ext --inplace\r\n```\r\n\r\nWould this workaround suits you?\r\n\r\nI'm in no way an expert in Cython, I'm only trying to help the maintainers. So maybe I'm missing something obvious.",
            "created_at": "2018-05-17T15:16:47Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-389903331",
            "id": 389903331,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTkwMzMzMQ==",
            "updated_at": "2018-05-17T15:17:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/389903331",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "author_association": "NONE",
            "body": "Yes, your example works for me too, but it's obviously hiding real problem. It uses gcc as compiler by default and due 14 years old gcc bug (https://gcc.gnu.org/bugzilla/show_bug.cgi?id=18501) it doesn't detect uninitialized variable use.\r\nTo reproduce problem you can run command:\r\n```\r\nCC=clang++-5.0 python setup.py build_ext --inplace\r\n```\r\n\r\nI have found similar issue - https://github.com/cython/cython/issues/2269. Pitrou didn't provide enough information, but it seems to me that gcc (at least 4.9.4) is capable to detect some cases of uninitialized variable use. It does't look like my try-except-raise case, but i believe that it's different face of the same problem and cython generates code like\r\n```\r\n  __Pyx_TraceLine(9,0,__PYX_ERR(0, 9, __pyx_L4_error))\r\n  {\r\n    __Pyx_PyThreadState_declare\r\n    __Pyx_PyThreadState_assign\r\n```\r\nwhich may lead to jump over __Pyx_PyThreadState_declare and __Pyx_PyThreadState_assign if__Pyx_call_line_trace_func() returns nonzero value.\r\n\r\nMy workaround:\r\n```diff\r\n+++ b/Cython/Utility/Profile.c\r\n@@ -193,6 +193,7 @@\r\n   #ifdef WITH_THREAD\r\n   #define __Pyx_TraceLine(lineno, nogil, goto_error)                                       \\\r\n   if (likely(!__Pyx_use_tracing)); else {                                                  \\\r\n+      if ((1)); else goto_error;                                                           \\\r\n       if (nogil) {                                                                         \\\r\n           if (CYTHON_TRACE_NOGIL) {                                                        \\\r\n               int ret = 0;                                                                 \\\r\n@@ -203,23 +204,27 @@\r\n                   ret = __Pyx_call_line_trace_func(tstate, $frame_cname, lineno);          \\\r\n               }                                                                            \\\r\n               PyGILState_Release(state);                                                   \\\r\n-              if (unlikely(ret)) goto_error;                                               \\\r\n+              // It's a bug - see https://github.com/cython/cython/issues/2274             \\\r\n+              if (unlikely(ret)) { fprintf(stderr, \"cython: line_trace_func returned %d\\n\", ret); }  \\\r\n           }                                                                                \\\r\n       } else {                                                                             \\\r\n           PyThreadState* tstate = __Pyx_PyThreadState_Current;                             \\\r\n           if (unlikely(tstate->use_tracing && tstate->c_tracefunc && $frame_cname->f_trace)) { \\\r\n               int ret = __Pyx_call_line_trace_func(tstate, $frame_cname, lineno);          \\\r\n-              if (unlikely(ret)) goto_error;                                               \\\r\n+              // It's a bug - see https://github.com/cython/cython/issues/2274             \\\r\n+              if (unlikely(ret)) { fprintf(stderr, \"cython: line_trace_func returned %d\\n\", ret); }  \\\r\n           }                                                                                \\\r\n       }                                                                                    \\\r\n   }\r\n   #else\r\n   #define __Pyx_TraceLine(lineno, nogil, goto_error)                                       \\\r\n   if (likely(!__Pyx_use_tracing)); else {                                                  \\\r\n+      if ((1)); else goto_error;                                                           \\\r\n       PyThreadState* tstate = __Pyx_PyThreadState_Current;                                 \\\r\n       if (unlikely(tstate->use_tracing && tstate->c_tracefunc && $frame_cname->f_trace)) { \\\r\n           int ret = __Pyx_call_line_trace_func(tstate, $frame_cname, lineno);              \\\r\n-          if (unlikely(ret)) goto_error;                                                   \\\r\n+          // It's a bug - see https://github.com/cython/cython/issues/2274                 \\\r\n+          if (unlikely(ret)) { fprintf(stderr, \"cython: line_trace_func returned %d\\n\", ret); } \\\r\n       }                                                                                    \\\r\n   }\r\n   #endif\r\n```\r\nIt looks valid for me, because i don't understand why tracing errors should affect executing code. So, if error occurs in tracing code, we just accept this fact and should move on.",
            "created_at": "2018-05-18T09:05:44Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-390144787",
            "id": 390144787,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDE0NDc4Nw==",
            "updated_at": "2018-05-18T10:39:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/390144787",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/9540183?v=4",
                "events_url": "https://api.github.com/users/frazenshtein/events{/privacy}",
                "followers_url": "https://api.github.com/users/frazenshtein/followers",
                "following_url": "https://api.github.com/users/frazenshtein/following{/other_user}",
                "gists_url": "https://api.github.com/users/frazenshtein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frazenshtein",
                "id": 9540183,
                "login": "frazenshtein",
                "node_id": "MDQ6VXNlcjk1NDAxODM=",
                "organizations_url": "https://api.github.com/users/frazenshtein/orgs",
                "received_events_url": "https://api.github.com/users/frazenshtein/received_events",
                "repos_url": "https://api.github.com/users/frazenshtein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frazenshtein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frazenshtein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frazenshtein"
            }
        },
        {
            "author_association": "NONE",
            "body": "Cython generated code:\r\n```c++\r\n  /* \"lib.pyx\":2\r\n * cdef num(x):\r\n *     try:             # <<<<<<<<<<<<<<\r\n *         return x\r\n *     except AttributeError as e:\r\n */\r\n  __Pyx_TraceLine(2,0,__PYX_ERR(0, 2, __pyx_L3_error))\r\n  {\r\n    __Pyx_PyThreadState_declare\r\n    __Pyx_PyThreadState_assign\r\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\r\n    __Pyx_XGOTREF(__pyx_t_1);\r\n    __Pyx_XGOTREF(__pyx_t_2);\r\n    __Pyx_XGOTREF(__pyx_t_3);\r\n    /*try:*/ {\r\n\r\n      /* \"lib.pyx\":3\r\n * cdef num(x):\r\n *     try:\r\n *         return x             # <<<<<<<<<<<<<<\r\n *     except AttributeError as e:\r\n *         raise ValueError(str(e))\r\n */\r\n      __Pyx_TraceLine(3,0,__PYX_ERR(0, 3, __pyx_L3_error))\r\n      __Pyx_XDECREF(__pyx_r);\r\n      __Pyx_INCREF(__pyx_v_x);\r\n      __pyx_r = __pyx_v_x;\r\n      goto __pyx_L7_try_return;\r\n\r\n      /* \"lib.pyx\":2\r\n * cdef num(x):\r\n *     try:             # <<<<<<<<<<<<<<\r\n *         return x\r\n *     except AttributeError as e:\r\n */\r\n    }\r\n    __pyx_L3_error:;\r\n\r\n    /* \"lib.pyx\":4\r\n *     try:\r\n *         return x\r\n *     except AttributeError as e:             # <<<<<<<<<<<<<<\r\n *         raise ValueError(str(e))\r\n *\r\n */\r\n    __Pyx_TraceLine(4,0,__PYX_ERR(0, 4, __pyx_L5_except_error))\r\n    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);\r\n\r\n```\r\nCython generated code with expanded macro (with my 'expanded' comments):\r\n```c++\r\n// expanded __Pyx_TraceLine(2,0,__PYX_ERR(0, 2, __pyx_L3_error))\r\n  if (__builtin_expect(!!(!__Pyx_use_tracing), 1)); else { if (0) { if (0) { int ret = 0; PyThreadState *tstate; PyGILState_STATE state = PyGILState_Ensure(); tstate = _PyThreadState_Current; if (__builtin_expect(!!(tstate->use_tracing &&\r\n tstate->c_tracefunc && __pyx_frame->f_trace), 0)) { ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, 2); } PyGILState_Release(state); if (__builtin_expect(!!(ret), 0)) { __pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno =\r\n 1301; goto __pyx_L3_error; }; } } else { PyThreadState* tstate = _PyThreadState_Current; if (__builtin_expect(!!(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace), 0)) { int ret = __Pyx_call_line_trace_func(tstate, __py\r\nx_frame, 2); if (__builtin_expect(!!(ret), 0)) { __pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = 1301; goto __pyx_L3_error; }; } } }\r\n  {\r\n// expanded  __Pyx_PyThreadState_declare\r\n    PyThreadState *__pyx_tstate;\r\n// expanded __Pyx_PyThreadState_assign\r\n    __pyx_tstate = _PyThreadState_Current;\r\n// expanded  __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\r\n    __Pyx__ExceptionSave(__pyx_tstate, &__pyx_t_1, &__pyx_t_2, &__pyx_t_3);\r\n                            ;\r\n                            ;\r\n                            ;\r\n             {\r\n# 1318 \"lib.c\"\r\n// expanded  __Pyx_TraceLine(3,0,__PYX_ERR(0, 3, __pyx_L3_error))\r\n      if (__builtin_expect(!!(!__Pyx_use_tracing), 1)); else { if (0) { if (0) { int ret = 0; PyThreadState *tstate; PyGILState_STATE state = PyGILState_Ensure(); tstate = _PyThreadState_Current; if (__builtin_expect(!!(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace), 0)) { ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, 3); } PyGILState_Release(state); if (__builtin_expect(!!(ret), 0)) { __pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = 1318; goto __pyx_L3_error; }; } } else { PyThreadState* tstate = _PyThreadState_Current; if (__builtin_expect(!!(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace), 0)) { int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, 3); if (__builtin_expect(!!(ret), 0)) { __pyx_filename = __pyx_f[0]; __pyx_lineno = 3; __pyx_clineno = 1318; goto __pyx_L3_error; }; } } }\r\n      do { if ((__pyx_r) == ((void*)0)) ; else do { if ( --((PyObject*)(__pyx_r))->ob_refcnt != 0) ; else ( (*(((PyObject*)((PyObject *)(__pyx_r)))->ob_type)->tp_dealloc)((PyObject *)((PyObject *)(__pyx_r)))); } while (0); } while (0);\r\n      ( ((PyObject*)(__pyx_v_x))->ob_refcnt++);\r\n      __pyx_r = __pyx_v_x;\r\n      goto __pyx_L7_try_return;\r\n    }\r\n    __pyx_L3_error:;\r\n# 1340 \"lib.c\"\r\n// expanded __Pyx_TraceLine(4,0,__PYX_ERR(0, 4, __pyx_L5_except_error))\r\n    if (__builtin_expect(!!(!__Pyx_use_tracing), 1)); else { if (0) { if (0) { int ret = 0; PyThreadState *tstate; PyGILState_STATE state = PyGILState_Ensure(); tstate = _PyThreadState_Current; if (__builtin_expect(!!(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace), 0)) { ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, 4); } PyGILState_Release(state); if (__builtin_expect(!!(ret), 0)) { __pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = 1340; goto __pyx_L5_except_error; }; } } else { PyThreadState* tstate = _PyThreadState_Current; if (__builtin_expect(!!(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace), 0)) { int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, 4); if (__builtin_expect(!!(ret), 0)) { __pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = 1340; goto __pyx_L5_except_error; }; } } }\r\n// expanded __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);\r\n    __pyx_t_4 = __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, __pyx_builtin_AttributeError);\r\n    if (__pyx_t_4) {\r\n      __Pyx_AddTraceback(\"lib.num\", __pyx_clineno, __pyx_lineno, __pyx_filename);\r\n      if (__Pyx__GetException(__pyx_tstate, &__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) { __pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = 1344; goto __pyx_L5_except_error; }\r\n                             ;\r\n                             ;\r\n                             ;\r\n```\r\nAs you can see at the first line we can perform ```goto __pyx_L3_error``` and skip ```PyThreadState *__pyx_tstate; __pyx_tstate = _PyThreadState_Current;```, which is the cause of problem, because we will use __pyx_tstate later",
            "created_at": "2018-05-18T09:41:33Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-390154154",
            "id": 390154154,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDE1NDE1NA==",
            "updated_at": "2018-05-18T10:00:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/390154154",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/9540183?v=4",
                "events_url": "https://api.github.com/users/frazenshtein/events{/privacy}",
                "followers_url": "https://api.github.com/users/frazenshtein/followers",
                "following_url": "https://api.github.com/users/frazenshtein/following{/other_user}",
                "gists_url": "https://api.github.com/users/frazenshtein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frazenshtein",
                "id": 9540183,
                "login": "frazenshtein",
                "node_id": "MDQ6VXNlcjk1NDAxODM=",
                "organizations_url": "https://api.github.com/users/frazenshtein/orgs",
                "received_events_url": "https://api.github.com/users/frazenshtein/received_events",
                "repos_url": "https://api.github.com/users/frazenshtein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frazenshtein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frazenshtein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frazenshtein"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "Thanks for all those details. \r\n\r\nI don't have enough knowledge to do a PR, but hopefully someone will figure out the error and fix it with all the information you provided.",
            "created_at": "2018-05-18T10:02:48Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-390159694",
            "id": 390159694,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDE1OTY5NA==",
            "updated_at": "2018-05-18T10:02:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/390159694",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/12891691?v=4",
                "events_url": "https://api.github.com/users/gabrieldemarmiesse/events{/privacy}",
                "followers_url": "https://api.github.com/users/gabrieldemarmiesse/followers",
                "following_url": "https://api.github.com/users/gabrieldemarmiesse/following{/other_user}",
                "gists_url": "https://api.github.com/users/gabrieldemarmiesse/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/gabrieldemarmiesse",
                "id": 12891691,
                "login": "gabrieldemarmiesse",
                "node_id": "MDQ6VXNlcjEyODkxNjkx",
                "organizations_url": "https://api.github.com/users/gabrieldemarmiesse/orgs",
                "received_events_url": "https://api.github.com/users/gabrieldemarmiesse/received_events",
                "repos_url": "https://api.github.com/users/gabrieldemarmiesse/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/gabrieldemarmiesse/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gabrieldemarmiesse/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/gabrieldemarmiesse"
            }
        },
        {
            "author_association": "NONE",
            "body": "Some additional info, which might be useful: it looks like pure UB and behaviour may vary from compiler to compiler. A minimalist example:\r\n```c++\r\n#include <stdio.h>\r\n\r\nint main(int c, char** v)\r\n{\r\n  if (c > 1) {\r\n      fprintf(stderr, \"goto __pyx_L3_error\\n\");\r\n      goto __pyx_L3_error;\r\n  }\r\n  {\r\n      fprintf(stderr, \"declare *p\\n\");\r\n      int *__pyx_tstate;\r\n      __pyx_tstate = &c;\r\n__pyx_L3_error:;\r\n      fprintf(stderr, \"val: %d\\n\", *__pyx_tstate);\r\n  }\r\n  return 0;\r\n}\r\n```\r\n```bash\r\n~> g++-7 -O2 1.cpp; ./a.out 2;\r\ngoto __pyx_L3_error\r\nval: 2\r\n\r\n~> g++-7 1.cpp; ./a.out 2;    \r\ngoto __pyx_L3_error\r\nSegmentation fault (core dumped)\r\n\r\n~> clang++-5.0 -O2 1.cpp; ./a.out 2; \r\ngoto __pyx_L3_error\r\nval: 2\r\n\r\n~> clang++-5.0 1.cpp; ./a.out 2;\r\ngoto __pyx_L3_error\r\nval: -1991643855\r\n```",
            "created_at": "2018-05-18T13:34:49Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-390208682",
            "id": 390208682,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDIwODY4Mg==",
            "updated_at": "2018-05-18T13:34:49Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/390208682",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/9540183?v=4",
                "events_url": "https://api.github.com/users/frazenshtein/events{/privacy}",
                "followers_url": "https://api.github.com/users/frazenshtein/followers",
                "following_url": "https://api.github.com/users/frazenshtein/following{/other_user}",
                "gists_url": "https://api.github.com/users/frazenshtein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frazenshtein",
                "id": 9540183,
                "login": "frazenshtein",
                "node_id": "MDQ6VXNlcjk1NDAxODM=",
                "organizations_url": "https://api.github.com/users/frazenshtein/orgs",
                "received_events_url": "https://api.github.com/users/frazenshtein/received_events",
                "repos_url": "https://api.github.com/users/frazenshtein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frazenshtein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frazenshtein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frazenshtein"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "I see this with clang 6.0.1 as well.",
            "created_at": "2018-07-17T14:03:35Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-405593215",
            "id": 405593215,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTU5MzIxNQ==",
            "updated_at": "2018-07-17T14:03:35Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/405593215",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
                "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
                "followers_url": "https://api.github.com/users/pitrou/followers",
                "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
                "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/pitrou",
                "id": 1721820,
                "login": "pitrou",
                "node_id": "MDQ6VXNlcjE3MjE4MjA=",
                "organizations_url": "https://api.github.com/users/pitrou/orgs",
                "received_events_url": "https://api.github.com/users/pitrou/received_events",
                "repos_url": "https://api.github.com/users/pitrou/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/pitrou"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thank you for the thorough analysis, @frazenshtein. It wasn't really easy to write a test for this, and I couldn't reproduce a crash on my side, but the code now handles the case of errors in the tracing function correctly. See 7ab11ec.",
            "created_at": "2018-10-19T19:25:17Z",
            "html_url": "https://github.com/cython/cython/issues/2274#issuecomment-431472579",
            "id": 431472579,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2274",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTQ3MjU3OQ==",
            "updated_at": "2018-10-19T19:25:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/431472579",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 9,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2274/comments",
    "created_at": "2018-05-17T11:57:55Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-07-17T19:58:47Z",
            "event": "labeled",
            "id": 1738592820,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE3Mzg1OTI4MjA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1738592820"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-07-17T19:58:47Z",
            "event": "labeled",
            "id": 1738592824,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE3Mzg1OTI4MjQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1738592824"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "7ab11ec473a604792bae454305adece55cd8ab37",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/7ab11ec473a604792bae454305adece55cd8ab37",
            "created_at": "2018-10-19T19:22:20Z",
            "event": "referenced",
            "id": 1915551277,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE5MTU1NTEyNzc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1915551277"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/9540183?v=4",
                "events_url": "https://api.github.com/users/frazenshtein/events{/privacy}",
                "followers_url": "https://api.github.com/users/frazenshtein/followers",
                "following_url": "https://api.github.com/users/frazenshtein/following{/other_user}",
                "gists_url": "https://api.github.com/users/frazenshtein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frazenshtein",
                "id": 9540183,
                "login": "frazenshtein",
                "node_id": "MDQ6VXNlcjk1NDAxODM=",
                "organizations_url": "https://api.github.com/users/frazenshtein/orgs",
                "received_events_url": "https://api.github.com/users/frazenshtein/received_events",
                "repos_url": "https://api.github.com/users/frazenshtein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frazenshtein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frazenshtein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frazenshtein"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-19T19:25:18Z",
            "event": "mentioned",
            "id": 1915556666,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTkxNTU1NjY2Ng==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1915556666"
        },
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/9540183?v=4",
                "events_url": "https://api.github.com/users/frazenshtein/events{/privacy}",
                "followers_url": "https://api.github.com/users/frazenshtein/followers",
                "following_url": "https://api.github.com/users/frazenshtein/following{/other_user}",
                "gists_url": "https://api.github.com/users/frazenshtein/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/frazenshtein",
                "id": 9540183,
                "login": "frazenshtein",
                "node_id": "MDQ6VXNlcjk1NDAxODM=",
                "organizations_url": "https://api.github.com/users/frazenshtein/orgs",
                "received_events_url": "https://api.github.com/users/frazenshtein/received_events",
                "repos_url": "https://api.github.com/users/frazenshtein/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/frazenshtein/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/frazenshtein/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/frazenshtein"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-19T19:25:18Z",
            "event": "subscribed",
            "id": 1915556667,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE5MTU1NTY2Njc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1915556667"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-19T19:39:48Z",
            "event": "milestoned",
            "id": 1915581931,
            "milestone": {
                "title": "0.29.1"
            },
            "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDE5MTU1ODE5MzE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1915581931"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-10-19T20:03:35Z",
            "event": "closed",
            "id": 1915626680,
            "node_id": "MDExOkNsb3NlZEV2ZW50MTkxNTYyNjY4MA==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1915626680"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2274/events",
    "html_url": "https://github.com/cython/cython/issues/2274",
    "id": 323991446,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2274/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 2,
        "created_at": "2018-06-08T07:18:05Z",
        "creator": {
            "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
            "events_url": "https://api.github.com/users/scoder/events{/privacy}",
            "followers_url": "https://api.github.com/users/scoder/followers",
            "following_url": "https://api.github.com/users/scoder/following{/other_user}",
            "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/scoder",
            "id": 491659,
            "login": "scoder",
            "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
            "organizations_url": "https://api.github.com/users/scoder/orgs",
            "received_events_url": "https://api.github.com/users/scoder/received_events",
            "repos_url": "https://api.github.com/users/scoder/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/scoder"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestone/56",
        "id": 3409788,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/56/labels",
        "node_id": "MDk6TWlsZXN0b25lMzQwOTc4OA==",
        "number": 56,
        "open_issues": 2,
        "state": "open",
        "title": "0.29.1",
        "updated_at": "2018-10-19T20:03:35Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/56"
    },
    "node_id": "MDU6SXNzdWUzMjM5OTE0NDY=",
    "number": 2274,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "variable '__pyx_tstate' is used uninitialized whenever 'if' condition is true",
    "updated_at": "2018-10-19T20:03:35Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2274",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/9540183?v=4",
        "events_url": "https://api.github.com/users/frazenshtein/events{/privacy}",
        "followers_url": "https://api.github.com/users/frazenshtein/followers",
        "following_url": "https://api.github.com/users/frazenshtein/following{/other_user}",
        "gists_url": "https://api.github.com/users/frazenshtein/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/frazenshtein",
        "id": 9540183,
        "login": "frazenshtein",
        "node_id": "MDQ6VXNlcjk1NDAxODM=",
        "organizations_url": "https://api.github.com/users/frazenshtein/orgs",
        "received_events_url": "https://api.github.com/users/frazenshtein/received_events",
        "repos_url": "https://api.github.com/users/frazenshtein/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/frazenshtein/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/frazenshtein/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/frazenshtein"
    }
}