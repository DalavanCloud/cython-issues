{
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "Especially when using fused types, some code section may or may not require the GIL. Currently, the only way to release the GIL in these cases is to duplicate the code sections and wrap one in a `with nogil` block but not the other, e.g.\r\n```\r\n    if fusedtype is object:\r\n        ...  # complicated code here\r\n    else:\r\n        with nogil:\r\n            ... # complicated code repeated here\r\n```\r\nThe normal reflex of moving the code into a cdef function also does not work out because the function then has the same declaration problem.\r\n\r\nAt least for cases where the distinction is known at compile time (which includes type checks for fused types), there should be a way to base the `nogil` case on a condition.\r\n\r\n**Constraints**:\r\n\r\nThe solution should be as obvious from a Python perspective as possible. `with nogil` is currently special-cased in Cython, but that shouldn't impact its use. An obvious approach in Python would be, for example:\r\n```\r\n    cm = nogil if condition else dummy\r\n    with cm:\r\n        ...\r\n```\r\nbut this is difficult to match with the need for special casing `nogil` in Cython at compile time.\r\n\r\nAlso, while an initial implementation could be restricted to compile time constant conditions, the same syntax should still be applicable when allowing the decision to be taken at runtime (by implicitly generating a duplicate code block in C).\r\n\r\n`nogil` is not only a (special) context manager in Cython but also a decorator, so `nogil(True)` might not be easy to distinguish from `@nogil`, especially in pure Python code (`Shadow.py`). Still, also allowing `@nogil(True)` as a decorator would be nice.\r\n\r\n**Approach**:\r\n\r\nGiven that directives like `with boundscheck(True)` already exist, `with nogil(True)` is probably the way to go. Thus, allow `with nogil(flag)` and detect the decorator case in pure Python mode by checking for callables in the dummy implementation in `Shadow.py`.\r\n\r\nThe `InterpretCompilerDirectives` transform in [ParseTreeTransforms.py](https://github.com/cython/cython/blob/master/Cython/Compiler/ParseTreeTransforms.py) is the place where compiler directives are evaluated. For `with nogil` and `with gil`, a `Nodes.GILStatNode` is created. Note that this is run *before* transforming normal with-statements (with is not relevant for this special case) and constant folding (in the `ConstantFolding` tree transform, which determines the compile time value of the condition), and also long before type analysis (`AnalyseExpressionsTransform`) where fused types are evaluated (see the order in [Pipeline.py](https://github.com/cython/cython/blob/master/Cython/Compiler/Pipeline.py)), so the directive condition will not be finally known until constant folding and type analysis have run, and must therefore be stored as a syntax tree node instead of a boolean flag.\r\n\r\nThe type analysis step should be able to take the final decision about the condition value in `Nodes.GILStatNode`. However, it could well be that certain syntax tree nodes in the code block have already decided by then that they are in a `nogil` context. That might need to be revised to make sure they only take that decision after the compile time condition is evaluated and the final GIL state known.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "@scoder \r\nThere is a somewhat similar challenge with prange.\r\n\r\nFor example:\r\n```\r\nif use_parallelism:   # use_parallelism is a python boolean object\r\n  with nogil:\r\n    for i in range(K):\r\n       ... # complicated code\r\nelse:\r\n  with nogil:\r\n    for i in prange(K):\r\n      ... # complicated code repeated here\r\n```\r\n\r\nI wonder if it's possible to make a solution such as\r\n```\r\nrng = prange(K) if use_parallelism else range(K)\r\n```\r\n\r\nAnother thing is that the schedule strategy of prange also has to be decided at compile time and it would be nice to be able to decide it at runtime.",
            "created_at": "2019-01-17T08:49:56Z",
            "html_url": "https://github.com/cython/cython/issues/2579#issuecomment-455090662",
            "id": 455090662,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2579",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTA5MDY2Mg==",
            "updated_at": "2019-01-17T08:49:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/455090662",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6236499?v=4",
                "events_url": "https://api.github.com/users/noamher/events{/privacy}",
                "followers_url": "https://api.github.com/users/noamher/followers",
                "following_url": "https://api.github.com/users/noamher/following{/other_user}",
                "gists_url": "https://api.github.com/users/noamher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/noamher",
                "id": 6236499,
                "login": "noamher",
                "node_id": "MDQ6VXNlcjYyMzY0OTk=",
                "organizations_url": "https://api.github.com/users/noamher/orgs",
                "received_events_url": "https://api.github.com/users/noamher/received_events",
                "repos_url": "https://api.github.com/users/noamher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/noamher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noamher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/noamher"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "With prange/OpenMP, you can set the thread count to 1 or configure the schedule with the `OMP_SCHEDULE` environment variable.",
            "created_at": "2019-01-17T17:30:15Z",
            "html_url": "https://github.com/cython/cython/issues/2579#issuecomment-455258560",
            "id": 455258560,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2579",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTI1ODU2MA==",
            "updated_at": "2019-01-17T17:30:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/455258560",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "@scoder, I would like to try to take this task on and I would like to hear if you think I'm on the right track.\r\n\r\nBoundcheck is first identified as a function used as a decorator but in the InterpretCompilerDirectives it is transform into a CompilerDirectivesNode (which contains the decorated function). Before creating the CompilerDirectivesNode, the expression used as the boundscheck argument is verified to be a BoolNode (so either True or False, without any need to evaluated the expression).\r\n\r\nI imagine GILStatNode will have to be modified to accept an optional condition (an ExprNode).\r\nIf no condition is provided, the GilStatNode will be used exactly as it is used today. e.g.\r\n\r\n```\r\nwith nogil / gil:\r\n    ...\r\n```\r\n\r\nIf a condition is provided, e.g.\r\n\r\n```\r\nwith nogil / gil(numeric is int):\r\n   ...\r\n```\r\n\r\nThen the condition is stored as the expression of the condition of the GILStatNode.\r\n\r\nA later transformation (after the fused type function is \"unpacked\" into multiple functions in the AnalyseDeclarationsTransform phase) will have to check whether the condition is a valid condition (either a constant boolean or an expression such as \"numeric is int\".\r\n\r\nThe logic to check for expressions such as \"numeric is int\" already exist in the ReplaceFusedTypeChecks visitor which is also called during the AnalyseDeclarationsTransform phase).\r\n\r\nReplaceFusedTypeChecks replaces conditions such as \"numeric is int\" with a BoolNode (True / False) which I believe is pruned later (the IfClauseNode is removed along with it's body if it the condition is False, or the IfClauseNode is removed but the body remains if the condition is True).\r\n\r\nPerhaps ReplaceFusedTypeChecks can also be used to replace the condition of the GILStatNode with True / False.\r\n\r\nAn alternative is to create another Node to represent the conditional nogil.\r\n\r\nWhat do you think?\r\n",
            "created_at": "2019-02-16T16:24:14Z",
            "html_url": "https://github.com/cython/cython/issues/2579#issuecomment-464360101",
            "id": 464360101,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2579",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM2MDEwMQ==",
            "updated_at": "2019-02-16T16:24:14Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/464360101",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6236499?v=4",
                "events_url": "https://api.github.com/users/noamher/events{/privacy}",
                "followers_url": "https://api.github.com/users/noamher/followers",
                "following_url": "https://api.github.com/users/noamher/following{/other_user}",
                "gists_url": "https://api.github.com/users/noamher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/noamher",
                "id": 6236499,
                "login": "noamher",
                "node_id": "MDQ6VXNlcjYyMzY0OTk=",
                "organizations_url": "https://api.github.com/users/noamher/orgs",
                "received_events_url": "https://api.github.com/users/noamher/received_events",
                "repos_url": "https://api.github.com/users/noamher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/noamher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noamher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/noamher"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Perfect analysis. The evaluation of the condition is already implemented, so all the `GILStateNode` has to do is to raise an `error(...)` for anything with `not self.condition.has_constant_result()`, and otherwise look at the truth value of `self.condition.constant_result`. A `GILStatNode` with a falsy condition result can be discarded.\r\n\r\nNote that `ReplaceFusedTypeChecks` won't do much in non-fused functions, so this is not the right place to discard `GILStatNode`s. I think the best place for this is the `ConstantFolding` transform, which is executed relatively early in the pipeline (where it can cover all trivially constant conditions), and then runs again later for fused functions to resolve type checks etc. So this transform should cover all use cases. Note that, since it runs twice (and since it's generally a \"best effort\" transform), it's not the right place to raise a compiler error, since the first run will not be able to resolve all cases. It might be enough to raise the error only in the late `GilCheck` transform, which checks for GIL violations after all other tree transformations have run.\r\n\r\nNow, the final question is whether all of this happens in the right order in the compiler pipeline. It might be that we already need to know about `nogil` sections before we know the truth value of the expression, at least in the case of fused functions. That would be unfortunate, although I guess we might get away with some ambiguity here in the case of fused types, where the code block would usually have to work without the GIL, at least in some cases. Tests will have to tell us if things \"just work\" or if we need to fix more things up, so quite a bit of work here is to write an extensive set of tests that mixes conditional gil/nogil blocks together with several language features to make sure that we didn't break them. Especially features like try-finally, nested gil/nogil scenarios (with and without conditions), and fused types, also mixed Python/non-Python fused types (e.g. `int` and `object`).\r\n\r\nAll positive tests for this should go into a single new test file under `tests/run/`, take a look at `nogil.pyx` and `with_gil.pyx`. You will also need an error test for invalid conditions and GIL violations. Look at `tests/errors/nogil.pyx` for that, and add a new test file next to it.\r\n\r\nI hope I answered all your questions so far. Keep asking if you need more help.",
            "created_at": "2019-02-16T18:08:24Z",
            "html_url": "https://github.com/cython/cython/issues/2579#issuecomment-464368349",
            "id": 464368349,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2579",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM2ODM0OQ==",
            "updated_at": "2019-02-16T18:08:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/464368349",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "Would it be necessary to discard  GILStatNodes outside of non fused types functions?",
            "created_at": "2019-02-16T20:49:16Z",
            "html_url": "https://github.com/cython/cython/issues/2579#issuecomment-464383660",
            "id": 464383660,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2579",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM4MzY2MA==",
            "updated_at": "2019-02-16T20:49:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/464383660",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/6236499?v=4",
                "events_url": "https://api.github.com/users/noamher/events{/privacy}",
                "followers_url": "https://api.github.com/users/noamher/followers",
                "following_url": "https://api.github.com/users/noamher/following{/other_user}",
                "gists_url": "https://api.github.com/users/noamher/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/noamher",
                "id": 6236499,
                "login": "noamher",
                "node_id": "MDQ6VXNlcjYyMzY0OTk=",
                "organizations_url": "https://api.github.com/users/noamher/orgs",
                "received_events_url": "https://api.github.com/users/noamher/received_events",
                "repos_url": "https://api.github.com/users/noamher/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/noamher/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/noamher/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/noamher"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "> Would it be necessary to discard GILStatNodes outside of non fused types functions?\r\n\r\nThey somehow have to do nothing when disabled, and I think that discarding them is the easiest way to do that. Fused functions are not the only use case for this feature. You could also just imagine a global `DEF` constant that disables certain `nogil` usages, e.g. for profiling, debugging, performance comparisons, … I think it's best to _not_ make fused functions special at all in that regard.",
            "created_at": "2019-02-16T20:55:48Z",
            "html_url": "https://github.com/cython/cython/issues/2579#issuecomment-464384390",
            "id": 464384390,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2579",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDM4NDM5MA==",
            "updated_at": "2019-02-16T20:55:48Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/464384390",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 6,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2579/comments",
    "created_at": "2018-08-25T09:48:47Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-08-25T09:48:47Z",
            "event": "labeled",
            "id": 1808937020,
            "label": {
                "color": "0e8a16",
                "name": "help wanted"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MDg5MzcwMjA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1808937020"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-08-25T09:48:47Z",
            "event": "labeled",
            "id": 1808937021,
            "label": {
                "color": "444444",
                "name": "enhancement"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MDg5MzcwMjE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1808937021"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-08-25T09:48:47Z",
            "event": "labeled",
            "id": 1808937022,
            "label": {
                "color": "444444",
                "name": "Cython Language Feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MDg5MzcwMjI=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1808937022"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "5ea5a0f5e14c89515189ed937890be75732908a1",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/5ea5a0f5e14c89515189ed937890be75732908a1",
            "created_at": "2018-09-14T21:19:04Z",
            "event": "referenced",
            "id": 1847063414,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE4NDcwNjM0MTQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1847063414"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-01-17T08:49:56Z",
            "event": "mentioned",
            "id": 2079572472,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA3OTU3MjQ3Mg==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2079572472"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-01-17T08:49:56Z",
            "event": "subscribed",
            "id": 2079572475,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNzk1NzI0NzU=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2079572475"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-02-16T16:24:14Z",
            "event": "mentioned",
            "id": 2144252763,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjE0NDI1Mjc2Mw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2144252763"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-02-16T16:24:14Z",
            "event": "subscribed",
            "id": 2144252764,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIxNDQyNTI3NjQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2144252764"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2579/events",
    "html_url": "https://github.com/cython/cython/issues/2579",
    "id": 354000003,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425559948,
            "name": "Cython Language Feature",
            "node_id": "MDU6TGFiZWw0MjU1NTk5NDg=",
            "url": "https://api.github.com/repos/cython/cython/labels/Cython%20Language%20Feature"
        },
        {
            "color": "444444",
            "default": true,
            "id": 425556243,
            "name": "enhancement",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNDM=",
            "url": "https://api.github.com/repos/cython/cython/labels/enhancement"
        },
        {
            "color": "0e8a16",
            "default": true,
            "id": 414800879,
            "name": "help wanted",
            "node_id": "MDU6TGFiZWw0MTQ4MDA4Nzk=",
            "url": "https://api.github.com/repos/cython/cython/labels/help%20wanted"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2579/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzNTQwMDAwMDM=",
    "number": 2579,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Allow (compile-time) conditional \"with nogil\" blocks",
    "updated_at": "2019-02-16T20:55:48Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2579",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}