{
    "assignee": null,
    "assignees": [],
    "body": "Currently, when using Cython on existing python scripts, if we want to add static typing for a variable with a type from another module, we must add a line to cimport the type from that module. However, cimport has the side effect of importing and executing the module, even if we don't really need this. And this introduces additional dependencies between modules, which often requires much refactoring effort to break circular dependencies.\r\n\r\nFor example, when static typing a variable in module M1 with type T from module M2, the only run-time information that is required by M1 is the address of the PyTypeObject struct of T, which is used for type checking. And this address can be retrieved without executing the python code in M2, because the PyTypeObject struct is a static variable in the compiled binary. Unless we have python code in M1 that subclasses T or instantiates T, etc., we don't have to execute M2 during executing M1.\r\n\r\nIn my humble opinion, we need some new Cython statement that provides the semantic of (cimport minus import). Maybe we should name it \"creference\"? For now I just hack into Cython to make cimport act like a creference, and if I want the original behaviour of cimport, I just put an import statement besides a cimport statement.",
    "closed_at": null,
    "comment_data": [
        {
            "body": "There is type initialization code that happens on cimport--we'd rather not introduce a state where types or other cimported values are partially initialized. This would also mean that `cdef T var` would be legal, but `cdef T var = T()` would not be. I think it's much better for a symbol to be all the way available if it's available at all. Also, the bar for introducing new Cython syntax and concepts is high. ",
            "created_at": "2016-11-26T22:01:51Z",
            "html_url": "https://github.com/cython/cython/issues/1534#issuecomment-263088531",
            "id": 263088531,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1534",
            "updated_at": "2016-11-26T22:01:51Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/263088531",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "body": "@robertwb That's right, I understand introducing a partially available type is not the best choice, and my current solution is to raise a NameError if a \"creferenced\" type is being instantiated and so on (such a type is considered to only be available as a static type annotation, but not available in the python namespace).\r\n\r\nAlthough my solution may not be the best choice, I sincerely suggest that the dependency problem is worth considering. Cython is a very good language and I use it in my project to gain large performance boost for one or two core modules. But if I want to use it more widely, maybe for an existing python framework that consists of tens of modules, I often find it extremely difficult, sometimes impossible, to break circular dependencies that are introduced through cimport. For example, we often have modules that have a dependency chain like M1->M2->M3->M4->M5, and objects of types from these modules are often passed between these modules, then static typing will introduce new dependencies, e.g., M4->M2, and M5->M1, ..., and then we have to either (1) refactor these modules heavily to utilize Cython, but with penalty in readability and extensibility, or (2) giving up static typing across modules.\r\n\r\nI'd really appreciate it if Cython could provide a good solution for this problem.",
            "created_at": "2016-11-27T06:04:59Z",
            "html_url": "https://github.com/cython/cython/issues/1534#issuecomment-263104353",
            "id": 263104353,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1534",
            "updated_at": "2016-11-27T06:04:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/263104353",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8189561?v=3",
                "events_url": "https://api.github.com/users/trouger/events{/privacy}",
                "followers_url": "https://api.github.com/users/trouger/followers",
                "following_url": "https://api.github.com/users/trouger/following{/other_user}",
                "gists_url": "https://api.github.com/users/trouger/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/trouger",
                "id": 8189561,
                "login": "trouger",
                "organizations_url": "https://api.github.com/users/trouger/orgs",
                "received_events_url": "https://api.github.com/users/trouger/received_events",
                "repos_url": "https://api.github.com/users/trouger/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/trouger/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/trouger/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/trouger"
            }
        },
        {
            "body": "I've generally found that refactoring modules to eliminate circular dependencies often increases readability and structure, bug agree that it's non-trivial work. \r\n\r\nIn this particular case (going on the scant details I have), I would suggest introducing a base class (almost an interface) in M1 which M5 then implements. \r\n\r\nAs for a long-term solution, I think it'd be interesting to explore Go-style interfaces and fast calling without explicit cimports. ",
            "created_at": "2016-11-29T16:59:26Z",
            "html_url": "https://github.com/cython/cython/issues/1534#issuecomment-263630179",
            "id": 263630179,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1534",
            "updated_at": "2016-11-29T16:59:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/263630179",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1534/comments",
    "created_at": "2016-11-26T18:24:16Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-11-27T06:04:59Z",
            "event": "mentioned",
            "id": 872766704,
            "url": "https://api.github.com/repos/cython/cython/issues/events/872766704"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-11-27T06:04:59Z",
            "event": "subscribed",
            "id": 872766705,
            "url": "https://api.github.com/repos/cython/cython/issues/events/872766705"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1534/events",
    "html_url": "https://github.com/cython/cython/issues/1534",
    "id": 191819494,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1534/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1534,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Static typing with cimport introduces unnecessary dependencies",
    "updated_at": "2016-11-29T16:59:26Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1534",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8189561?v=3",
        "events_url": "https://api.github.com/users/trouger/events{/privacy}",
        "followers_url": "https://api.github.com/users/trouger/followers",
        "following_url": "https://api.github.com/users/trouger/following{/other_user}",
        "gists_url": "https://api.github.com/users/trouger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/trouger",
        "id": 8189561,
        "login": "trouger",
        "organizations_url": "https://api.github.com/users/trouger/orgs",
        "received_events_url": "https://api.github.com/users/trouger/received_events",
        "repos_url": "https://api.github.com/users/trouger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/trouger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/trouger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/trouger"
    }
}