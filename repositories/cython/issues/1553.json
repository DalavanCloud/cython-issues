{
    "assignee": null,
    "assignees": [],
    "body": "Here is a snippet that reproduces the problem. We bumped into this in scikit-learn but if this helps I can spend more time on this and try to reproduce on a stand-alone example:\r\n\r\n```bash\r\ngit clone https://github.com/scikit-learn/scikit-learn > /dev/null 2>&1\r\ncd scikit-learn\r\n(for i in $(seq 1 10); do\r\n    cython sklearn/neighbors/kd_tree.pyx\r\n    md5sum sklearn/neighbors/kd_tree.c\r\ndone) | sort\r\n```\r\n\r\nOuptut:\r\n```\r\n2ee7fa6b55aa7f304e9932aa1c29b7b0  sklearn/neighbors/kd_tree.c\r\n2ee7fa6b55aa7f304e9932aa1c29b7b0  sklearn/neighbors/kd_tree.c\r\n434a64388d440852dbb0131df508d9e4  sklearn/neighbors/kd_tree.c\r\n6612c38036533bd4b9905d5e83e02f2e  sklearn/neighbors/kd_tree.c\r\n6612c38036533bd4b9905d5e83e02f2e  sklearn/neighbors/kd_tree.c\r\n6612c38036533bd4b9905d5e83e02f2e  sklearn/neighbors/kd_tree.c\r\n6612c38036533bd4b9905d5e83e02f2e  sklearn/neighbors/kd_tree.c\r\na2d16d4dd56e088f6959659a0f03126a  sklearn/neighbors/kd_tree.c\r\na2d16d4dd56e088f6959659a0f03126a  sklearn/neighbors/kd_tree.c\r\na2d16d4dd56e088f6959659a0f03126a  sklearn/neighbors/kd_tree.c\r\n```\r\n\r\nLooking at a few diffs, the differences are ordering only:\r\n\r\n```diff\r\ndiff --git a/sklearn/neighbors/kd_tree.c b/tmp/kd_tree.c\r\nindex 629734c..00802d5 100644\r\n--- a/sklearn/neighbors/kd_tree.c\r\n+++ b/tmp/kd_tree.c\r\n@@ -2121,9 +2121,6 @@ __pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,\r\n                                  size_t sizeof_dtype, int contig_flag,\r\n                                  int dtype_is_object);\r\n \r\n-/* CIntFromPy.proto */\r\n-static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);\r\n-\r\n /* TypeInfoToFormat.proto */\r\n struct __pyx_typeinfo_string {\r\n     char string[3];\r\n@@ -2131,6 +2128,9 @@ struct __pyx_typeinfo_string {\r\n static struct __pyx_typeinfo_string __Pyx_TypeInfoToFormat(__Pyx_TypeInfo *type);\r\n \r\n /* CIntFromPy.proto */\r\n+static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);\r\n+\r\n+/* CIntFromPy.proto */\r\n static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);\r\n \r\n /* CIntFromPy.proto */\r\n@@ -45883,6 +45883,50 @@ no_fail:\r\n     return new_mvs;\r\n }\r\n \r\n+/* TypeInfoToFormat */\r\n+              static struct __pyx_typeinfo_string __Pyx_TypeInfoToFormat(__Pyx_TypeInfo *type) {\r\n+    struct __pyx_typeinfo_string result = { {0} };\r\n+    char *buf = (char *) result.string;\r\n+    size_t size = type->size;\r\n+    switch (type->typegroup) {\r\n+        case 'H':\r\n+            *buf = 'c';\r\n+            break;\r\n+        case 'I':\r\n+        case 'U':\r\n+            if (size == 1)\r\n+                *buf = (type->is_unsigned) ? 'B' : 'b';\r\n+            else if (size == 2)\r\n+                *buf = (type->is_unsigned) ? 'H' : 'h';\r\n+            else if (size == 4)\r\n+                *buf = (type->is_unsigned) ? 'I' : 'i';\r\n+            else if (size == 8)\r\n+                *buf = (type->is_unsigned) ? 'Q' : 'q';\r\n+            break;\r\n+        case 'P':\r\n+            *buf = 'P';\r\n+            break;\r\n+        case 'C':\r\n+         {\r\n+            __Pyx_TypeInfo complex_type = *type;\r\n+            complex_type.typegroup = 'R';\r\n+            complex_type.size /= 2;\r\n+            *buf++ = 'Z';\r\n+            *buf = __Pyx_TypeInfoToFormat(&complex_type).string[0];\r\n+            break;\r\n+         }\r\n+        case 'R':\r\n+            if (size == 4)\r\n+                *buf = 'f';\r\n+            else if (size == 8)\r\n+                *buf = 'd';\r\n+            else\r\n+                *buf = 'g';\r\n+            break;\r\n+    }\r\n+    return result;\r\n+}\r\n+\r\n /* CIntFromPy */\r\n               static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {\r\n     const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;\r\n@@ -46072,50 +46116,6 @@ raise_neg_overflow:\r\n     return (Py_intptr_t) -1;\r\n }\r\n \r\n-/* TypeInfoToFormat */\r\n-              static struct __pyx_typeinfo_string __Pyx_TypeInfoToFormat(__Pyx_TypeInfo *type) {\r\n-    struct __pyx_typeinfo_string result = { {0} };\r\n-    char *buf = (char *) result.string;\r\n-    size_t size = type->size;\r\n-    switch (type->typegroup) {\r\n-        case 'H':\r\n-            *buf = 'c';\r\n-            break;\r\n-        case 'I':\r\n-        case 'U':\r\n-            if (size == 1)\r\n-                *buf = (type->is_unsigned) ? 'B' : 'b';\r\n-            else if (size == 2)\r\n-                *buf = (type->is_unsigned) ? 'H' : 'h';\r\n-            else if (size == 4)\r\n-                *buf = (type->is_unsigned) ? 'I' : 'i';\r\n-            else if (size == 8)\r\n-                *buf = (type->is_unsigned) ? 'Q' : 'q';\r\n-            break;\r\n-        case 'P':\r\n-            *buf = 'P';\r\n-            break;\r\n-        case 'C':\r\n-         {\r\n-            __Pyx_TypeInfo complex_type = *type;\r\n-            complex_type.typegroup = 'R';\r\n-            complex_type.size /= 2;\r\n-            *buf++ = 'Z';\r\n-            *buf = __Pyx_TypeInfoToFormat(&complex_type).string[0];\r\n-            break;\r\n-         }\r\n-        case 'R':\r\n-            if (size == 4)\r\n-                *buf = 'f';\r\n-            else if (size == 8)\r\n-                *buf = 'd';\r\n-            else\r\n-                *buf = 'g';\r\n-            break;\r\n-    }\r\n-    return result;\r\n-}\r\n-\r\n /* CIntFromPy */\r\n               static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {\r\n     const int neg_one = (int) -1, const_zero = (int) 0;\r\n```\r\n\r\nMore context: we bumped into this is because while trying to use ccache to speed up the .c files compilation and we were seing that the cache was sometimes not reused.",
    "closed_at": null,
    "comment_data": [
        {
            "body": "Note: I was using 0.25.2 but I see a similar behaviour in 0.24.1 and 0.23.5.",
            "created_at": "2016-12-14T12:37:13Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267023455",
            "id": 267023455,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-14T12:37:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267023455",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1680079?v=3",
                "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
                "followers_url": "https://api.github.com/users/lesteve/followers",
                "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
                "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lesteve",
                "id": 1680079,
                "login": "lesteve",
                "organizations_url": "https://api.github.com/users/lesteve/orgs",
                "received_events_url": "https://api.github.com/users/lesteve/received_events",
                "repos_url": "https://api.github.com/users/lesteve/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lesteve"
            }
        },
        {
            "body": "On 12/14/2016 2:34 AM, Loïc Estève wrote:\n>\n> Here is a snippet that reproduces the problem. We bumped into this in \n> scikit-learn but if this helps I can spend more time on this and try \n> to reproduce on a stand-alone example:\n>\n> git clone https://github.com/scikit-learn/scikit-learn>  /dev/null2>&1\n> cd  scikit-learn\n> (for  i  in  $(seq 1 10);  do\n>      cython sklearn/neighbors/kd_tree.pyx\n>      md5sum sklearn/neighbors/kd_tree.c\n> done)|  sort\n>\n> Ouptut:\n>\n> |2ee7fa6b55aa7f304e9932aa1c29b7b0 sklearn/neighbors/kd_tree.c \n> 2ee7fa6b55aa7f304e9932aa1c29b7b0 sklearn/neighbors/kd_tree.c \n> 434a64388d440852dbb0131df508d9e4 sklearn/neighbors/kd_tree.c \n> 6612c38036533bd4b9905d5e83e02f2e sklearn/neighbors/kd_tree.c \n> 6612c38036533bd4b9905d5e83e02f2e sklearn/neighbors/kd_tree.c \n> 6612c38036533bd4b9905d5e83e02f2e sklearn/neighbors/kd_tree.c \n> 6612c38036533bd4b9905d5e83e02f2e sklearn/neighbors/kd_tree.c \n> a2d16d4dd56e088f6959659a0f03126a sklearn/neighbors/kd_tree.c \n> a2d16d4dd56e088f6959659a0f03126a sklearn/neighbors/kd_tree.c \n> a2d16d4dd56e088f6959659a0f03126a sklearn/neighbors/kd_tree.c |\n>\n> Looking at a few diffs, the differences are ordering only:\n>\n>\n\nIs this Python 3.3+? If so, I'll bet it has to do with the randomized \nhash seed used to give a different dict ordering on each run of the \nprogram. Try running it with `PYTHONHASHSEED=1 cython sklearn...` and \nsee if it becomes consistent.\n\n\n-- \nDavid Vierra\nMCEdit, a Minecraft World Editor\nhttp://www.mcedit.net\nhttp://twitter.com/codewarrior0\n\n",
            "created_at": "2016-12-14T12:44:22Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267024717",
            "id": 267024717,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-14T12:44:22Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267024717",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/307683?v=3",
                "events_url": "https://api.github.com/users/codewarrior0/events{/privacy}",
                "followers_url": "https://api.github.com/users/codewarrior0/followers",
                "following_url": "https://api.github.com/users/codewarrior0/following{/other_user}",
                "gists_url": "https://api.github.com/users/codewarrior0/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/codewarrior0",
                "id": 307683,
                "login": "codewarrior0",
                "organizations_url": "https://api.github.com/users/codewarrior0/orgs",
                "received_events_url": "https://api.github.com/users/codewarrior0/received_events",
                "repos_url": "https://api.github.com/users/codewarrior0/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/codewarrior0/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/codewarrior0/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/codewarrior0"
            }
        },
        {
            "body": "> Try running it with `PYTHONHASHSEED=1 cython sklearn...` and see if it becomes consistent.\r\n\r\nWow nice, I did not think about that all I have to say! It does become consistent when setting PYTHONHASHSEED indeed.\r\n\r\nWould it make sense to have a better default behaviour by having a consistent ordering though? Using OrderedDict for Python >= 2.7 jumps to mind. **Edit**: actually just sorting on the dictionary keys would be enough and probably easier to support.\r\n\r\nI was wondering whether you support Python 2.6, turns out you do https://github.com/cython/cython/wiki/FAQ#what-python-versions-does-cython-support.",
            "created_at": "2016-12-14T13:13:11Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267030340",
            "id": 267030340,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-14T13:39:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267030340",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1680079?v=3",
                "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
                "followers_url": "https://api.github.com/users/lesteve/followers",
                "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
                "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lesteve",
                "id": 1680079,
                "login": "lesteve",
                "organizations_url": "https://api.github.com/users/lesteve/orgs",
                "received_events_url": "https://api.github.com/users/lesteve/received_events",
                "repos_url": "https://api.github.com/users/lesteve/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lesteve"
            }
        },
        {
            "body": "Note that starting with Python 3.6, the dict type will become deterministic by default. Still having a deterministic dicts for Python 3.4 / 3.5  would be nice to be able to use ccache efficiently on our CI infrastructure.",
            "created_at": "2016-12-14T13:37:24Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267035376",
            "id": 267035376,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-14T13:37:24Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267035376",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/89061?v=3",
                "events_url": "https://api.github.com/users/ogrisel/events{/privacy}",
                "followers_url": "https://api.github.com/users/ogrisel/followers",
                "following_url": "https://api.github.com/users/ogrisel/following{/other_user}",
                "gists_url": "https://api.github.com/users/ogrisel/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/ogrisel",
                "id": 89061,
                "login": "ogrisel",
                "organizations_url": "https://api.github.com/users/ogrisel/orgs",
                "received_events_url": "https://api.github.com/users/ogrisel/received_events",
                "repos_url": "https://api.github.com/users/ogrisel/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/ogrisel/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/ogrisel/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/ogrisel"
            }
        },
        {
            "body": "We still would rather produce deterministic files without relying on dict ordering or PYTHONHASHSEED. If you could cut this down to a minimal example, I could try and provide a fix. ",
            "created_at": "2016-12-15T02:06:52Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267216175",
            "id": 267216175,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-15T02:06:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267216175",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "body": "I cut it down to a simple .pyx:\r\n\r\n```pyx\r\n# test.pyx\r\nfrom cpython cimport array\r\ncimport numpy as np\r\n```\r\n\r\n```\r\n❯ (for i in $(seq 1 10); do cython test.pyx; md5sum test.c; done) | sort\r\n690161681d498f1c9a7c75e24251117d  test.c\r\n690161681d498f1c9a7c75e24251117d  test.c\r\n690161681d498f1c9a7c75e24251117d  test.c\r\n690161681d498f1c9a7c75e24251117d  test.c\r\n690161681d498f1c9a7c75e24251117d  test.c\r\n690161681d498f1c9a7c75e24251117d  test.c\r\nf2e5b6ec698a9d0e90d9d48a6268d01f  test.c\r\nf2e5b6ec698a9d0e90d9d48a6268d01f  test.c\r\nf2e5b6ec698a9d0e90d9d48a6268d01f  test.c\r\nf2e5b6ec698a9d0e90d9d48a6268d01f  test.c\r\n```",
            "created_at": "2016-12-16T15:34:41Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267620316",
            "id": 267620316,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-16T15:34:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267620316",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1680079?v=3",
                "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
                "followers_url": "https://api.github.com/users/lesteve/followers",
                "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
                "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lesteve",
                "id": 1680079,
                "login": "lesteve",
                "organizations_url": "https://api.github.com/users/lesteve/orgs",
                "received_events_url": "https://api.github.com/users/lesteve/received_events",
                "repos_url": "https://api.github.com/users/lesteve/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lesteve"
            }
        },
        {
            "body": "Note that may not be the only source of non-determinism since the diff does not look at all like the one I showed above.",
            "created_at": "2016-12-16T15:36:47Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267620827",
            "id": 267620827,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-16T15:36:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267620827",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1680079?v=3",
                "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
                "followers_url": "https://api.github.com/users/lesteve/followers",
                "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
                "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lesteve",
                "id": 1680079,
                "login": "lesteve",
                "organizations_url": "https://api.github.com/users/lesteve/orgs",
                "received_events_url": "https://api.github.com/users/lesteve/received_events",
                "repos_url": "https://api.github.com/users/lesteve/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lesteve"
            }
        },
        {
            "body": "Another example I found.\r\n\r\n```pyx\r\n# test2.pxd\r\ncdef inline int func():\r\n    return 1\r\n```\r\n\r\n```pyx\r\n# test2.pyx\r\nfrom cpython cimport array\r\n```\r\n\r\nOutput:\r\n```\r\n❯ (for i in $(seq 1 10); do cython test2.pyx; md5sum test2.c; done) | sort\r\n2b629af3e2771b0638bbe10772529753  test2.c\r\n2b629af3e2771b0638bbe10772529753  test2.c\r\n2b629af3e2771b0638bbe10772529753  test2.c\r\n2b629af3e2771b0638bbe10772529753  test2.c\r\n2b629af3e2771b0638bbe10772529753  test2.c\r\n2b629af3e2771b0638bbe10772529753  test2.c\r\ndcceaf8d78f1c0540e553977cf6bf7e1  test2.c\r\ndcceaf8d78f1c0540e553977cf6bf7e1  test2.c\r\ndcceaf8d78f1c0540e553977cf6bf7e1  test2.c\r\ndcceaf8d78f1c0540e553977cf6bf7e1  test2.c\r\n```\r\n\r\n The diff looks closer to the one in the original issue:\r\n```diff\r\n❯ diff test2.c{1,2}\r\ndiff --git a/test2.c1 b/test2.c2\r\nindex 8c0caef..2ac4f90 100644\r\n--- a/test2.c1\r\n+++ b/test2.c2\r\n@@ -988,6 +988,34 @@ static PyObject *__pyx_n_s_test;\r\n static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */\r\n static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */\r\n \r\n+/* \"test2.pxd\":1\r\n+ * cdef inline int func():             # <<<<<<<<<<<<<<\r\n+ *     return 1\r\n+ */\r\n+\r\n+static CYTHON_INLINE int __pyx_f_5test2_func(void) {\r\n+  int __pyx_r;\r\n+  __Pyx_RefNannyDeclarations\r\n+  __Pyx_RefNannySetupContext(\"func\", 0);\r\n+\r\n+  /* \"test2.pxd\":2\r\n+ * cdef inline int func():\r\n+ *     return 1             # <<<<<<<<<<<<<<\r\n+ */\r\n+  __pyx_r = 1;\r\n+  goto __pyx_L0;\r\n+\r\n+  /* \"test2.pxd\":1\r\n+ * cdef inline int func():             # <<<<<<<<<<<<<<\r\n+ *     return 1\r\n+ */\r\n+\r\n+  /* function exit code */\r\n+  __pyx_L0:;\r\n+  __Pyx_RefNannyFinishContext();\r\n+  return __pyx_r;\r\n+}\r\n+\r\n /* \"array.pxd\":91\r\n  *             __data_union data\r\n  * \r\n@@ -1622,34 +1650,6 @@ static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self\r\n   __Pyx_RefNannyFinishContext();\r\n }\r\n \r\n-/* \"test2.pxd\":1\r\n- * cdef inline int func():             # <<<<<<<<<<<<<<\r\n- *     return 1\r\n- */\r\n-\r\n-static CYTHON_INLINE int __pyx_f_5test2_func(void) {\r\n-  int __pyx_r;\r\n-  __Pyx_RefNannyDeclarations\r\n-  __Pyx_RefNannySetupContext(\"func\", 0);\r\n-\r\n-  /* \"test2.pxd\":2\r\n- * cdef inline int func():\r\n- *     return 1             # <<<<<<<<<<<<<<\r\n- */\r\n-  __pyx_r = 1;\r\n-  goto __pyx_L0;\r\n-\r\n-  /* \"test2.pxd\":1\r\n- * cdef inline int func():             # <<<<<<<<<<<<<<\r\n- *     return 1\r\n- */\r\n-\r\n-  /* function exit code */\r\n-  __pyx_L0:;\r\n-  __Pyx_RefNannyFinishContext();\r\n-  return __pyx_r;\r\n-}\r\n-\r\n static PyMethodDef __pyx_methods[] = {\r\n   {0, 0, 0, 0}\r\n };\r\n@@ -1809,9 +1809,12 @@ PyMODINIT_FUNC PyInit_test2(void)\r\n   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)\r\n   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n \r\n-  /* \"test2.pxd\":1\r\n- * cdef inline int func():             # <<<<<<<<<<<<<<\r\n- *     return 1\r\n+  /* \"array.pxd\":159\r\n+ *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))\r\n+ * \r\n+ * cdef inline void zero(array self):             # <<<<<<<<<<<<<<\r\n+ *     \"\"\" set all elements of array to zero. \"\"\"\r\n+ *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)\r\n  */\r\n \r\n   /*--- Wrapped vars code ---*/\r\n```",
            "created_at": "2016-12-16T16:29:16Z",
            "html_url": "https://github.com/cython/cython/issues/1553#issuecomment-267633755",
            "id": 267633755,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1553",
            "updated_at": "2016-12-16T16:29:16Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/267633755",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1680079?v=3",
                "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
                "followers_url": "https://api.github.com/users/lesteve/followers",
                "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
                "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lesteve",
                "id": 1680079,
                "login": "lesteve",
                "organizations_url": "https://api.github.com/users/lesteve/orgs",
                "received_events_url": "https://api.github.com/users/lesteve/received_events",
                "repos_url": "https://api.github.com/users/lesteve/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lesteve"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1553/comments",
    "created_at": "2016-12-14T12:34:43Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1680079?v=3",
                "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
                "followers_url": "https://api.github.com/users/lesteve/followers",
                "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
                "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/lesteve",
                "id": 1680079,
                "login": "lesteve",
                "organizations_url": "https://api.github.com/users/lesteve/orgs",
                "received_events_url": "https://api.github.com/users/lesteve/received_events",
                "repos_url": "https://api.github.com/users/lesteve/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/lesteve"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-12-14T12:43:51Z",
            "event": "renamed",
            "id": 893558786,
            "rename": {
                "from": "Non deterministic generated file ordering",
                "to": "Non deterministic ordering of .c generated file "
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/893558786"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1553/events",
    "html_url": "https://github.com/cython/cython/issues/1553",
    "id": 195519676,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1553/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1553,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Non deterministic ordering of .c generated file ",
    "updated_at": "2016-12-16T16:29:16Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1553",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/1680079?v=3",
        "events_url": "https://api.github.com/users/lesteve/events{/privacy}",
        "followers_url": "https://api.github.com/users/lesteve/followers",
        "following_url": "https://api.github.com/users/lesteve/following{/other_user}",
        "gists_url": "https://api.github.com/users/lesteve/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lesteve",
        "id": 1680079,
        "login": "lesteve",
        "organizations_url": "https://api.github.com/users/lesteve/orgs",
        "received_events_url": "https://api.github.com/users/lesteve/received_events",
        "repos_url": "https://api.github.com/users/lesteve/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lesteve/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lesteve/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lesteve"
    }
}