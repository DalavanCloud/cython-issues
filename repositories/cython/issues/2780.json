{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The following example crashes on cythonization with unclear traceback (on Cython 0.29.2):\r\n```python\r\n%%cython\r\nfrom contextlib import contextmanager\r\n\r\n@contextmanager\r\ndef tag(name):\r\n    print(\"<%s>\" % name)\r\n    yield\r\n    print(\"</%s>\" % name)\r\n\r\nfrom cython.parallel cimport prange\r\nfrom libc.stdio cimport printf\r\n\r\ndef func():\r\n    cdef int i\r\n\r\n    with tag('aaa'):\r\n        for i in prange(5, nogil=True):   # using \"xrange\" or \"with nogil\" works well\r\n            printf(\"%d\", i)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Main.py:367: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: /Users/tema/.ipython/cython/_cython_magic_52369e6689303208367674016d90c298.pyx\r\n  tree = Parsing.p_module(s, pxd, full_module_name)\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-11-72854e963c38> in <module>()\r\n----> 1 get_ipython().run_cell_magic(u'cython', u'', u'from contextlib import contextmanager\\n\\n@contextmanager\\ndef tag(name):\\n    print(\"<%s>\" % name)\\n    yield\\n    print(\"</%s>\" % name)\\n\\n\\nfrom cython.parallel cimport prange\\nfrom libc.stdio cimport printf\\n\\n\\ndef func():\\n    cdef int i\\n\\n    with tag(\\'aaa\\'):\\n        for i in prange(5, nogil=True):\\n            printf(\"%d\", i)')\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/IPython/core/interactiveshell.pyc in run_cell_magic(self, magic_name, line, cell)\r\n   2115             magic_arg_s = self.var_expand(line, stack_depth)\r\n   2116             with self.builtin_trap:\r\n-> 2117                 result = fn(magic_arg_s, cell)\r\n   2118             return result\r\n   2119 \r\n\r\n<decorator-gen-118> in cython(self, line, cell)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/IPython/core/magic.pyc in <lambda>(f, *a, **k)\r\n    186     # but it's overkill for just that one bit of state.\r\n    187     def magic_deco(arg):\r\n--> 188         call = lambda f, *a, **k: f(*a, **k)\r\n    189 \r\n    190         if callable(arg):\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Build/IpythonMagic.pyc in cython(self, line, cell)\r\n    322         extension = None\r\n    323         if need_cythonize:\r\n--> 324             extensions = self._cythonize(module_name, code, lib_dir, args, quiet=args.quiet)\r\n    325             assert len(extensions) == 1\r\n    326             extension = extensions[0]\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Build/IpythonMagic.pyc in _cythonize(self, module_name, code, lib_dir, args, quiet)\r\n    430             elif sys.version_info[0] >= 3:\r\n    431                 opts['language_level'] = 3\r\n--> 432             return cythonize([extension], **opts)\r\n    433         except CompileError:\r\n    434             return None\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Build/Dependencies.pyc in cythonize(module_list, exclude, nthreads, aliases, quiet, force, language, exclude_failures, **options)\r\n   1084     if not nthreads:\r\n   1085         for args in to_compile:\r\n-> 1086             cythonize_one(*args)\r\n   1087 \r\n   1088     if exclude_failures:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Build/Dependencies.pyc in cythonize_one(pyx_file, c_file, fingerprint, quiet, options, raise_on_failure, embedded_metadata, full_module_name, progress)\r\n   1190     any_failures = 0\r\n   1191     try:\r\n-> 1192         result = compile_single(pyx_file, options, full_module_name=full_module_name)\r\n   1193         if result.num_errors > 0:\r\n   1194             any_failures = 1\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Main.pyc in compile_single(source, options, full_module_name)\r\n    723     recursion.\r\n    724     \"\"\"\r\n--> 725     return run_pipeline(source, options, full_module_name)\r\n    726 \r\n    727 \r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Main.pyc in run_pipeline(source, options, full_module_name, context)\r\n    511 \r\n    512     context.setup_errors(options, result)\r\n--> 513     err, enddata = Pipeline.run_pipeline(pipeline, source)\r\n    514     context.teardown_errors(err, options, result)\r\n    515     return result\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Pipeline.pyc in run_pipeline(pipeline, source, printtree)\r\n    353                             exec(\"def %s(phase, data): return phase(data)\" % phase_name, exec_ns)\r\n    354                             run = _pipeline_entry_points[phase_name] = exec_ns[phase_name]\r\n--> 355                     data = run(phase, data)\r\n    356                     if DebugFlags.debug_verbose_pipeline:\r\n    357                         print(\"    %.3f seconds\" % (time() - t))\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Pipeline.pyc in run(phase, data)\r\n    333 \r\n    334     def run(phase, data):\r\n--> 335         return phase(data)\r\n    336 \r\n    337     error = None\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Pipeline.pyc in generate_pyx_code_stage(module_node)\r\n     50 def generate_pyx_code_stage_factory(options, result):\r\n     51     def generate_pyx_code_stage(module_node):\r\n---> 52         module_node.process_implementation(options, result)\r\n     53         result.compilation_source = module_node.compilation_source\r\n     54         return result\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/ModuleNode.pyc in process_implementation(self, options, result)\r\n    141         self.find_referenced_modules(env, self.referenced_modules, {})\r\n    142         self.sort_cdef_classes(env)\r\n--> 143         self.generate_c_code(env, options, result)\r\n    144         self.generate_h_code(env, options, result)\r\n    145         self.generate_api_code(env, options, result)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/ModuleNode.pyc in generate_c_code(self, env, options, result)\r\n    377         self.generate_variable_definitions(env, code)\r\n    378 \r\n--> 379         self.body.generate_function_definitions(env, code)\r\n    380 \r\n    381         code.mark_pos(None)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in generate_function_definitions(self, env, code)\r\n    440         #print \"StatListNode.generate_function_definitions\" ###\r\n    441         for stat in self.stats:\r\n--> 442             stat.generate_function_definitions(env, code)\r\n    443 \r\n    444     def generate_execution_code(self, code):\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in generate_function_definitions(self, env, code)\r\n   3171             self.py_wrapper.func_cname = self.entry.func_cname\r\n   3172             self.py_wrapper.generate_function_definitions(env, code)\r\n-> 3173         FuncDefNode.generate_function_definitions(self, env, code)\r\n   3174 \r\n   3175     def generate_function_header(self, code, with_pymethdef, proto_only=0):\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in generate_function_definitions(self, env, code)\r\n   1981         # ----- Function body -----\r\n   1982         # -------------------------\r\n-> 1983         self.generate_function_body(env, code)\r\n   1984 \r\n   1985         code.mark_pos(self.pos, trace=False)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in generate_function_body(self, env, code)\r\n   1743 \r\n   1744     def generate_function_body(self, env, code):\r\n-> 1745         self.body.generate_execution_code(code)\r\n   1746 \r\n   1747     def generate_function_definitions(self, env, code):\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in generate_execution_code(self, code)\r\n    446         for stat in self.stats:\r\n    447             code.mark_pos(stat.pos)\r\n--> 448             stat.generate_execution_code(code)\r\n    449 \r\n    450     def annotate(self, code):\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in generate_execution_code(self, code)\r\n   7090 \r\n   7091         code.error_label = old_error_label\r\n-> 7092         self.body.generate_execution_code(code)\r\n   7093 \r\n   7094         if code.label_used(intermediate_error_label):\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in generate_execution_code(self, code)\r\n   7559         if not self.body.is_terminator:\r\n   7560             code.putln('/*normal exit:*/{')\r\n-> 7561             fresh_finally_clause().generate_execution_code(code)\r\n   7562             if not self.finally_clause.is_terminator:\r\n   7563                 code.put_goto(catch_label)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/site-packages/Cython/Compiler/Nodes.pyc in fresh_finally_clause(_next)\r\n   7547             # generate the original subtree once and always keep a fresh copy\r\n   7548             node = _next[0]\r\n-> 7549             node_copy = copy.deepcopy(node)\r\n   7550             if node is self.finally_clause:\r\n   7551                 _next[0] = node_copy\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_list(x, memo)\r\n    228     memo[id(x)] = y\r\n    229     for a in x:\r\n--> 230         y.append(deepcopy(a, memo))\r\n    231     return y\r\n    232 d[list] = _deepcopy_list\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_list(x, memo)\r\n    228     memo[id(x)] = y\r\n    229     for a in x:\r\n--> 230         y.append(deepcopy(a, memo))\r\n    231     return y\r\n    232 d[list] = _deepcopy_list\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    188                             raise Error(\r\n    189                                 \"un(deep)copyable object of type %s\" % cls)\r\n--> 190                 y = _reconstruct(x, rv, 1, memo)\r\n    191 \r\n    192     memo[d] = y\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _reconstruct(x, info, deep, memo)\r\n    332     if state is not None:\r\n    333         if deep:\r\n--> 334             state = deepcopy(state, memo)\r\n    335         if hasattr(y, '__setstate__'):\r\n    336             y.__setstate__(state)\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    161     copier = _deepcopy_dispatch.get(cls)\r\n    162     if copier:\r\n--> 163         y = copier(x, memo)\r\n    164     else:\r\n    165         try:\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in _deepcopy_dict(x, memo)\r\n    255     memo[id(x)] = y\r\n    256     for key, value in x.iteritems():\r\n--> 257         y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n    258     return y\r\n    259 d[dict] = _deepcopy_dict\r\n\r\n/Users/tema/Projects/miniconda2/lib/python2.7/copy.pyc in deepcopy(x, memo, _nil)\r\n    180                     reductor = getattr(x, \"__reduce_ex__\", None)\r\n    181                     if reductor:\r\n--> 182                         rv = reductor(2)\r\n    183                     else:\r\n    184                         reductor = getattr(x, \"__reduce__\", None)\r\n\r\nTypeError: can't pickle cStringIO.StringO objects\r\n```\r\n\r\nIt looks like `prange` does not like to have other context but `with nogil` in the same scope.\r\nIs it known limitation ?",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2780/comments",
    "created_at": "2019-01-03T08:31:29Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2780/events",
    "html_url": "https://github.com/cython/cython/issues/2780",
    "id": 395490791,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2780/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzOTU0OTA3OTE=",
    "number": 2780,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "contextmanager is not compatible with prange",
    "updated_at": "2019-01-03T08:58:18Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2780",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/497937?v=4",
        "events_url": "https://api.github.com/users/artemru/events{/privacy}",
        "followers_url": "https://api.github.com/users/artemru/followers",
        "following_url": "https://api.github.com/users/artemru/following{/other_user}",
        "gists_url": "https://api.github.com/users/artemru/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/artemru",
        "id": 497937,
        "login": "artemru",
        "node_id": "MDQ6VXNlcjQ5NzkzNw==",
        "organizations_url": "https://api.github.com/users/artemru/orgs",
        "received_events_url": "https://api.github.com/users/artemru/received_events",
        "repos_url": "https://api.github.com/users/artemru/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/artemru/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/artemru/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/artemru"
    }
}