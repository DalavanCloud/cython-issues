{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "This use case is probably unusual.  I have a machine-generated Python file which contains some complicated mathematical calculations.  By complicated, I mean that they are very long.  This file can be compiled and run by Python, but I decided to try compiling it with Cython.  When I attempt to compile it, I get the `RecursionError` below.  The file contains some very long expressions, which I'm guessing is the issue.  I'm able to avoid the error by raising the recursion limit, but my system then runs out of memory.  The stack trace is below.  I'm using Cython version 0.26 on Python 3.6.2 on a macbook air with 8GB of memory.\r\n\r\n```\r\naph_models/hepatitis_c_one_year.pyx:12017:8730: Compiler crash in NormalizeTree\r\n\r\nModuleNode.body = StatListNode(hepatitis_c_one_year.pyx:2:0)\r\nStatListNode.stats[4005] = DefNode(hepatitis_c_one_year.pyx:8016:0,\r\n    modifiers = [...]/0,\r\n    name = '_f4000',\r\n    num_required_args = 186,\r\n    py_wrapper_required = True,\r\n    reqd_kw_flags_cname = '0')\r\nDefNode.body = StatListNode(hepatitis_c_one_year.pyx:8017:4)\r\nStatListNode.stats[4000] = ReturnStatNode(hepatitis_c_one_year.pyx:12017:4,\r\n    is_terminator = True)\r\nReturnStatNode.value = AddNode(hepatitis_c_one_year.pyx:12017:52414,\r\n    infix = True,\r\n    operator = '+',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nAddNode.operand1 = AddNode(hepatitis_c_one_year.pyx:12017:52277,\r\n    infix = True,\r\n    operator = '+',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\n\r\n[... lots of AddNode's here ...]\r\n\r\nAddNode.operand1 = AddNode(hepatitis_c_one_year.pyx:12017:8858,\r\n    infix = True,\r\n    operator = '+',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\nAddNode.operand1 = AddNode(hepatitis_c_one_year.pyx:12017:8730,\r\n    infix = True,\r\n    operator = '+',\r\n    result_is_used = True,\r\n    use_managed_ref = True)\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"Cython/Compiler/Visitor.py\", line 180, in Cython.Compiler.Visitor.TreeVisitor._visit\r\nRecursionError: maximum recursion depth exceeded\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 35, in <module>\r\n    ext_modules = cythonize(ext_modules, compiler_directives=directives) if cythonize_switch else ext_modules,\r\n  File \"/Users/jason/anaconda/envs/aphsuperriskcalculatordev/lib/python3.6/site-packages/Cython/Build/Dependencies.py\", line 1016, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/Users/jason/anaconda/envs/aphsuperriskcalculatordev/lib/python3.6/site-packages/Cython/Build/Dependencies.py\", line 1138, in cythonize_one\r\n    raise CompileError(None, pyx_file)\r\nCython.Compiler.Errors.CompileError: aph_models/hepatitis_c_one_year.pyx\r\n```",
    "closed_at": "2018-05-06T10:02:00Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "Yeah, I've seen this kind of problem with generated Python/Cython code before. Basically, syntax trees of that size will always run into some kind of resource limit, either in Cython or the C compiler. There were already some improvements in the past that reduced the Python stack usage (and it's always best to try the latest release), but compilers are inherently recursive, and there will always be limits at that front.\r\n\r\nYou didn't say what you are doing this for (presumably to gain speedups), but be aware that even if the translation to C succeeds, and the C compiler manages to compile the generated C code, you will probably end up with a huge shared library. Can't say if that would be usable for you.\r\n\r\nSince you are generating the code anyway, you can certainly try to simplify the expressions, e.g. by splitting them in multiple assignments, or adding parentheses around subexpressions to reduce their tree depth (e.g. \"a+b+c+d+e+f+g\" -> \"(a+b+c)+(d+e+f+g)\" reduces the recursion depth of the expression tree by about half). Also, if you type your variables with (numeric) C types instead of Python object types (assuming that's possible), that will reduce the overall size of the C file and the shared library considerably, since it replaces complex Python operations with simple C operations.\r\n\r\nFinally, I'll close this ticket as I do not consider it a bug that we can really do something about. Please ask on the cython-users mailing list if you want further help with this, we'll be happy to help.",
            "created_at": "2018-05-06T10:02:00Z",
            "html_url": "https://github.com/cython/cython/issues/2247#issuecomment-386867978",
            "id": 386867978,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2247",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4Njg2Nzk3OA==",
            "updated_at": "2018-05-06T10:02:00Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/386867978",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "That being said, I actually wonder if switching to async dispatch methods for the tree traversal could help here. Instead of calling the `handler_method` directly in `TreeVisitor._visit()` in `Visitor.py`, and thus recursing down the tree, the handler could be `await`-ed back to an iterative traversal engine and called from there.\r\n\r\nI'll leave the ticket closed anyway, because this is a lot of code modification since all handler methods would have to become `async` (or at least generators), and there are hundreds of them, and b) since async/await is only supported in Py3.5+, we'd actually have to use generators instead or Cython would no longer be runnable from sources in Py2.x and Py<3.5 (only in compiled binary form). That sounds like a lot of hassle to go through, and it almost certainly will slow down the processing as well...",
            "created_at": "2018-05-06T20:33:10Z",
            "html_url": "https://github.com/cython/cython/issues/2247#issuecomment-386911008",
            "id": 386911008,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2247",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjkxMTAwOA==",
            "updated_at": "2018-05-06T20:33:10Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/386911008",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2247/comments",
    "created_at": "2018-05-05T22:01:28Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-05-06T10:02:00Z",
            "event": "closed",
            "id": 1611620293,
            "node_id": "MDExOkNsb3NlZEV2ZW50MTYxMTYyMDI5Mw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1611620293"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-05-06T20:33:04Z",
            "event": "labeled",
            "id": 1611859905,
            "label": {
                "color": "444444",
                "name": "R: wontfix"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE2MTE4NTk5MDU=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1611859905"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2247/events",
    "html_url": "https://github.com/cython/cython/issues/2247",
    "id": 320544572,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425557400,
            "name": "R: wontfix",
            "node_id": "MDU6TGFiZWw0MjU1NTc0MDA=",
            "url": "https://api.github.com/repos/cython/cython/labels/R:%20wontfix"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2247/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMjA1NDQ1NzI=",
    "number": 2247,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "RecursionError: maximum recursion depth exceeded when compiling an extremely complicated but valid Python file",
    "updated_at": "2018-05-06T20:33:10Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2247",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1619462?v=4",
        "events_url": "https://api.github.com/users/jcrudy/events{/privacy}",
        "followers_url": "https://api.github.com/users/jcrudy/followers",
        "following_url": "https://api.github.com/users/jcrudy/following{/other_user}",
        "gists_url": "https://api.github.com/users/jcrudy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jcrudy",
        "id": 1619462,
        "login": "jcrudy",
        "node_id": "MDQ6VXNlcjE2MTk0NjI=",
        "organizations_url": "https://api.github.com/users/jcrudy/orgs",
        "received_events_url": "https://api.github.com/users/jcrudy/received_events",
        "repos_url": "https://api.github.com/users/jcrudy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jcrudy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jcrudy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jcrudy"
    }
}