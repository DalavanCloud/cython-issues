{
    "assignee": null,
    "assignees": [],
    "body": "IPython notebook attached as .zip\r\n[cython-bug-notebook.zip](https://github.com/cython/cython/files/1248786/cython-bug2.zip)\r\n\r\n\r\n\r\n```python\r\n%load_ext Cython\r\n```\r\n\r\n\r\n```python\r\n%%cython -a\r\nimport numpy as np\r\ncimport numpy as np\r\nfrom cpython.ref cimport PyObject\r\n\r\ncdef struct Coordinate:\r\n    float x\r\n    float y\r\n    float z\r\n\r\ncdef struct Test:\r\n    PyObject *coor #Coordinate array\r\n    float a\r\n    float b\r\n\r\ndCoordinate0 = [('x', '<f4'), ('y', '<f4'), ('z', '<f4')]\r\ndCoordinate = np.dtype(dCoordinate0, align=True)\r\n\r\ndTest0 =[('coor', object), ('a', '<f4'), ('b', '<f4')]\r\ndTest = np.dtype(dTest0, align=True)\r\n\r\ndef print_test():\r\n    cdef Coordinate[:] coor2\r\n    coor = np.zeros((1), dtype=dCoordinate)\r\n    coor[\"x\"] = 999\r\n    coor2 = coor\r\n    print(coor2[0].x)\r\n    print(\"success test 1\")\r\n    \r\n    cdef np.ndarray[Test,ndim=1] test2\r\n    test = np.zeros((1), dtype=dTest)\r\n    test[\"coor\"] = coor\r\n    test2 = test\r\n    coor3 = <object> test2[0].coor\r\n    print(coor3)\r\n    print(\"success test 2\")\r\n    \r\n  \r\n\r\n```\r\n\r\n\r\n    ---------------------------------------------------------------------------\r\n\r\n    AssertionError                            Traceback (most recent call last)\r\n\r\n    <ipython-input-9-2e531d306b24> in <module>()\r\n    ----> 1 get_ipython().run_cell_magic('cython', '-a', 'import numpy as np\\ncimport numpy as np\\nfrom cpython.ref cimport PyObject\\n\\ncdef struct Coordinate:\\n    float x\\n    float y\\n    float z\\n\\ncdef struct Test:\\n    PyObject *coor #Coordinate array\\n    float a\\n    float b\\n\\ndCoordinate0 = [(\\'x\\', \\'<f4\\'), (\\'y\\', \\'<f4\\'), (\\'z\\', \\'<f4\\')]\\ndCoordinate = np.dtype(dCoordinate0, align=True)\\n\\ndTest0 =[(\\'coor\\', object), (\\'a\\', \\'<f4\\'), (\\'b\\', \\'<f4\\')]\\ndTest = np.dtype(dTest0, align=True)\\n\\ndef print_test():\\n    cdef Coordinate[:] coor2\\n    coor = np.zeros((1), dtype=dCoordinate)\\n    coor[\"x\"] = 999\\n    coor2 = coor\\n    print(coor2[0].x)\\n    print(\"success test 1\")\\n    \\n    cdef np.ndarray[Test,ndim=1] test2\\n    test = np.zeros((1), dtype=dTest)\\n    test[\"coor\"] = coor\\n    test2 = test\\n    coor3 = <object> test2[0].coor\\n    print(coor3)\\n    print(\"success test 2\")\\n    \\n  ')\r\n    \r\n\r\n    /usr/local/lib/python3.5/dist-packages/IPython/core/interactiveshell.py in run_cell_magic(self, magic_name, line, cell)\r\n       2113             magic_arg_s = self.var_expand(line, stack_depth)\r\n       2114             with self.builtin_trap:\r\n    -> 2115                 result = fn(magic_arg_s, cell)\r\n       2116             return result\r\n       2117 \r\n\r\n\r\n    <decorator-gen-124> in cython(self, line, cell)\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/IPython/core/magic.py in <lambda>(f, *a, **k)\r\n        186     # but it's overkill for just that one bit of state.\r\n        187     def magic_deco(arg):\r\n    --> 188         call = lambda f, *a, **k: f(*a, **k)\r\n        189 \r\n        190         if callable(arg):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Build/IpythonMagic.py in cython(self, line, cell)\r\n        282                 elif sys.version_info[0] > 2:\r\n        283                     opts['language_level'] = 3\r\n    --> 284                 build_extension.extensions = cythonize([extension], **opts)\r\n        285             except CompileError:\r\n        286                 return\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Build/Dependencies.py in cythonize(module_list, exclude, nthreads, aliases, quiet, force, language, exclude_failures, **options)\r\n        932     if not nthreads:\r\n        933         for args in to_compile:\r\n    --> 934             cythonize_one(*args)\r\n        935 \r\n        936     if exclude_failures:\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Build/Dependencies.py in cythonize_one(pyx_file, c_file, fingerprint, quiet, options, raise_on_failure, embedded_metadata, progress)\r\n       1037     any_failures = 0\r\n       1038     try:\r\n    -> 1039         result = compile([pyx_file], options)\r\n       1040         if result.num_errors > 0:\r\n       1041             any_failures = 1\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Main.py in compile(source, options, full_module_name, **kwds)\r\n        684         return compile_single(source, options, full_module_name)\r\n        685     else:\r\n    --> 686         return compile_multiple(source, options)\r\n        687 \r\n        688 #------------------------------------------------------------------------\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Main.py in compile_multiple(sources, options)\r\n        662                     sys.stderr.write(\"Compiling %s\\n\" % source)\r\n        663 \r\n    --> 664                 result = run_pipeline(source, options, context=context)\r\n        665                 results.add(source, result)\r\n        666                 # Compiling multiple sources in one context doesn't quite\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Main.py in run_pipeline(source, options, full_module_name, context)\r\n        492 \r\n        493     context.setup_errors(options, result)\r\n    --> 494     err, enddata = Pipeline.run_pipeline(pipeline, source)\r\n        495     context.teardown_errors(err, options, result)\r\n        496     return result\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Pipeline.py in run_pipeline(pipeline, source, printtree)\r\n        338                     if not printtree and isinstance(phase, PrintTree):\r\n        339                         continue\r\n    --> 340                     data = phase(data)\r\n        341                     if DebugFlags.debug_verbose_pipeline:\r\n        342                         print(\"    %.3f seconds\" % (time() - t))\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Pipeline.py in generate_pyx_code_stage(module_node)\r\n         51 def generate_pyx_code_stage_factory(options, result):\r\n         52     def generate_pyx_code_stage(module_node):\r\n    ---> 53         module_node.process_implementation(options, result)\r\n         54         result.compilation_source = module_node.compilation_source\r\n         55         return result\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/ModuleNode.py in process_implementation(self, options, result)\r\n        135         self.find_referenced_modules(env, self.referenced_modules, {})\r\n        136         self.sort_cdef_classes(env)\r\n    --> 137         self.generate_c_code(env, options, result)\r\n        138         self.generate_h_code(env, options, result)\r\n        139         self.generate_api_code(env, options, result)\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/ModuleNode.py in generate_c_code(self, env, options, result)\r\n        363         # generate normal variable and function definitions\r\n        364         self.generate_variable_definitions(env, code)\r\n    --> 365         self.body.generate_function_definitions(env, code)\r\n        366         code.mark_pos(None)\r\n        367         self.generate_typeobj_definitions(env, code)\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_function_definitions(self, env, code)\r\n        434         #print \"StatListNode.generate_function_definitions\" ###\r\n        435         for stat in self.stats:\r\n    --> 436             stat.generate_function_definitions(env, code)\r\n        437 \r\n        438     def generate_execution_code(self, code):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_function_definitions(self, env, code)\r\n        434         #print \"StatListNode.generate_function_definitions\" ###\r\n        435         for stat in self.stats:\r\n    --> 436             stat.generate_function_definitions(env, code)\r\n        437 \r\n        438     def generate_execution_code(self, code):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_function_definitions(self, env, code)\r\n       3064             self.py_wrapper.func_cname = self.entry.func_cname\r\n       3065             self.py_wrapper.generate_function_definitions(env, code)\r\n    -> 3066         FuncDefNode.generate_function_definitions(self, env, code)\r\n       3067 \r\n       3068     def generate_function_header(self, code, with_pymethdef, proto_only=0):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_function_definitions(self, env, code)\r\n       1930         # ----- Function body -----\r\n       1931         # -------------------------\r\n    -> 1932         self.generate_function_body(env, code)\r\n       1933 \r\n       1934         code.mark_pos(self.pos, trace=False)\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_function_body(self, env, code)\r\n       1697 \r\n       1698     def generate_function_body(self, env, code):\r\n    -> 1699         self.body.generate_execution_code(code)\r\n       1700 \r\n       1701     def generate_function_definitions(self, env, code):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_execution_code(self, code)\r\n        440         for stat in self.stats:\r\n        441             code.mark_pos(stat.pos)\r\n    --> 442             stat.generate_execution_code(code)\r\n        443 \r\n        444     def annotate(self, code):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_execution_code(self, code)\r\n       4791         code.mark_pos(self.pos)\r\n       4792         self.generate_rhs_evaluation_code(code)\r\n    -> 4793         self.generate_assignment_code(code)\r\n       4794 \r\n       4795 \r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Nodes.py in generate_assignment_code(self, code, overloaded_assignment)\r\n       5088                 exception_value=self.exception_value)\r\n       5089         else:\r\n    -> 5090             self.lhs.generate_assignment_code(self.rhs, code)\r\n       5091 \r\n       5092     def generate_function_definitions(self, env, code):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/ExprNodes.py in generate_assignment_code(self, rhs, code, overloaded_assignment, exception_check, exception_value)\r\n       2178                 # variables that the acquired buffer info is stored to is allocated\r\n       2179                 # per entry and coupled with it.\r\n    -> 2180                 self.generate_acquire_buffer(rhs, code)\r\n       2181             assigned = False\r\n       2182             if self.type.is_pyobject:\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/ExprNodes.py in generate_acquire_buffer(self, rhs, code)\r\n       2260         Buffer.put_assign_to_buffer(self.result(), rhstmp, self.entry,\r\n       2261                                     is_initialized=not self.lhs_of_first_assignment,\r\n    -> 2262                                     pos=self.pos, code=code)\r\n       2263 \r\n       2264         if not pretty_rhs:\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Buffer.py in put_assign_to_buffer(lhs_cname, rhs_cname, buf_entry, is_initialized, pos, code)\r\n        373     code.putln(\"__Pyx_BufFmt_StackElem __pyx_stack[%d];\" % buffer_type.dtype.struct_nesting_depth())\r\n        374 \r\n    --> 375     getbuffer = get_getbuffer_call(code, \"%s\", buffer_aux, buffer_type) # fill in object below\r\n        376 \r\n        377     if is_initialized:\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Buffer.py in get_getbuffer_call(code, obj_cname, buffer_aux, buffer_type)\r\n        343     pybuffernd_struct = buffer_aux.buflocal_nd_var.cname\r\n        344 \r\n    --> 345     dtype_typeinfo = get_type_information_cname(code, buffer_type.dtype)\r\n        346 \r\n        347     return (\"__Pyx_GetBufferAndValidate(&%(pybuffernd_struct)s.rcbuffer->pybuffer, \"\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Buffer.py in get_type_information_cname(code, dtype, maxdepth)\r\n        677             assert len(fields) > 0\r\n        678             types = [get_type_information_cname(code, f.type, maxdepth - 1)\r\n    --> 679                      for f in fields]\r\n        680             typecode.putln(\"static __Pyx_StructField %s[] = {\" % structinfo_name, safe=True)\r\n        681             for f, typeinfo in zip(fields, types):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Buffer.py in <listcomp>(.0)\r\n        677             assert len(fields) > 0\r\n        678             types = [get_type_information_cname(code, f.type, maxdepth - 1)\r\n    --> 679                      for f in fields]\r\n        680             typecode.putln(\"static __Pyx_StructField %s[] = {\" % structinfo_name, safe=True)\r\n        681             for f, typeinfo in zip(fields, types):\r\n\r\n\r\n    /usr/local/lib/python3.5/dist-packages/Cython/Compiler/Buffer.py in get_type_information_cname(code, dtype, maxdepth)\r\n        709 \r\n        710         else:\r\n    --> 711             assert False, dtype\r\n        712 \r\n        713         typeinfo = ('static __Pyx_TypeInfo %s = '\r\n\r\n\r\n    AssertionError: PyObject *\r\n\r\n\r\n\r\n```python\r\nprint_test()\r\n```\r\n\r\n    999.0\r\n    success test 1\r\n\r\n\r\n\r\n```python\r\n\r\n```\r\n\r\n\r\n```python\r\n\r\n```\r\n\r\n\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1841/comments",
    "created_at": "2017-08-24T12:29:29Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/8017841?v=4",
                "events_url": "https://api.github.com/users/sjdv1982/events{/privacy}",
                "followers_url": "https://api.github.com/users/sjdv1982/followers",
                "following_url": "https://api.github.com/users/sjdv1982/following{/other_user}",
                "gists_url": "https://api.github.com/users/sjdv1982/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/sjdv1982",
                "id": 8017841,
                "login": "sjdv1982",
                "organizations_url": "https://api.github.com/users/sjdv1982/orgs",
                "received_events_url": "https://api.github.com/users/sjdv1982/received_events",
                "repos_url": "https://api.github.com/users/sjdv1982/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/sjdv1982/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/sjdv1982/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/sjdv1982"
            },
            "commit_id": "d106dbf3a8a1fed83cdab33f4d238cc9aef1c1dc",
            "commit_url": "https://api.github.com/repos/sjdv1982/cython/commits/d106dbf3a8a1fed83cdab33f4d238cc9aef1c1dc",
            "created_at": "2017-08-24T12:51:23Z",
            "event": "referenced",
            "id": 1219661540,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1219661540"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1841/events",
    "html_url": "https://github.com/cython/cython/issues/1841",
    "id": 252585711,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1841/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1841,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "struct-based type checking of structured numpy arrays is impossible if the dtype contains \"object\"",
    "updated_at": "2017-08-24T12:29:29Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1841",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/8017841?v=4",
        "events_url": "https://api.github.com/users/sjdv1982/events{/privacy}",
        "followers_url": "https://api.github.com/users/sjdv1982/followers",
        "following_url": "https://api.github.com/users/sjdv1982/following{/other_user}",
        "gists_url": "https://api.github.com/users/sjdv1982/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sjdv1982",
        "id": 8017841,
        "login": "sjdv1982",
        "organizations_url": "https://api.github.com/users/sjdv1982/orgs",
        "received_events_url": "https://api.github.com/users/sjdv1982/received_events",
        "repos_url": "https://api.github.com/users/sjdv1982/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sjdv1982/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sjdv1982/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sjdv1982"
    }
}