{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "At the moment the behavior of the `__richcmp__` function isn't really clear, especially in regards to different types and unsupported comparisons..\r\n\r\nAccording to some testing i did:\r\n- If only one of components is a cdefed class AND has a `__richcmp__` function that function is used irregardless of the component order. If both components have a `__richcmp__` function the lefts components function is used.\r\n- If the comparison is not `==` or `!=` and the left component doesn't support richcmp the op is flipped (< to > and so on) and the richcmp function of the right side is used.\r\n\r\nIs this correct so far ?\r\n\r\nAlso the arithmetic functions support returning `NotImplemented` to signal that they do not support this operation on the given datatypes and the other side should be tried.\r\nIs there something similar for comparisons ?\r\n\r\nI have a Vector class for example, and only want to implement the == and != operations. How should that be handled ?\r\nSimply raise a NotImplementedError would kind of work, but prevents the other side from handling that operation if it is able to.\r\n",
    "closed_at": "2017-11-25T11:05:54Z",
    "comment_data": [
        {
            "author_association": "OWNER",
            "body": "Now that `__eq__`, `__le__`, etc. are supported, they should be preferred to `__richcmp__`. If the semantics are not the same as in Python, file a bug. Possibly we should update our docs (PRs welcome).",
            "created_at": "2017-10-13T06:11:45Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-336359866",
            "id": 336359866,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-10-13T06:11:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/336359866",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> At the moment the behavior of the `__richcmp__` function isn't really clear, especially in regards to different types and unsupported comparisons..\r\n\r\nIt's exactly the same as the `__eq__` methods and friends in plain Python, except that there is only 1 special method (`__richcmp__`) where the `op` argument denotes the operation. That's really the only difference.\r\n\r\nIf you want details of how rich comparisons work, I would refer to PEP 207: https://www.python.org/dev/peps/pep-0207/\r\n\r\n> If the comparison is not == or != and the left component doesn't support richcmp the op is flipped (< to > and so on) and the richcmp function of the right side is used.\r\n\r\nThis is documented in PEP 207\r\n\r\n> Is there something similar for comparisons ?\r\n\r\nAgain as documented in PEP 207, just `return NotImplemented`.",
            "created_at": "2017-10-18T19:51:15Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-337708054",
            "id": 337708054,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-10-18T19:51:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/337708054",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "NONE",
            "body": "See https://trac.sagemath.org/ticket/24255 for an example why this is a Cython bug that already hits users.",
            "created_at": "2017-11-23T16:10:34Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346656482",
            "id": 346656482,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-23T16:10:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346656482",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1146709?v=4",
                "events_url": "https://api.github.com/users/rwst/events{/privacy}",
                "followers_url": "https://api.github.com/users/rwst/followers",
                "following_url": "https://api.github.com/users/rwst/following{/other_user}",
                "gists_url": "https://api.github.com/users/rwst/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rwst",
                "id": 1146709,
                "login": "rwst",
                "organizations_url": "https://api.github.com/users/rwst/orgs",
                "received_events_url": "https://api.github.com/users/rwst/received_events",
                "repos_url": "https://api.github.com/users/rwst/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rwst/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rwst/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rwst"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> See https://trac.sagemath.org/ticket/24255 for an example why this is a Cython bug that already hits users.\r\n\r\nWhat is the Cython bug? Can you be more clear please...",
            "created_at": "2017-11-25T09:24:04Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346929252",
            "id": 346929252,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T09:24:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346929252",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> If the semantics are not the same as in Python, file a bug.\r\n\r\nMy guess is that most people don't know the Python semantics and blame everything on Cython.",
            "created_at": "2017-11-25T09:34:02Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346929710",
            "id": 346929710,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T09:34:02Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346929710",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "OWNER",
            "body": "I've marked `__richcmp__()` as deprecated in the docs. That should solve this problem. It feels useless to repeat major parts of PEP 207 in the Cython docs if we can just refer to the normal Python docs of the comparison methods.",
            "created_at": "2017-11-25T11:07:31Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346933893",
            "id": 346933893,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T11:07:31Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346933893",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I've marked `__richcmp__()` as deprecated in the docs.\r\n\r\nWhy? I think the `__richcmp__` interface is much better than the 6 methods `__eq__` and friends. In SageMath, I even made a decorator to allow `__richcmp__` in pure Python classes.\r\n\r\nI can understand that some people might prefer `__eq__`, but deprecating `__richcmp__` sounds like a step too far.\r\n\r\n",
            "created_at": "2017-11-25T12:57:17Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346939066",
            "id": 346939066,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T13:34:55Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346939066",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "OWNER",
            "body": "I didn't say that we'd remove it (and it's certainly not the right time to think about that). I only wrote that people should use the normal Python way instead.\r\n\r\n> I think the `__richcmp__` interface is much better than the 6 methods `__eq__` and friends\r\n\r\nCould you elaborate? Having two interfaces towards the same functionality should be justified. What advantage does `__richcmp__()` have over the One Python Way to do it?",
            "created_at": "2017-11-25T13:34:45Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346940943",
            "id": 346940943,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T13:36:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346940943",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "> What is the Cython bug? Can you be more clear please...\r\n\r\nI was confused by Python2 old-style vs new-style classes.",
            "created_at": "2017-11-25T13:59:03Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346942180",
            "id": 346942180,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T13:59:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346942180",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1146709?v=4",
                "events_url": "https://api.github.com/users/rwst/events{/privacy}",
                "followers_url": "https://api.github.com/users/rwst/followers",
                "following_url": "https://api.github.com/users/rwst/following{/other_user}",
                "gists_url": "https://api.github.com/users/rwst/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/rwst",
                "id": 1146709,
                "login": "rwst",
                "organizations_url": "https://api.github.com/users/rwst/orgs",
                "received_events_url": "https://api.github.com/users/rwst/received_events",
                "repos_url": "https://api.github.com/users/rwst/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/rwst/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/rwst/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/rwst"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> What advantage does `__richcmp__()` have over the One Python Way to do it?\r\n\r\nBriefly, `__richcmp__` leads to less code duplication. Often, the six methods `__eq__` and friends will have a very similar implementation. So you end up writing mostly the same code six times.\r\n\r\nAlso, given that `__richcmp__` maps directly to the C API, it's probably faster too.",
            "created_at": "2017-11-25T21:12:03Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346966472",
            "id": 346966472,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T22:02:26Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346966472",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "OWNER",
            "body": "I wouldn't bring in the performance argument here. Either the implementation is so short that the overhead really matters, in which case there probably won't be any substantial code duplication and everything would just get inlined by the C compiler and result in exactly the same performance. Or the implementation is complex and duplicated, in which case the overhead probably doesn't matter and it won't make a difference either.\r\n\r\nI do, however, accept the argument that in complex cases, the implementation might really be so non-trivial and similar that a joined method reduces the overall code duplication and complexity.",
            "created_at": "2017-11-25T22:03:57Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346969163",
            "id": 346969163,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T22:03:57Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346969163",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> I do, however, accept the argument that in complex cases, the implementation might really be so non-trivial and similar that a joined method reduces the overall code duplication and complexity.\r\n\r\nThe code duplication is not limited to \"complex cases\". It is quite unlikely that `__lt__` and `__le__` and `__gt__` and `__ge__` are implemented very differently. Typically, they behave mostly the same. So you end up with code duplication.",
            "created_at": "2017-11-25T22:20:23Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346970047",
            "id": 346970047,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T22:20:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346970047",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> In SageMath, I even made a decorator to allow __richcmp__ in pure Python classes.\r\n\r\nLet me elaborate a bit on this: SageMath deals with mathematics, so comparisons are very important. SageMath did this mostly by implementing `__cmp__` and using `cmp()`. This obviously needed to be changed for Python 3 (in fact, I guess that this is probably the biggest Py3 porting issue of SageMath).\r\n\r\nOften, `__cmp__` methods look like this:\r\n```\r\ndef __cmp__(self, other):\r\n    x = (self.attr1, self.attr2)\r\n    y = (other.attr1, other.attr2)\r\n    return cmp(x, y)\r\n```\r\nNow it's easy to port this to `__richcmp__`:\r\n```\r\ndef __richcmp__(self, other, int op):\r\n    x = (self.attr1, self.attr2)\r\n    y = (other.attr1, other.attr2)\r\n    return PyObject_RichCompare(x, y, op)\r\n```\r\nBut if you want to do this in plain Python, you have to write the same thing six times.\r\n\r\nThis `__richcmp__` method calling `PyObject_RichCompare` turned out to be so convenient that we wanted to use the same thing in plain Python too. So I made a decorator `@richcmp_method` and a function `richcmp()` which allows you to write in plain Python\r\n```\r\n@richcmp_method\r\nclass Foo(object):\r\n    def __richcmp__(self, other, op):\r\n        x = (self.attr1, self.attr2)\r\n        y = (other.attr1, other.attr2)\r\n        return richcmp(x, y, op)\r\n```\r\n",
            "created_at": "2017-11-25T22:28:36Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346970421",
            "id": 346970421,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T22:28:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346970421",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "OWNER",
            "body": "Thanks for sharing. I can see that it makes more sense the more of these methods you implement. Most use cases will however only involve equality comparisons and not much more. There is probably a better way to express that in the docs than what I wrote.\n",
            "created_at": "2017-11-25T22:45:38Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346971194",
            "id": 346971194,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-25T22:45:38Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346971194",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> Most use cases will however only involve equality comparisons\r\n\r\nIn such a case, you would still want `__eq__` and `__ne__`. But that can be solved by\r\n```\r\ndef __ne__(self, other):\r\n    return not (self == other)\r\n```\r\nWhich makes me think... perhaps Cython should offer (a better) variant of `functools.total_order` (which is IMHO pretty badly implemented).",
            "created_at": "2017-11-26T07:59:13Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346991155",
            "id": 346991155,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-26T07:59:13Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346991155",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        },
        {
            "author_association": "OWNER",
            "body": "> In such a case, you would still want `__eq__` and `__ne__`\r\n\r\nhttps://github.com/cython/cython/blob/0.27.3/Cython/Compiler/ModuleNode.py#L1842\r\n\r\n> perhaps Cython should offer (a better) variant of `functools.total_order`\r\n\r\nSounds good to me. But I think we're getting out of scope for this (closed) ticket...",
            "created_at": "2017-11-26T08:09:21Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-346991616",
            "id": 346991616,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-11-26T08:09:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/346991616",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 16,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1848/comments",
    "created_at": "2017-08-29T18:21:46Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "2fc2cba0e4ef3a16e173bb9e423821480edd398a",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/2fc2cba0e4ef3a16e173bb9e423821480edd398a",
            "created_at": "2017-11-25T11:05:54Z",
            "event": "closed",
            "id": 1357795139,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1357795139"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-11-25T11:08:00Z",
            "event": "labeled",
            "id": 1357795607,
            "label": {
                "color": "444444",
                "name": "Documentation"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/1357795607"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1848/events",
    "html_url": "https://github.com/cython/cython/issues/1848",
    "id": 253758135,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425561345,
            "name": "Documentation",
            "url": "https://api.github.com/repos/cython/cython/labels/Documentation"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1848/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1848,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Behaviour of richcmp function need some additional explaining",
    "updated_at": "2017-11-26T08:09:21Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1848",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1274039?v=4",
        "events_url": "https://api.github.com/users/SleepProgger/events{/privacy}",
        "followers_url": "https://api.github.com/users/SleepProgger/followers",
        "following_url": "https://api.github.com/users/SleepProgger/following{/other_user}",
        "gists_url": "https://api.github.com/users/SleepProgger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/SleepProgger",
        "id": 1274039,
        "login": "SleepProgger",
        "organizations_url": "https://api.github.com/users/SleepProgger/orgs",
        "received_events_url": "https://api.github.com/users/SleepProgger/received_events",
        "repos_url": "https://api.github.com/users/SleepProgger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/SleepProgger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SleepProgger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/SleepProgger"
    }
}