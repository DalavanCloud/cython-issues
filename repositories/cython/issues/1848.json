{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "At the moment the behavior of the `__richcmp__` function isn't really clear, especially in regards to different types and unsupported comparisons..\r\n\r\nAccording to some testing i did:\r\n- If only one of components is a cdefed class AND has a `__richcmp__` function that function is used irregardless of the component order. If both components have a `__richcmp__` function the lefts components function is used.\r\n- If the comparison is not `==` or `!=` and the left component doesn't support richcmp the op is flipped (< to > and so on) and the richcmp function of the right side is used.\r\n\r\nIs this correct so far ?\r\n\r\nAlso the arithmetic functions support returning `NotImplemented` to signal that they do not support this operation on the given datatypes and the other side should be tried.\r\nIs there something similar for comparisons ?\r\n\r\nI have a Vector class for example, and only want to implement the == and != operations. How should that be handled ?\r\nSimply raise a NotImplementedError would kind of work, but prevents the other side from handling that operation if it is able to.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "OWNER",
            "body": "Now that `__eq__`, `__le__`, etc. are supported, they should be preferred to `__richcmp__`. If the semantics are not the same as in Python, file a bug. Possibly we should update our docs (PRs welcome).",
            "created_at": "2017-10-13T06:11:45Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-336359866",
            "id": 336359866,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-10-13T06:11:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/336359866",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "author_association": "CONTRIBUTOR",
            "body": "> At the moment the behavior of the `__richcmp__` function isn't really clear, especially in regards to different types and unsupported comparisons..\r\n\r\nIt's exactly the same as the `__eq__` methods and friends in plain Python, except that there is only 1 special method (`__richcmp__`) where the `op` argument denotes the operation. That's really the only difference.\r\n\r\nIf you want details of how rich comparisons work, I would refer to PEP 207: https://www.python.org/dev/peps/pep-0207/\r\n\r\n> If the comparison is not == or != and the left component doesn't support richcmp the op is flipped (< to > and so on) and the richcmp function of the right side is used.\r\n\r\nThis is documented in PEP 207\r\n\r\n> Is there something similar for comparisons ?\r\n\r\nAgain as documented in PEP 207, just `return NotImplemented`.",
            "created_at": "2017-10-18T19:51:15Z",
            "html_url": "https://github.com/cython/cython/issues/1848#issuecomment-337708054",
            "id": 337708054,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1848",
            "updated_at": "2017-10-18T19:51:15Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/337708054",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
                "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
                "followers_url": "https://api.github.com/users/jdemeyer/followers",
                "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
                "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jdemeyer",
                "id": 3625785,
                "login": "jdemeyer",
                "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
                "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
                "repos_url": "https://api.github.com/users/jdemeyer/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jdemeyer"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1848/comments",
    "created_at": "2017-08-29T18:21:46Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1848/events",
    "html_url": "https://github.com/cython/cython/issues/1848",
    "id": 253758135,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1848/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1848,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Behaviour of richcmp function need some additional explaining",
    "updated_at": "2017-10-18T19:51:15Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1848",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1274039?v=4",
        "events_url": "https://api.github.com/users/SleepProgger/events{/privacy}",
        "followers_url": "https://api.github.com/users/SleepProgger/followers",
        "following_url": "https://api.github.com/users/SleepProgger/following{/other_user}",
        "gists_url": "https://api.github.com/users/SleepProgger/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/SleepProgger",
        "id": 1274039,
        "login": "SleepProgger",
        "organizations_url": "https://api.github.com/users/SleepProgger/orgs",
        "received_events_url": "https://api.github.com/users/SleepProgger/received_events",
        "repos_url": "https://api.github.com/users/SleepProgger/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/SleepProgger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/SleepProgger/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/SleepProgger"
    }
}