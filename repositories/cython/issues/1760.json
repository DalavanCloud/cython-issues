{
    "assignee": null,
    "assignees": [],
    "body": "Sorry if the minimum example needed to reproduce is a bit long, I trimmed it down from ~2500 lines to ~250 but now removing almost any of the remaining lines of code \"fixes things\" and allows it to be cythonized?!\r\n\r\nWe've had issues with this same source file a few years back (circa Cython 0.23):\r\nhttps://mail.python.org/pipermail/cython-devel/2015-August/004492.html\r\nSo hopefully the fix will be similar.\r\n\r\nTo reproduce, just try to cythonize this with 0.26b0 (tested on Fedora 26 x86_64):\r\n```\r\nimport time\r\nfrom libc.stdint cimport uint8_t, uint16_t, uint32_t, int32_t, uint64_t\r\n\r\ncdef extern from \"nvEncodeAPI.h\":\r\n    ctypedef int NVENCSTATUS\r\n    ctypedef void* NV_ENC_INPUT_PTR\r\n    ctypedef void* NV_ENC_OUTPUT_PTR\r\n    ctypedef void* NV_ENC_REGISTERED_PTR\r\n\r\n    ctypedef enum NV_ENC_DEVICE_TYPE:\r\n        NV_ENC_DEVICE_TYPE_CUDA\r\n\r\n    ctypedef enum NV_ENC_INPUT_RESOURCE_TYPE:\r\n        NV_ENC_INPUT_RESOURCE_TYPE_DIRECTX\r\n        NV_ENC_INPUT_RESOURCE_TYPE_CUDADEVICEPTR\r\n        NV_ENC_INPUT_RESOURCE_TYPE_CUDAARRAY\r\n\r\n    ctypedef enum NV_ENC_BUFFER_FORMAT:\r\n        NV_ENC_BUFFER_FORMAT_UNDEFINED\r\n\r\n    ctypedef enum NV_ENC_PIC_FLAGS:\r\n        NV_ENC_PIC_FLAG_FORCEIDR\r\n        NV_ENC_PIC_FLAG_OUTPUT_SPSPPS\r\n\r\n    ctypedef enum NV_ENC_PIC_STRUCT:\r\n        NV_ENC_PIC_STRUCT_FRAME\r\n\r\n    ctypedef enum NV_ENC_PIC_TYPE:\r\n        NV_ENC_PIC_TYPE_P\r\n        NV_ENC_PIC_TYPE_IDR\r\n\r\n    ctypedef enum NV_ENC_SLICE_TYPE:\r\n        NV_ENC_SLICE_TYPE_DEFAULT\r\n        NV_ENC_SLICE_TYPE_I\r\n\r\n\r\n    ctypedef struct NV_ENC_LOCK_BITSTREAM:\r\n        uint32_t    reservedBitFields   \r\n        void*       outputBitstream     \r\n        uint32_t    bitstreamSizeInBytes\r\n        uint64_t    outputTimeStamp     \r\n        void*       bitstreamBufferPtr  \r\n        NV_ENC_PIC_TYPE     pictureType \r\n        NV_ENC_PIC_STRUCT   pictureStruct   \r\n\r\n    ctypedef struct NV_ENC_LOCK_INPUT_BUFFER:\r\n        NV_ENC_INPUT_PTR inputBuffer    \r\n        void*       bufferDataPtr       \r\n        uint32_t    pitch               \r\n\r\n    ctypedef struct NV_ENC_MAP_INPUT_RESOURCE:\r\n        void*       inputResource       \r\n        NV_ENC_REGISTERED_PTR registeredResource    \r\n        NV_ENC_INPUT_PTR mappedResource \r\n        NV_ENC_BUFFER_FORMAT mappedBufferFmt    \r\n\r\n    ctypedef struct GUID:\r\n        uint32_t Data1\r\n        uint16_t Data2\r\n        uint16_t Data3\r\n        uint8_t  Data4[8]\r\n\r\n    ctypedef struct NV_ENC_PIC_PARAMS_H264:\r\n        uint32_t    displayPOCSyntax    \r\n        uint32_t    refPicFlag          \r\n        uint32_t    colourPlaneId       \r\n\r\n    ctypedef union NV_ENC_CODEC_PIC_PARAMS:\r\n        NV_ENC_PIC_PARAMS_H264 h264PicParams    \r\n\r\n    ctypedef struct NV_ENC_PIC_PARAMS:\r\n        uint32_t    inputWidth          \r\n        uint32_t    inputHeight         \r\n        uint32_t    inputPitch          \r\n        uint32_t    encodePicFlags      \r\n        uint32_t    frameIdx            \r\n        uint64_t    inputTimeStamp      \r\n        NV_ENC_INPUT_PTR  inputBuffer   \r\n        NV_ENC_OUTPUT_PTR outputBitstream \r\n        NV_ENC_BUFFER_FORMAT bufferFmt  \r\n        NV_ENC_PIC_STRUCT pictureStruct \r\n        NV_ENC_PIC_TYPE pictureType     \r\n        NV_ENC_CODEC_PIC_PARAMS codecPicParams  \r\n\r\n    ctypedef NVENCSTATUS (*PNVENCENCODEPICTURE)             (void* encoder, NV_ENC_PIC_PARAMS* encodePicParams) nogil\r\n    ctypedef NVENCSTATUS (*PNVENCLOCKBITSTREAM)             (void* encoder, NV_ENC_LOCK_BITSTREAM* lockBitstreamBufferParams) nogil\r\n    ctypedef NVENCSTATUS (*PNVENCUNLOCKBITSTREAM)           (void* encoder, NV_ENC_OUTPUT_PTR bitstreamBuffer) nogil\r\n    ctypedef NVENCSTATUS (*PNVENCMAPINPUTRESOURCE)          (void* encoder, NV_ENC_MAP_INPUT_RESOURCE* mapInputResParams) nogil\r\n    ctypedef NVENCSTATUS (*PNVENCUNMAPINPUTRESOURCE)        (void* encoder, NV_ENC_INPUT_PTR mappedInputBuffer) nogil\r\n\r\n    ctypedef struct NV_ENCODE_API_FUNCTION_LIST:\r\n        PNVENCENCODEPICTURE             nvEncEncodePicture\r\n        PNVENCLOCKBITSTREAM             nvEncLockBitstream\r\n        PNVENCUNLOCKBITSTREAM           nvEncUnlockBitstream\r\n        PNVENCMAPINPUTRESOURCE          nvEncMapInputResource\r\n        PNVENCUNMAPINPUTRESOURCE        nvEncUnmapInputResource\r\n\r\n\r\ncdef class Encoder:\r\n    cdef unsigned int input_width\r\n    cdef unsigned int input_height\r\n    cdef unsigned int encoder_width\r\n    cdef unsigned int encoder_height\r\n    cdef object encoding\r\n    cdef object kernel\r\n    cdef NV_ENCODE_API_FUNCTION_LIST *functionList\r\n    cdef void *context\r\n    cdef GUID codec\r\n    cdef NV_ENC_REGISTERED_PTR inputHandle\r\n    cdef object inputBuffer\r\n    cdef object cudaInputBuffer\r\n    cdef object cudaOutputBuffer\r\n    cdef unsigned int inputPitch\r\n    cdef unsigned int outputPitch\r\n    cdef void *bitstreamBuffer\r\n    cdef NV_ENC_BUFFER_FORMAT bufferFmt\r\n    cdef uint64_t first_frame_timestamp\r\n    cdef unsigned long frames\r\n    cdef uint64_t bytes_out\r\n\r\n    cdef object __weakref__\r\n\r\n    cdef do_compress_image(self, image, options={}):\r\n        cdef NV_ENC_PIC_PARAMS picParams\r\n        cdef NV_ENC_MAP_INPUT_RESOURCE mapInputResource\r\n        cdef NV_ENC_LOCK_BITSTREAM lockOutputBuffer\r\n        cdef size_t size\r\n        cdef unsigned int x, y, stride\r\n        cdef unsigned int i\r\n        cdef NVENCSTATUS r\r\n        assert self.context, \"context is not initialized\"\r\n        start = time.time()\r\n        print(\"compress_image(%s, %s)\", image, options)\r\n        cdef unsigned int w = image.get_width()\r\n        cdef unsigned int h = image.get_height()\r\n        pixels = image.get_pixels()\r\n        cdef unsigned int image_stride = image.get_rowstride()\r\n        cdef unsigned long input_size = self.inputPitch * self.input_height\r\n\r\n        #copy to input buffer:\r\n        cdef object buf\r\n        buf = self.inputBuffer\r\n        cdef unsigned long pix_len = len(pixels)\r\n\r\n        cdef uint32_t blockw = 32\r\n        cdef uint32_t blockh = 32\r\n        cdef uint32_t gridw = w//(blockw)\r\n        cdef uint32_t gridh = h//(blockh)\r\n        if gridw*blockw<w:\r\n            gridw += 1\r\n        if gridh*blockh<h:\r\n            gridh += 1\r\n        cdef unsigned int in_w = self.input_width\r\n        cdef unsigned int in_h = self.input_height\r\n        if self.scaling!=(1,1):\r\n            in_w, in_h = w, h\r\n\r\n        csc_start = time.time()\r\n        args = (self.cudaInputBuffer, int(in_w), int(in_h), int(stride),\r\n               self.cudaOutputBuffer, int(self.encoder_width), int(self.encoder_height), int(self.outputPitch),\r\n               int(w), int(h))\r\n        print(\"calling %s%s with block=%s, grid=%s\", self.kernel, args, (blockw,blockh,1), (gridw, gridh))\r\n        self.kernel(*args, block=(blockw,blockh,1), grid=(gridw, gridh))\r\n        csc_end = time.time()\r\n        print(\"compress_image(..) kernel %s took %.1f ms\", self.kernel, (csc_end - csc_start)*1000.0)\r\n\r\n        r = self.functionList.nvEncMapInputResource(self.context, &mapInputResource)\r\n        cdef NV_ENC_INPUT_PTR mappedResource = mapInputResource.mappedResource\r\n\r\n        try:\r\n            picParams.bufferFmt = self.bufferFmt\r\n            picParams.pictureStruct = NV_ENC_PIC_STRUCT_FRAME\r\n            picParams.inputWidth = self.encoder_width\r\n            picParams.inputHeight = self.encoder_height\r\n            picParams.inputPitch = self.outputPitch\r\n            picParams.inputBuffer = mappedResource\r\n            picParams.outputBitstream = self.bitstreamBuffer\r\n            if self.frames==0:\r\n                picParams.pictureType = NV_ENC_PIC_TYPE_IDR\r\n                picParams.encodePicFlags = NV_ENC_PIC_FLAG_OUTPUT_SPSPPS\r\n            else:\r\n                picParams.pictureType = NV_ENC_PIC_TYPE_P\r\n            picParams.codecPicParams.h264PicParams.displayPOCSyntax = 2*self.frames\r\n            picParams.frameIdx = self.frames\r\n            picParams.inputTimeStamp = image.get_timestamp()-self.first_frame_timestamp\r\n\r\n            with nogil:\r\n                r = self.functionList.nvEncEncodePicture(self.context, &picParams)\r\n            encode_end = time.time()\r\n\r\n            lockOutputBuffer.outputBitstream = self.bitstreamBuffer\r\n            with nogil:\r\n                r = self.functionList.nvEncLockBitstream(self.context, &lockOutputBuffer)\r\n            size = lockOutputBuffer.bitstreamSizeInBytes\r\n            self.bytes_out += size\r\n        finally:\r\n            if lockOutputBuffer.bitstreamBufferPtr!=NULL:\r\n                with nogil:\r\n                    r = self.functionList.nvEncUnlockBitstream(self.context, self.bitstreamBuffer)\r\n            with nogil:\r\n                r = self.functionList.nvEncUnmapInputResource(self.context, mapInputResource.mappedResource)\r\n        return None\r\n```",
    "closed_at": "2017-07-06T06:19:03Z",
    "comment_data": [
        {
            "body": "Thanks. Looks like this is a duplicate of #1744. Oddly, everyone seems to be able to reproduce this but me (the above code works fine). ",
            "created_at": "2017-07-06T06:19:03Z",
            "html_url": "https://github.com/cython/cython/issues/1760#issuecomment-313306343",
            "id": 313306343,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1760",
            "updated_at": "2017-07-06T06:19:03Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/313306343",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1760/comments",
    "created_at": "2017-07-06T05:52:49Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-07-06T06:19:03Z",
            "event": "closed",
            "id": 1152127027,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1152127027"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1760/events",
    "html_url": "https://github.com/cython/cython/issues/1760",
    "id": 240851476,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1760/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1760,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "0.26b0 fresh_finally_clause: maximum recursion depth exceeded",
    "updated_at": "2017-07-06T06:19:04Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1760",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/1049737?v=3",
        "events_url": "https://api.github.com/users/totaam/events{/privacy}",
        "followers_url": "https://api.github.com/users/totaam/followers",
        "following_url": "https://api.github.com/users/totaam/following{/other_user}",
        "gists_url": "https://api.github.com/users/totaam/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/totaam",
        "id": 1049737,
        "login": "totaam",
        "organizations_url": "https://api.github.com/users/totaam/orgs",
        "received_events_url": "https://api.github.com/users/totaam/received_events",
        "repos_url": "https://api.github.com/users/totaam/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/totaam/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/totaam/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/totaam"
    }
}