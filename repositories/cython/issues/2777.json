{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "I often use a simple for-loop to operate variables in Python.\r\n\r\n```python\r\nfor v in [a, b, c]:\r\n    func1(v)\r\n    func2(v)\r\n    func3(v)\r\n    ...\r\n```\r\n\r\nIn Cython, it will be more readable when doing `None` checking or condition checking:\r\n\r\n```python\r\nfor e in [e1, e2, e3]:\r\n    if e is None or e.type_case != MY_TYPE:\r\n        raise TypeError(...)\r\n```\r\n\r\nThe \"simple for-loop\" needs to converted into expanded expression in C/C++ implementation without to create an actual container object (`list`, `tuple`, `set`) to iterate it.\r\n\r\n```python\r\n# Expanded as:\r\nif e1 is None or e1.type_case != MY_TYPE:\r\n    raise TypeError(...)\r\nif e2 is None or e2.type_case != MY_TYPE:\r\n    raise TypeError(...)\r\nif e3 is None or e3.type_case != MY_TYPE:\r\n    raise TypeError(...)\r\n```\r\n\r\nThe cases maybe like:\r\n\r\n```python\r\n# \"a, b, c\" must be the same type or object\r\n# If \"v\" is not typed, try to convert them into object.\r\n# If you use \"v\" in the external scope, optimization will be disabled.\r\n# If there has \"break\" or \"continue\" keywords, optimization will be disabled.\r\ncdef type_of_abc v\r\nfor v in [a, b, c]:\r\n    ...\r\nfor v in (a, b, c):\r\n    ...\r\nfor v in {a, b, c}:\r\n    ...\r\n```",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "The case with `enumerate` or other counter variable:\r\n\r\n```python\r\ncdef int i\r\ncdef int counter = 5\r\ncdef type_of_abc v\r\nfor i, v in enumerate([a, b, c]):\r\n    func(i, v)\r\n    counter += 2\r\n\r\n# Expanded as:\r\ncdef int i\r\ncdef int counter = 5\r\ni = 0\r\nfunc(i, a)\r\ncounter += 2\r\ni += 1\r\nfunc(i, b)\r\ncounter += 2\r\ni += 1\r\nfunc(i, c)\r\ncounter += 2\r\n```",
            "created_at": "2019-01-02T09:29:32Z",
            "html_url": "https://github.com/cython/cython/issues/2777#issuecomment-450818091",
            "id": 450818091,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2777",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDgxODA5MQ==",
            "updated_at": "2019-01-02T09:30:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/450818091",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/10264720?v=4",
                "events_url": "https://api.github.com/users/KmolYuan/events{/privacy}",
                "followers_url": "https://api.github.com/users/KmolYuan/followers",
                "following_url": "https://api.github.com/users/KmolYuan/following{/other_user}",
                "gists_url": "https://api.github.com/users/KmolYuan/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/KmolYuan",
                "id": 10264720,
                "login": "KmolYuan",
                "node_id": "MDQ6VXNlcjEwMjY0NzIw",
                "organizations_url": "https://api.github.com/users/KmolYuan/orgs",
                "received_events_url": "https://api.github.com/users/KmolYuan/received_events",
                "repos_url": "https://api.github.com/users/KmolYuan/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/KmolYuan/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/KmolYuan/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/KmolYuan"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Related to, if not a duplicate of, #2117. The potential gain is likely small, but it would avoid a tuple creation for non-constant values.\r\n\r\nI don't really see an advantage in unrolling the loop in Cython. Once the C compiler can see that this is a loop over a C array, it can take that decision much better than Cython. The only exception is the case where a/b/c have very different types, especially native C types, so that Cython could specialise the code for each of them. However, given that the code uses a loop, this seems not so likely (to me).",
            "created_at": "2019-01-02T09:44:45Z",
            "html_url": "https://github.com/cython/cython/issues/2777#issuecomment-450821133",
            "id": 450821133,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2777",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDgyMTEzMw==",
            "updated_at": "2019-01-02T09:44:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/450821133",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2777/comments",
    "created_at": "2019-01-02T09:10:16Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-01-02T09:44:42Z",
            "event": "labeled",
            "id": 2050022136,
            "label": {
                "color": "c2e0c6",
                "name": "feature"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDIwNTAwMjIxMzY=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2050022136"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2019-01-02T09:44:42Z",
            "event": "labeled",
            "id": 2050022137,
            "label": {
                "color": "444444",
                "name": "Optimization"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDIwNTAwMjIxMzc=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/2050022137"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2777/events",
    "html_url": "https://github.com/cython/cython/issues/2777",
    "id": 395185226,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425556272,
            "name": "Optimization",
            "node_id": "MDU6TGFiZWw0MjU1NTYyNzI=",
            "url": "https://api.github.com/repos/cython/cython/labels/Optimization"
        },
        {
            "color": "c2e0c6",
            "default": false,
            "id": 414805463,
            "name": "feature",
            "node_id": "MDU6TGFiZWw0MTQ4MDU0NjM=",
            "url": "https://api.github.com/repos/cython/cython/labels/feature"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2777/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzOTUxODUyMjY=",
    "number": 2777,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Automatic expand simple for-loop from a literal container",
    "updated_at": "2019-01-02T09:44:45Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2777",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/10264720?v=4",
        "events_url": "https://api.github.com/users/KmolYuan/events{/privacy}",
        "followers_url": "https://api.github.com/users/KmolYuan/followers",
        "following_url": "https://api.github.com/users/KmolYuan/following{/other_user}",
        "gists_url": "https://api.github.com/users/KmolYuan/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/KmolYuan",
        "id": 10264720,
        "login": "KmolYuan",
        "node_id": "MDQ6VXNlcjEwMjY0NzIw",
        "organizations_url": "https://api.github.com/users/KmolYuan/orgs",
        "received_events_url": "https://api.github.com/users/KmolYuan/received_events",
        "repos_url": "https://api.github.com/users/KmolYuan/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/KmolYuan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/KmolYuan/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/KmolYuan"
    }
}