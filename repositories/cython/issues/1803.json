{
    "assignee": null,
    "assignees": [],
    "body": "Downstream issue: SFTtech/openage#863\r\nPython version: Python 3.5\r\n\r\nWhen UTF-8 characters are in paths that are generated for header includes, code generation fails.\r\nIn our particular case, a user downloaded the project to `/home/xiaoji/桌面/openage`.\r\nCython modules in there include header files and the absolute filenames create things like:\r\n`#include /home/xiaoji/桌面/openage/libopenage/pyinterface/pyobject.h`.\r\n\r\n``` python\r\n    def generate_includes(self, env, cimported_modules, code):\r\n        includes = []\r\n        for filename in env.include_files:\r\n            byte_decoded_filenname = str(filename)\r\n            if byte_decoded_filenname[0] == '<' and byte_decoded_filenname[-1] == '>':\r\n                code.putln('#include %s' % byte_decoded_filenname)\r\n            else:\r\n                code.putln('#include \"%s\"' % byte_decoded_filenname)\r\n\r\n    code.putln_openmp(\"#include <omp.h>\")\r\n```\r\n\r\nStrictly speaking, `byte_decoded_filename` seems to be the wrong name, as `str` is not byte-decoded at all on Python3. Maybe that's the bug.\r\n\r\n\r\nThe Cython output file is [always opened in ISO-8859-1 encoding](https://github.com/cython/cython/blob/55af254cd711b12a35ed87ebea7de8c45a5e8af2/Cython/Utils.py#L53).\r\n\r\nThe above function uses `str(filename)` to contain the included path.\r\nWhen this string is written to the file opened with `codecs.open(path, \"w\", encoding=\"ISO-8859-1\")`,\r\nthe unicode string can't be written to iso8859.\r\n\r\nThis means, when the generated file content is written to the output file, it crashes cython because of encoding errors.\r\n\r\n```\r\n[1/8] Cythonizing /home/xiaoji/桌面/openage-master/openage/cppinterface/setup_checker.pyx\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.5/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/xiaoji/桌面/openage-master/buildsystem/cythonize.py\", line 97, in <module>\r\n    main()\r\n  File \"/home/xiaoji/桌面/openage-master/buildsystem/cythonize.py\", line 74, in main\r\n    cythonize(modules, language='c++')\r\n  File \"/usr/lib/python3/dist-packages/Cython/Build/Dependencies.py\", line 934, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Build/Dependencies.py\", line 1039, in cythonize_one\r\n    result = compile([pyx_file], options)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Main.py\", line 686, in compile\r\n    return compile_multiple(source, options)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Main.py\", line 664, in compile_multiple\r\n    result = run_pipeline(source, options, context=context)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Main.py\", line 494, in run_pipeline\r\n    err, enddata = Pipeline.run_pipeline(pipeline, source)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Pipeline.py\", line 340, in run_pipeline\r\n    data = phase(data)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Pipeline.py\", line 53, in generate_pyx_code_stage\r\n    module_node.process_implementation(options, result)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/ModuleNode.py\", line 137, in process_implementation\r\n    self.generate_c_code(env, options, result)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/ModuleNode.py\", line 389, in generate_c_code\r\n    rootwriter.copyto(f)\r\n  File \"Cython/Compiler/Code.py\", line 1583, in Cython.Compiler.Code.CCodeWriter.copyto (/build/cython-0.25.2/Cython/Compiler/Code.c:43802)\r\n  File \"/usr/lib/python3/dist-packages/Cython/StringIOTree.py\", line 29, in copyto\r\n    child.copyto(target)\r\n  File \"/usr/lib/python3/dist-packages/Cython/StringIOTree.py\", line 32, in copyto\r\n    target.write(stream_content)\r\n  File \"/usr/lib/python3.5/codecs.py\", line 718, in write\r\n    return self.writer.write(data)\r\n  File \"/usr/lib/python3.5/codecs.py\", line 376, in write\r\n    data, consumed = self.encode(object, self.errors)\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 16271-16272: ordinal not in range(256)\r\n```\r\n\r\nThe \"ordinal not in range\" is the chinese codepoint of an include: `#include \"/home/xiaoji/桌面/openage-master/libopenage/pyinterface/functional.h\"`\r\n\r\nI can reproduce the problem on my Gentoo with `LANG=en_US.UTF-8`, which doesn't matter as the output file encoding is always `iso8859-1`.\r\n\r\nPossible solutions I can think of:\r\n* Write the output file with `open(file, \"wb\")` => requires creating a `bytestring` code output, currently crashes with `a bytes-like object is required, not 'str'` when `StringIOTree.py:32` does `target.write(stream_content)`\r\n* Write the output file with `open(file, \"w\")` => use the system locale for encoding the code\r\n* Encode the header file paths as `bytestring`s, as only they seem to be the problem (the code writer works on `str` internally I think, so that's hard to achieve)\r\n\r\nWhich solution would you propose so I can try to fix the problem?",
    "closed_at": null,
    "comment_data": [
        {
            "body": "Thanks for the report, I agree that the string feature detection that is currently used is a rather 'sub-optimal' way to do it.\r\n\r\nBasically, it should write byte strings (`isinstance(bytes)`) as they are, byte for byte, and encode everything else (i.e. unicode strings) with the filename encoding that Python provides. The main problem is, however, that the C files are commonly generated locally and shipped to users, which means that, once generated, they have to be compilable on arbitrary systems with arbitrary file system encodings. For that to work, I think it's imperative that Cython tries harder to use paths relative to the project root instead of absolute paths wherever possible. That is the best fix here.",
            "created_at": "2017-08-02T06:47:52Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-319583536",
            "id": 319583536,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-02T06:47:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/319583536",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "body": "The latter would only fix the symptom, but not the cause: If your project somehow has uft8-pathnames, the relative includes won't help.\r\n\r\nIf the files are to be distributed, you can't do much other than writing `bytes` and expect that the byte encoding of a path on the target machine is the same, as the exported file will be \"baked\" anyway and the C compiler has to go on its own from there.\r\n\r\nSo only writing byte strings seems to be the only correct solution, and the easy \"implementation\" of this would be writing to a regular `open(file, \"w\")`. Then the read-by-cython encoded input is written with the encoding that python provides with the current locale, or am I wrong there?",
            "created_at": "2017-08-03T15:21:53Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-320001778",
            "id": 320001778,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-03T15:21:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/320001778",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/673543?v=4",
                "events_url": "https://api.github.com/users/TheJJ/events{/privacy}",
                "followers_url": "https://api.github.com/users/TheJJ/followers",
                "following_url": "https://api.github.com/users/TheJJ/following{/other_user}",
                "gists_url": "https://api.github.com/users/TheJJ/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/TheJJ",
                "id": 673543,
                "login": "TheJJ",
                "organizations_url": "https://api.github.com/users/TheJJ/orgs",
                "received_events_url": "https://api.github.com/users/TheJJ/received_events",
                "repos_url": "https://api.github.com/users/TheJJ/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/TheJJ/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/TheJJ/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/TheJJ"
            }
        },
        {
            "body": "Is there a reason the Cython output files can't always be written in UTF-8?",
            "created_at": "2017-08-03T16:09:52Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-320016050",
            "id": 320016050,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-03T16:09:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/320016050",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/307683?v=4",
                "events_url": "https://api.github.com/users/codewarrior0/events{/privacy}",
                "followers_url": "https://api.github.com/users/codewarrior0/followers",
                "following_url": "https://api.github.com/users/codewarrior0/following{/other_user}",
                "gists_url": "https://api.github.com/users/codewarrior0/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/codewarrior0",
                "id": 307683,
                "login": "codewarrior0",
                "organizations_url": "https://api.github.com/users/codewarrior0/orgs",
                "received_events_url": "https://api.github.com/users/codewarrior0/received_events",
                "repos_url": "https://api.github.com/users/codewarrior0/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/codewarrior0/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/codewarrior0/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/codewarrior0"
            }
        },
        {
            "body": "I'm guessing the reason has to do with compiler support.\r\n\r\nThe C standard says that a source file must be encoded using a *source character set*, the choice of which is implementation-defined (**5.2.1**). I'd imagine that various compilers have different definitions for the source character set - GCC, for example, uses UTF-8. (Latin-1 is not a subset of UTF-8.) Notably, MSVC uses UTF-16 or UTF-8 according to the byte-order mark at the beginning of the file, if any, otherwise falls back to the ANSI codepage corresponding to the user's locale setting. (This codepage will only be identical to Latin-1 for a subset of users.)\r\n\r\nBut since the standard does specify a single character set for the source file, writing bytestrings with an arbitrary encoding will inevitably be wrong when the bytestring's encoding doesn't match the source encoding. \r\n\r\nTo be standard-compliant, Cython should output only bytes that encode text using the source character set - or in Python-ese, it should only open the output file with a defined encoding (`codecs.open()` or `io.open()`) and only write Unicode text to the file (`unicode` type on Python 2, `str` type on Python 3). But for that to work, Cython needs to know what the source character set is. And if it's a design goal that Cython output created on one system should work on another system (that may have a completely different compiler), then we can only output using a character set that is a subset of all possible source character sets - which will be ASCII, not Latin-1.\r\n\r\nNote that the *header-name* element of an `#include` statement is specified to use the source character set (**A.1.8**). Writing bytestrings with arbitrary encoding *may* work for a compiler (preprocessor) that reads the filenames from an `#include` statement  as bytes without doing any character set decoding/encoding, but it will not be standard-compliant.  I'd expect any other compilers to either throw a \"cannot decode bytes\" error or to decode the bytes incorrectly if the encodings do not match.\r\n\r\nThe way I see it, the only way to be standard-compliant *and* work across various compilers is to stick to ASCII. Which means Cython can try to be compatible by using relative filenames, but the user whose project has filenames that cannot be ASCII-encoded will have to change his filenames.",
            "created_at": "2017-08-03T16:59:36Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-320029352",
            "id": 320029352,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-03T17:02:09Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/320029352",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/307683?v=4",
                "events_url": "https://api.github.com/users/codewarrior0/events{/privacy}",
                "followers_url": "https://api.github.com/users/codewarrior0/followers",
                "following_url": "https://api.github.com/users/codewarrior0/following{/other_user}",
                "gists_url": "https://api.github.com/users/codewarrior0/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/codewarrior0",
                "id": 307683,
                "login": "codewarrior0",
                "organizations_url": "https://api.github.com/users/codewarrior0/orgs",
                "received_events_url": "https://api.github.com/users/codewarrior0/received_events",
                "repos_url": "https://api.github.com/users/codewarrior0/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/codewarrior0/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/codewarrior0/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/codewarrior0"
            }
        },
        {
            "body": "> Is there a reason the Cython output files can't always be written in UTF-8?\r\n\r\nString literals are stored as escaped UTF-8, but but literal file paths in the C file (i.e. include paths) are not \"normal\" strings. Not all file systems use UTF-8, and C does not have Unicode support. C file names are always passed directly to the operating system as exactly the byte sequence in which they are written. And if you encode a non-ASCII file path in UTF-8 in one system and try to compile the file that includes it on another system with a Latin-1 file system encoding, it will happily fail to find the file.\r\n\r\n> If your project somehow has uft8-pathnames, the relative includes won't help.\r\n\r\nIf your project has non-utf8 file paths, it's probably not something you would want to pass on to others anyway, for exactly the reasons you give. It's 2017, and these things still go wrong somewhere for someone.\r\n\r\n> So only writing byte strings seems to be the only correct solution\r\n\r\n*Unless* what you get from the code that triggers the compilation is Unicode strings as file paths, which is generally the case in Py3. Thus the two steps: a) encoding Unicode file paths with the file system encoding, and then b) use relative paths to limit the risk of file path encoding mismatches.",
            "created_at": "2017-08-03T17:02:27Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-320030120",
            "id": 320030120,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-03T17:02:27Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/320030120",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "body": "> C file names are always passed directly to the operating system as exactly the byte sequence in which they are written.\r\n\r\nOk, I can see that you looked that up and it's apparently not even as simple as I thought. But at least you get to the same conclusion in the end. ;)",
            "created_at": "2017-08-03T17:07:17Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-320031304",
            "id": 320031304,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-03T17:07:17Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/320031304",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "body": "NB: A filename on Linux is defined to be a sequence of bytes. So I'd expect a compiler on Linux to happily ignore any difference between the source character set and the locale-specified filesystem encoding and just use the bytes between `#include \"` and `\"`.\r\n\r\nBut on OS X and Windows, a filename is defined as a sequence of Unicode characters. Filesystem APIs expect the filename encoded in UTF-8 and UTF-16 respectively, and there I'd expect compilers to do a little transcoding between the source character set and the filesystem character encoding.",
            "created_at": "2017-08-03T17:07:45Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-320031418",
            "id": 320031418,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-03T17:07:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/320031418",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/307683?v=4",
                "events_url": "https://api.github.com/users/codewarrior0/events{/privacy}",
                "followers_url": "https://api.github.com/users/codewarrior0/followers",
                "following_url": "https://api.github.com/users/codewarrior0/following{/other_user}",
                "gists_url": "https://api.github.com/users/codewarrior0/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/codewarrior0",
                "id": 307683,
                "login": "codewarrior0",
                "organizations_url": "https://api.github.com/users/codewarrior0/orgs",
                "received_events_url": "https://api.github.com/users/codewarrior0/received_events",
                "repos_url": "https://api.github.com/users/codewarrior0/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/codewarrior0/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/codewarrior0/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/codewarrior0"
            }
        },
        {
            "body": "BTW, since it's slightly related: at least for module names there's PEP 489 now:\r\n\"\"\"\r\nFor module names containing non-ASCII characters, the import hook is named PyInitU_<encodedname>, where the name is encoded using CPython's \"punycode\" encoding (Punycode [4] with a lowercase suffix), with hyphens (\"-\") replaced by underscores (\"_\").\r\n\"\"\"\r\nhttps://www.python.org/dev/peps/pep-0489/#export-hook-name\r\n\r\nThis doesn't help with included files (or anything else at the C compilation level), but at least non-ASCII packages and module names can be made to work (only in Py3.5+) if this got implemented in Cython. We currently restrict module names to ASCII explicitly.",
            "created_at": "2017-08-03T17:25:32Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-320035865",
            "id": 320035865,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-03T17:25:32Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/320035865",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 8,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1803/comments",
    "created_at": "2017-08-01T23:24:36Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1803/events",
    "html_url": "https://github.com/cython/cython/issues/1803",
    "id": 247230811,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1803/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1803,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Code generation fails if uft8 is in pathnames",
    "updated_at": "2017-08-03T17:25:32Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1803",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/673543?v=4",
        "events_url": "https://api.github.com/users/TheJJ/events{/privacy}",
        "followers_url": "https://api.github.com/users/TheJJ/followers",
        "following_url": "https://api.github.com/users/TheJJ/following{/other_user}",
        "gists_url": "https://api.github.com/users/TheJJ/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/TheJJ",
        "id": 673543,
        "login": "TheJJ",
        "organizations_url": "https://api.github.com/users/TheJJ/orgs",
        "received_events_url": "https://api.github.com/users/TheJJ/received_events",
        "repos_url": "https://api.github.com/users/TheJJ/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/TheJJ/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TheJJ/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/TheJJ"
    }
}