{
    "assignee": null,
    "assignees": [],
    "body": "Downstream issue: SFTtech/openage#863\r\nPython version: Python 3.5\r\n\r\nWhen UTF-8 characters are in paths that are generated for header includes, code generation fails.\r\nIn our particular case, a user downloaded the project to `/home/xiaoji/桌面/openage`.\r\nCython modules in there include header files and the absolute filenames create things like:\r\n`#include /home/xiaoji/桌面/openage/libopenage/pyinterface/pyobject.h`.\r\n\r\n``` python\r\n    def generate_includes(self, env, cimported_modules, code):\r\n        includes = []\r\n        for filename in env.include_files:\r\n            byte_decoded_filenname = str(filename)\r\n            if byte_decoded_filenname[0] == '<' and byte_decoded_filenname[-1] == '>':\r\n                code.putln('#include %s' % byte_decoded_filenname)\r\n            else:\r\n                code.putln('#include \"%s\"' % byte_decoded_filenname)\r\n\r\n    code.putln_openmp(\"#include <omp.h>\")\r\n```\r\n\r\nStrictly speaking, `byte_decoded_filename` seems to be the wrong name, as `str` is not byte-decoded at all on Python3. Maybe that's the bug.\r\n\r\n\r\nThe Cython output file is [always opened in ISO-8859-1 encoding](https://github.com/cython/cython/blob/55af254cd711b12a35ed87ebea7de8c45a5e8af2/Cython/Utils.py#L53).\r\n\r\nThe above function uses `str(filename)` to contain the included path.\r\nWhen this string is written to the file opened with `codecs.open(path, \"w\", encoding=\"ISO-8859-1\")`,\r\nthe unicode string can't be written to iso8859.\r\n\r\nThis means, when the generated file content is written to the output file, it crashes cython because of encoding errors.\r\n\r\n```\r\n[1/8] Cythonizing /home/xiaoji/桌面/openage-master/openage/cppinterface/setup_checker.pyx\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.5/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/lib/python3.5/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/xiaoji/桌面/openage-master/buildsystem/cythonize.py\", line 97, in <module>\r\n    main()\r\n  File \"/home/xiaoji/桌面/openage-master/buildsystem/cythonize.py\", line 74, in main\r\n    cythonize(modules, language='c++')\r\n  File \"/usr/lib/python3/dist-packages/Cython/Build/Dependencies.py\", line 934, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Build/Dependencies.py\", line 1039, in cythonize_one\r\n    result = compile([pyx_file], options)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Main.py\", line 686, in compile\r\n    return compile_multiple(source, options)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Main.py\", line 664, in compile_multiple\r\n    result = run_pipeline(source, options, context=context)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Main.py\", line 494, in run_pipeline\r\n    err, enddata = Pipeline.run_pipeline(pipeline, source)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Pipeline.py\", line 340, in run_pipeline\r\n    data = phase(data)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/Pipeline.py\", line 53, in generate_pyx_code_stage\r\n    module_node.process_implementation(options, result)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/ModuleNode.py\", line 137, in process_implementation\r\n    self.generate_c_code(env, options, result)\r\n  File \"/usr/lib/python3/dist-packages/Cython/Compiler/ModuleNode.py\", line 389, in generate_c_code\r\n    rootwriter.copyto(f)\r\n  File \"Cython/Compiler/Code.py\", line 1583, in Cython.Compiler.Code.CCodeWriter.copyto (/build/cython-0.25.2/Cython/Compiler/Code.c:43802)\r\n  File \"/usr/lib/python3/dist-packages/Cython/StringIOTree.py\", line 29, in copyto\r\n    child.copyto(target)\r\n  File \"/usr/lib/python3/dist-packages/Cython/StringIOTree.py\", line 32, in copyto\r\n    target.write(stream_content)\r\n  File \"/usr/lib/python3.5/codecs.py\", line 718, in write\r\n    return self.writer.write(data)\r\n  File \"/usr/lib/python3.5/codecs.py\", line 376, in write\r\n    data, consumed = self.encode(object, self.errors)\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 16271-16272: ordinal not in range(256)\r\n```\r\n\r\nThe \"ordinal not in range\" is the chinese codepoint of an include: `#include \"/home/xiaoji/桌面/openage-master/libopenage/pyinterface/functional.h\"`\r\n\r\nI can reproduce the problem on my Gentoo with `LANG=en_US.UTF-8`, which doesn't matter as the output file encoding is always `iso8859-1`.\r\n\r\nPossible solutions I can think of:\r\n* Write the output file with `open(file, \"wb\")` => requires creating a `bytestring` code output, currently crashes with `a bytes-like object is required, not 'str'` when `StringIOTree.py:32` does `target.write(stream_content)`\r\n* Write the output file with `open(file, \"w\")` => use the system locale for encoding the code\r\n* Encode the header file paths as `bytestring`s, as only they seem to be the problem (the code writer works on `str` internally I think, so that's hard to achieve)\r\n\r\nWhich solution would you propose so I can try to fix the problem?",
    "closed_at": null,
    "comment_data": [
        {
            "body": "Thanks for the report, I agree that the string feature detection that is currently used is a rather 'sub-optimal' way to do it.\r\n\r\nBasically, it should write byte strings (`isinstance(bytes)`) as they are, byte for byte, and encode everything else (i.e. unicode strings) with the filename encoding that Python provides. The main problem is, however, that the C files are commonly generated locally and shipped to users, which means that, once generated, they have to be compilable on arbitrary systems with arbitrary file system encodings. For that to work, I think it's imperative that Cython tries harder to use paths relative to the project root instead of absolute paths wherever possible. That is the best fix here.",
            "created_at": "2017-08-02T06:47:52Z",
            "html_url": "https://github.com/cython/cython/issues/1803#issuecomment-319583536",
            "id": 319583536,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1803",
            "updated_at": "2017-08-02T06:47:52Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/319583536",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1803/comments",
    "created_at": "2017-08-01T23:24:36Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1803/events",
    "html_url": "https://github.com/cython/cython/issues/1803",
    "id": 247230811,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1803/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1803,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Code generation fails if uft8 is in pathnames",
    "updated_at": "2017-08-02T06:47:52Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1803",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/673543?v=4",
        "events_url": "https://api.github.com/users/TheJJ/events{/privacy}",
        "followers_url": "https://api.github.com/users/TheJJ/followers",
        "following_url": "https://api.github.com/users/TheJJ/following{/other_user}",
        "gists_url": "https://api.github.com/users/TheJJ/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/TheJJ",
        "id": 673543,
        "login": "TheJJ",
        "organizations_url": "https://api.github.com/users/TheJJ/orgs",
        "received_events_url": "https://api.github.com/users/TheJJ/received_events",
        "repos_url": "https://api.github.com/users/TheJJ/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/TheJJ/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TheJJ/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/TheJJ"
    }
}