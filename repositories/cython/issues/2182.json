{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Hi,\r\nI am trying to wrap a piece of cpp code with cython and I have been facing some issues with function call operator overloading. I would like to know whether it is possible to do something like this in Cython and if so, what is the way to do it.\r\n\r\nThis is my **grid.h**\r\n\r\n```cpp\r\n\r\n#include <iostream>\r\n#include <cstring>\r\n#include <memory>\r\n#include <vector>\r\n\r\ntemplate <typename T>\r\nclass Grid {\r\n  protected:\r\n    std::shared_ptr<std::vector<T> > pvec;\r\n    int nx;\r\n    long long n;\r\n    double h;\r\n    double hx;\r\n    double ox;\r\n    double ex;\r\n    T zeroValue;\r\n  public:\r\n    Grid():\r\n      nx(1),n(0),\r\n      h(0.0),hx(0.0),ox(0.0),ex(0.0),\r\n      zeroValue(){\r\n      }\r\n\r\n    ~Grid(){\r\n    }\r\n\r\n    void clear(){\r\n      if (pvec) pvec->clear();\r\n      ox = 0.0;\r\n      hx = 0.0;\r\n      ex = 0.0;\r\n      nx = 1;\r\n      zeroValue = T();\r\n    }\r\n\r\n    bool init(int snx, double shx, double sox = 0.0){\r\n      if (pvec) pvec->clear();\r\n      if (shx < 0.0) return false;\r\n      if (snx <= 0) snx = 1;\r\n      ox = sox;\r\n      nx = snx;\r\n      hx = shx;\r\n      ex = ox + (double)nx * hx;\r\n      h = hx;\r\n      n = (long long)nx;\r\n      try {\r\n        pvec = std::make_shared<std::vector<T> >();\r\n        (*pvec).resize(n, zeroValue);\r\n      } catch(std::length_error& e) {\r\n        std::cout << \"Cannot allocate memory\" << std::endl;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    inline T& operator()(int i){\r\n      if ((i >= 0) && (i <= nx - 1)){\r\n        return (*pvec)[i];\r\n      } else {\r\n        return zeroValue;\r\n      }\r\n    }\r\n};\r\n```\r\n\r\nand this is my cython pxd file **cy_grid.pxd**\r\n\r\n```pyrex\r\ncimport numpy as np\r\nfrom libcpp.vector cimport vector\r\nfrom libcpp.memory cimport shared_ptr\r\nfrom libcpp cimport bool\r\n\r\ncdef extern from \"grid.h\":\r\n    cdef cppclass Grid[T]:\r\n        Grid() except +\r\n        bool init(int snx, double shx, double sox)\r\n        void clear()\r\n        inline T& call \"operator()\"(int i)\r\n\r\ncdef class cyGrid:\r\n    cdef Grid[double] *thisptr\r\n```\r\n\r\nand the pyx file \"cy_grid.pyx\"\r\n\r\n```pyrex\r\n#distutils: language=c++\r\n#cython: boundscheck=False\r\n#cython: wraparound=False\r\n#cython: nonecheck=False\r\n#cython: embedsignature=False\r\n\r\ncimport numpy as np\r\nfrom cy_grid cimport *\r\nfrom libcpp cimport bool\r\n\r\nnp.import_array()\r\n\r\ncdef class cyGrid(object):\r\n    def __cinit__(self):\r\n        self.thisptr = new Grid[double]()\r\n\r\n    def init(self, int snx, double shx, double sox):\r\n        self.thisptr.init(snx, shx, sox = sox)\r\n\r\n    def set(self, double[:] inp):\r\n        cdef int nx, i\r\n        nx = inp.shape[0]\r\n        for i in range(0, nx, 1):\r\n            self.thisptr.call(i) = inp[i]\r\n\r\n    def clear(self):\r\n        self.thisptr.clear()\r\n\r\n    def __dealloc__(self):\r\n        self.clear()\r\n        del self.thisptr\r\n\r\n    def __exit__(self):\r\n        self.__dealloc__()\r\n```\r\n\r\nand finally the **setup.py** file\r\n\r\n```python\r\nfrom distutils.core import setup\r\nfrom Cython.Build import cythonize\r\nfrom distutils.extension import Extension\r\nimport numpy\r\nimport sys\r\nimport os\r\n\r\npwd = os.getcwd()\r\n\r\nsourcefile = [\"cy_grid.pyx\"]\r\ncompile_opts = ['-std=c++11', '-g']\r\n\r\nif sys.platform == 'darwin':\r\n    compile_opts.append('-mmacosx-version-min=10.7')\r\n\r\n\r\next = Extension(\"cy_grid\",\r\n                sources=sourcefile,\r\n                extra_compile_args=compile_opts,\r\n                language='c++',\r\n                runtime_library_dirs=[pwd],\r\n                include_dirs=[pwd, numpy.get_include(),],\r\n                library_dirs=[pwd,],\r\n                extra_link_args=[\"-L\"+pwd,])\r\n\r\nsetup(name=\"cy_grid\", ext_modules=cythonize(ext),)\r\n```\r\nand the error that i get when i try to build this MWE\r\n\r\n```\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n\r\n    def set(self, double[:] inp):\r\n        cdef int nx, i\r\n        nx = inp.shape[0]\r\n        for i in range(0, nx, 1):\r\n            self.thisptr.call(i) = inp[i]\r\n                            ^\r\n------------------------------------------------------------\r\n\r\ncy_grid.pyx:24:29: Cannot assign to or delete this\r\n```\r\n\r\nI am new to wrapping cpp with cython, therefore any help with this matter would be great.",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "No, in Python a function call is never an lvalue. The same is true of Cython. \r\n\r\nOne possible workaround is to create a macro\r\n\r\n`#define assign(a, b) a = b` declared as `void assign[T](T&, T)` and use it as `assign(self.thisptr.call(i), inp[i])`.\r\n\r\n",
            "created_at": "2018-05-01T15:43:53Z",
            "html_url": "https://github.com/cython/cython/issues/2182#issuecomment-385703940",
            "id": 385703940,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2182",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTcwMzk0MA==",
            "updated_at": "2018-05-01T15:43:53Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/385703940",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "node_id": "MDQ6VXNlcjQ4NjAxNw==",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2182/comments",
    "created_at": "2018-03-28T00:00:37Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2182/events",
    "html_url": "https://github.com/cython/cython/issues/2182",
    "id": 309174792,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2182/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMDkxNzQ3OTI=",
    "number": 2182,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "function call operator overloading cplusplus",
    "updated_at": "2018-05-01T15:43:54Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2182",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/5336184?v=4",
        "events_url": "https://api.github.com/users/nikhil003/events{/privacy}",
        "followers_url": "https://api.github.com/users/nikhil003/followers",
        "following_url": "https://api.github.com/users/nikhil003/following{/other_user}",
        "gists_url": "https://api.github.com/users/nikhil003/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/nikhil003",
        "id": 5336184,
        "login": "nikhil003",
        "node_id": "MDQ6VXNlcjUzMzYxODQ=",
        "organizations_url": "https://api.github.com/users/nikhil003/orgs",
        "received_events_url": "https://api.github.com/users/nikhil003/received_events",
        "repos_url": "https://api.github.com/users/nikhil003/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/nikhil003/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nikhil003/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/nikhil003"
    }
}