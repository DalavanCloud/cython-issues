{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "C-like type hint style will treate as `int __pyx_v_n`:\r\n\r\n```python\r\ndef __cinit__(self, int n):\r\n```\r\n\r\nPython type hint style will treate as `PyObject *__pyx_v_n`, seems to be `Any`:\r\n\r\n```python\r\ndef __cinit__(self, n: int):\r\n```\r\n\r\nAlso same as `__richcmp__`. Variable `op` in C style will treate as `int __pyx_v_op` but changed into `PyObject *__pyx_v_op` with Python style. The extansion type `VPoint` has no affect.\r\n\r\n```python\r\ndef __richcmp__(self, other: VPoint, int op) -> bint:\r\n```\r\n\r\n```python\r\ndef __richcmp__(self, other: VPoint, op: int) -> bint:\r\n```\r\n\r\n---\r\n\r\nA part of my code:\r\n\r\n```python\r\ndef __richcmp__(self, other: VPoint, op: int) -> bint:\r\n    \"\"\"Rich comparison.\"\"\"\r\n    if op == Py_EQ:\r\n        ...\r\n```\r\n\r\nCythonized as:\r\n\r\n```cpp\r\nstatic PyObject *__pyx_pw_10expression_6VPoint_11__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {\r\n    PyObject *__pyx_v_op = 0;\r\n    ...\r\n    __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(0, 100, __pyx_L3_error)\r\n    __Pyx_GOTREF(__pyx_v_op);\r\n    ...\r\n    __pyx_r = __pyx_pf_10expression_6VPoint_10__richcmp__(((struct __pyx_obj_10expression_VPoint *)__pyx_v_self), ((struct __pyx_obj_10expression_VPoint *)__pyx_v_other), ((PyObject *)__pyx_v_op));\r\n    ...\r\n    return __pyx_r;\r\n}\r\n\r\nstatic PyObject *__pyx_pf_10expression_6VPoint_10__richcmp__(struct __pyx_obj_10expression_VPoint *__pyx_v_self, struct __pyx_obj_10expression_VPoint *__pyx_v_other, PyObject *__pyx_v_op) {\r\n    ...\r\n    PyObject *__pyx_t_1 = NULL;\r\n    PyObject *__pyx_t_2 = NULL;\r\n    int __pyx_t_3;\r\n    ...\r\n    __pyx_t_1 = __Pyx_PyInt_From_int(Py_EQ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)\r\n    __Pyx_GOTREF(__pyx_t_1);\r\n    __pyx_t_2 = PyObject_RichCompare(__pyx_v_op, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)\r\n    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\r\n    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)\r\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\r\n    if (__pyx_t_3) {\r\n        ...\r\n```\r\n\r\nC style:\r\n\r\n```python\r\ndef __richcmp__(self, other: VPoint, int op) -> bint:\r\n    \"\"\"Rich comparison.\"\"\"\r\n    if op == Py_EQ:\r\n        ...\r\n```\r\n\r\nCythonized as:\r\n\r\n```cpp\r\nstatic PyObject *__pyx_pw_10expression_6VPoint_11__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {\r\n    ...\r\n    __pyx_r = __pyx_pf_10expression_6VPoint_10__richcmp__(((struct __pyx_obj_10expression_VPoint *)__pyx_v_self), ((struct __pyx_obj_10expression_VPoint *)__pyx_v_other), ((int)__pyx_v_op));\r\n    ...\r\n    return __pyx_r;\r\n}\r\n\r\nstatic PyObject *__pyx_pf_10expression_6VPoint_10__richcmp__(struct __pyx_obj_10expression_VPoint *__pyx_v_self, struct __pyx_obj_10expression_VPoint *__pyx_v_other, int __pyx_v_op) {\r\n    ...\r\n    int __pyx_t_1;\r\n    __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);\r\n    if (__pyx_t_1) {\r\n        ...\r\n```",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2840/comments",
    "created_at": "2019-02-13T10:06:58Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2840/events",
    "html_url": "https://github.com/cython/cython/issues/2840",
    "id": 409723229,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2840/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0MDk3MjMyMjk=",
    "number": 2840,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Type hint styles of special methods has ambiguous",
    "updated_at": "2019-02-13T10:06:58Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2840",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/10264720?v=4",
        "events_url": "https://api.github.com/users/KmolYuan/events{/privacy}",
        "followers_url": "https://api.github.com/users/KmolYuan/followers",
        "following_url": "https://api.github.com/users/KmolYuan/following{/other_user}",
        "gists_url": "https://api.github.com/users/KmolYuan/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/KmolYuan",
        "id": 10264720,
        "login": "KmolYuan",
        "node_id": "MDQ6VXNlcjEwMjY0NzIw",
        "organizations_url": "https://api.github.com/users/KmolYuan/orgs",
        "received_events_url": "https://api.github.com/users/KmolYuan/received_events",
        "repos_url": "https://api.github.com/users/KmolYuan/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/KmolYuan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/KmolYuan/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/KmolYuan"
    }
}