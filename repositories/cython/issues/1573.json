{
    "assignee": null,
    "assignees": [],
    "body": "Suppose you have a decorator for async functions that returns an async function. When used with the asyncio module from the standard library, a decorator written in Cython will fail and can take the event loop / kernel with it.  A full, minimal example is given in this notebook, https://gist.github.com/scopatz/78d1750517af479d0b42997873ff9c4a  The basic idea though is that the following does not work in Cython but does in Python:\r\n\r\n```python\r\ndef dec(f):\r\n    async def bound(*args, **kwargs):\r\n        print(\"from cython coro qualname\", bound.__qualname__)\r\n    return bound\r\n\r\n@dec\r\nasync def foo():\r\n    print(\"in foo\")\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(foo())\r\n```\r\n\r\nSome code I was writing in for a library leads me to believe that this error is because the `bound()` coroutine object (not the coroutine function) has a `__qualname__` attribute that exists and is set to None,  rather than a string.  \r\n\r\nThis is problematic because of the way asyncio is written.  In the asyncio/events.py on line 65 (of Python 3.5.2), there is a function called `_format_callback()`.  This is below:\r\n\r\n```python\r\ndef _format_callback(func, args, suffix=''):\r\n    if isinstance(func, functools.partial):\r\n        if args is not None:\r\n            suffix = _format_args(args) + suffix\r\n        return _format_callback(func.func, func.args, suffix)\r\n\r\n    if hasattr(func, '__qualname__'):\r\n        func_repr = getattr(func, '__qualname__')\r\n    elif hasattr(func, '__name__'):\r\n        func_repr = getattr(func, '__name__')\r\n    else:\r\n        func_repr = repr(func)\r\n\r\n    if args is not None:\r\n        func_repr += _format_args(args)\r\n    if suffix:\r\n        func_repr += suffix\r\n    return func_rep\r\n```\r\n\r\nThis searches for qualname on the callback (which is there), and the does a `+=`, and this leads to a TypeError. This function gets called a lot for logging and error reporting.  \r\n\r\nWhat is more is that assigning a str qualname to bound() inside of the decorator didn't seem to have any affect.  I think the fix is to either make sure that qualname is a string or that it doesn't exist.\r\n\r\nI hope this helps and please let me know if you need anymore information. ",
    "closed_at": null,
    "comment_data": [
        {
            "body": "This line seems like it could be the problem: https://github.com/cython/cython/blob/176ed5e41e30520dbad4a5c3b9d4cc34cb84a359/Cython/Utility/Coroutine.c#L986",
            "created_at": "2017-01-03T10:25:45Z",
            "html_url": "https://github.com/cython/cython/issues/1573#issuecomment-270085692",
            "id": 270085692,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1573",
            "updated_at": "2017-01-03T10:25:45Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/270085692",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/320553?v=3",
                "events_url": "https://api.github.com/users/scopatz/events{/privacy}",
                "followers_url": "https://api.github.com/users/scopatz/followers",
                "following_url": "https://api.github.com/users/scopatz/following{/other_user}",
                "gists_url": "https://api.github.com/users/scopatz/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scopatz",
                "id": 320553,
                "login": "scopatz",
                "organizations_url": "https://api.github.com/users/scopatz/orgs",
                "received_events_url": "https://api.github.com/users/scopatz/received_events",
                "repos_url": "https://api.github.com/users/scopatz/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scopatz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scopatz/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scopatz"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1573/comments",
    "created_at": "2017-01-03T09:26:44Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1573/events",
    "html_url": "https://github.com/cython/cython/issues/1573",
    "id": 198435759,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1573/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1573,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Async failure when returning a coroutine from a decorator with asyncio",
    "updated_at": "2017-01-03T10:25:45Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1573",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/320553?v=3",
        "events_url": "https://api.github.com/users/scopatz/events{/privacy}",
        "followers_url": "https://api.github.com/users/scopatz/followers",
        "following_url": "https://api.github.com/users/scopatz/following{/other_user}",
        "gists_url": "https://api.github.com/users/scopatz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scopatz",
        "id": 320553,
        "login": "scopatz",
        "organizations_url": "https://api.github.com/users/scopatz/orgs",
        "received_events_url": "https://api.github.com/users/scopatz/received_events",
        "repos_url": "https://api.github.com/users/scopatz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scopatz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scopatz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scopatz"
    }
}