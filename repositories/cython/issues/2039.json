{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "This is with 0.27.3:\r\n```\r\n$ python setup.py build_ext --inplace -vvv\r\nCompiling distributed/schedulerstate.py because it changed.\r\n[1/1] Cythonizing distributed/schedulerstate.py\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n        self.worker_restrictions = None\r\n        self.resource_restrictions = None\r\n        self.loose_restrictions = False\r\n\r\n    @cython.ccall\r\n    def get_nbytes(self):\r\n   ^\r\n------------------------------------------------------------\r\n\r\ndistributed/schedulerstate.py:440:4: Compiler crash in AnalyseDeclarationsTransform\r\n\r\nFile 'ModuleNode.py', line 122, in analyse_declarations: ModuleNode(schedulerstate.py:1:0,\r\n    full_module_name = 'distributed.schedulerstate')\r\nFile 'Nodes.py', line 417, in analyse_declarations: StatListNode(schedulerstate.py:3:0)\r\nFile 'Nodes.py', line 417, in analyse_declarations: StatListNode(schedulerstate.py:153:0)\r\nFile 'Nodes.py', line 4461, in analyse_declarations: PyClassDefNode(schedulerstate.py:153:0,\r\n    doc = '\\n    A simple object holding information about a task.\\n\\n    .. attribute:: key: str\\n\\n       The key is the unique identifier of a task, generally formed\\n       from the name of the function, followed by a hash of the function\\n       and arguments, like ``\\'inc-ab31c010444977004d656610d2d421ec\\'``.\\n\\n    .. attribute:: prefix: str\\n\\n       The key prefix, used in certain calculations to get an estimate\\n       of the task\\'s duration based on the duration of other tasks in the\\n       same \"family\" (for example ``\\'inc\\'``).\\n\\n    .. attribute:: run_spec: object\\n\\n       A specification of how to run the task.  The type and meaning of this\\n       value is opaque to the scheduler, as it is only interpreted by the\\n       worker to which the task is sent for executing.\\n\\n       As a special case, this attribute may also be ``None``, in which case\\n       the task is \"pure data\" (such as, for example, a piece of data loaded\\n       in the scheduler using :meth:`Client.scatter`).  A \"pure data\" task\\n       cannot be computed again if its value is lost.\\n\\n    .. attribute:: priority: tuple\\n\\n       The priority provides each task with a relative ranking which is used\\n       to break ties when many tasks are being considered for execution.\\n\\n       This ranking is generally a 2-item tuple.  The first (and dominant)\\n       item corresponds to when it was submitted.  Generally, earlier tasks\\n       take precedence.  The second item is determined by the client, and is\\n       a way to prioritize tasks within a large graph that may be important,\\n       such as if they are on the critical path, or good to run in order to\\n       release many dependencies.  This is explained further in\\n       :doc:`Scheduling Policy <scheduling-policies>`.\\n\\n    .. attribute:: state: str\\n\\n       This task\\'s current state.  Valid states include ``released``,\\n       ``waiting``, ``no-worker``, ``processing``, ``memory``, ``erred``\\n       and ``forgotten``.  If it is ``forgotten``, the task isn\\'t stored\\n       in the ``tasks`` dictionary anymore and will probably disappear\\n       soon from memory.\\n\\n    .. attribute:: dependencies: {TaskState}\\n\\n       The set of tasks this task depends on for proper execution.  Only\\n       tasks still alive are listed in this set.  If, for whatever reason,\\n       this task also depends on a forgotten task, the\\n       :attr:`has_lost_dependencies` flag is set.\\n\\n       A task can only be executed once all its dependencies have already\\n       been successfully executed and have their result stored on at least\\n       one worker.  This is tracked by progressively draining the\\n       :attr:`waiting_on` set.\\n\\n    .. attribute:: dependents: {TaskState}\\n\\n       The set of tasks which depend on this task.  Only tasks still alive\\n       are listed in this set.\\n\\n       This is the reverse mapping of :attr:`dependencies`.\\n\\n    .. attribute:: has_lost_dependencies: bool\\n\\n       Whether any of the dependencies of this task has been forgotten.\\n       For memory consumption reasons, forgotten tasks are not kept in\\n       memory even though they may have dependent tasks.  When a task is\\n       forgotten, therefore, each of its dependents has their\\n       :attr:`has_lost_dependencies` attribute set to ``True``.\\n\\n       If :attr:`has_lost_dependencies` is true, this task cannot go\\n       into the \"processing\" state anymore.\\n\\n    .. attribute:: waiting_on: {TaskState}\\n\\n       The set of tasks this task is waiting on *before* it can be executed.\\n       This is always a subset of :attr:`dependencies`.  Each time one of the\\n       dependencies has finished processing, it is removed from the\\n       :attr:`waiting_on` set.\\n\\n       Once :attr:`waiting_on` becomes empty, this task can move from the\\n       \"waiting\" state to the \"processing\" state (unless one of the\\n       dependencies errored out, in which case this task is instead\\n       marked \"erred\").\\n\\n    .. attribute:: waiters: {TaskState}\\n\\n       The set of tasks which need this task to remain alive.  This is always\\n       a subset of :attr:`dependents`.  Each time one of the dependents\\n       has finished processing, it is removed from the :attr:`waiters`\\n       set.\\n\\n       Once both :attr:`waiters` and :attr:`who_wants` become empty, this\\n       task can be released (if it has a non-empty :attr:`run_spec`) or\\n       forgotten (otherwise) by the scheduler, and by any workers\\n       in :attr:`who_has`.\\n\\n       .. note:: Counter-intuitively, :attr:`waiting_on` and\\n          :attr:`waiters` are not reverse mappings of each other.\\n\\n    .. attribute:: who_wants: {ClientState}\\n\\n       The set of clients who want this task\\'s result to remain alive.\\n       This is the reverse mapping of :attr:`ClientState.wants_what`.\\n\\n       When a client submits a graph to the scheduler it also specifies\\n       which output tasks it desires, such that their results are not released\\n       from memory.\\n\\n       Once a task has finished executing (i.e. moves into the \"memory\"\\n       or \"erred\" state), the clients in :attr:`who_wants` are notified.\\n\\n       Once both :attr:`waiters` and :attr:`who_wants` become empty, this\\n       task can be released (if it has a non-empty :attr:`run_spec`) or\\n       forgotten (otherwise) by the scheduler, and by any workers\\n       in :attr:`who_has`.\\n\\n    .. attribute:: who_has: {WorkerState}\\n\\n       The set of workers who have this task\\'s result in memory.\\n       It is non-empty iff the task is in the \"memory\" state.  There can be\\n       more than one worker in this set if, for example, :meth:`Client.scatter`\\n       or :meth:`Client.replicate` was used.\\n\\n       This is the reverse mapping of :attr:`WorkerState.has_what`.\\n\\n    .. attribute:: processing_on: WorkerState (or None)\\n\\n       If this task is in the \"processing\" state, which worker is currently\\n       processing it.  Otherwise this is ``None``.\\n\\n       This attribute is kept in sync with :attr:`WorkerState.processing`.\\n\\n    .. attribute:: retries: int\\n\\n       The number of times this task can automatically be retried in case\\n       of failure.  If a task fails executing (the worker returns with\\n       an error), its :attr:`retries` attribute is checked.  If it is\\n       equal to 0, the task is marked \"erred\".  If it is greater than 0,\\n       the :attr:`retries` attribute is decremented and execution is\\n       attempted again.\\n\\n    .. attribute:: nbytes: int (or None)\\n\\n       The number of bytes, as determined by ``sizeof``, of the result\\n       of a finished task.  This number is used for diagnostics and to\\n       help prioritize work.\\n\\n    .. attribute:: exception: object\\n\\n       If this task failed executing, the exception object is stored here.\\n       Otherwise this is ``None``.\\n\\n    .. attribute:: traceback: object\\n\\n       If this task failed executing, the traceback object is stored here.\\n       Otherwise this is ``None``.\\n\\n    .. attribute:: exception_blame: TaskState (or None)\\n\\n       If this task or one of its dependencies failed executing, the\\n       failed task is stored here (possibly itself).  Otherwise this\\n       is ``None``.\\n\\n    .. attribute:: suspicious: int\\n\\n       The number of times this task has been involved in a worker death.\\n\\n       Some tasks may cause workers to die (such as calling ``os._exit(0)``).\\n       When a worker dies, all of the tasks on that worker are reassigned\\n       to others.  This combination of behaviors can cause a bad task to\\n       catastrophically destroy all workers on the cluster, one after\\n       another.  Whenever a worker dies, we mark each task currently\\n       processing on that worker (as recorded by\\n       :attr:`WorkerState.processing`) as suspicious.\\n\\n       If a task is involved in three deaths (or some other fixed constant)\\n       then we mark the task as ``erred``.\\n\\n    .. attribute:: host_restrictions: {hostnames}\\n\\n       A set of hostnames where this task can be run (or ``None`` if empty).\\n       Usually this is empty unless the task has been specifically restricted\\n       to only run on certain hosts.  A hostname may correspond to one or\\n       several connected workers.\\n\\n    .. attribute:: worker_restrictions: {worker addresses}\\n\\n       A set of complete worker addresses where this can be run (or ``None``\\n       if empty).  Usually this is empty unless the task has been specifically\\n       restricted to only run on certain workers.\\n\\n       Note this is tracking worker addresses, not worker states, since\\n       the specific workers may not be connected at this time.\\n\\n    .. attribute:: resource_restrictions: {resource: quantity}\\n\\n       Resources required by this task, such as ``{\\'gpu\\': 1}`` or\\n       ``{\\'memory\\': 1e9}`` (or ``None`` if empty).  These are user-defined\\n       names and are matched against the contents of each\\n       :attr:`WorkerState.resources` dictionary.\\n\\n    .. attribute:: loose_restrictions: bool\\n\\n       If ``False``, each of :attr:`host_restrictions`,\\n       :attr:`worker_restrictions` and :attr:`resource_restrictions` is\\n       a hard constraint: if no worker is available satisfying those\\n       restrictions, the task cannot go into the \"processing\" state and\\n       will instead go into the \"no-worker\" state.\\n\\n       If ``True``, the above restrictions are mere preferences: if no worker\\n       is available satisfying those restrictions, the task can still go\\n       into the \"processing\" state and be sent for execution to another\\n       connected worker.\\n\\n    ',\r\n    name = 'TaskState')\r\nFile 'Nodes.py', line 417, in analyse_declarations: StatListNode(schedulerstate.py:154:4)\r\nFile 'Nodes.py', line 361, in analyse_declarations: CompilerDirectivesNode(schedulerstate.py:440:4)\r\nFile 'Nodes.py', line 417, in analyse_declarations: StatListNode(schedulerstate.py:440:4)\r\nFile 'Nodes.py', line 2367, in analyse_declarations: CFuncDefNode(schedulerstate.py:440:4,\r\n    args = [...]/1,\r\n    modifiers = [...]/0,\r\n    overridable = True,\r\n    visibility = 'private')\r\nFile 'Nodes.py', line 2376, in declare_cpdef_wrapper: CFuncDefNode(schedulerstate.py:440:4,\r\n    args = [...]/1,\r\n    modifiers = [...]/0,\r\n    overridable = True,\r\n    visibility = 'private')\r\nFile 'Nodes.py', line 2437, in call_self_node: CFuncDefNode(schedulerstate.py:440:4,\r\n    args = [...]/1,\r\n    modifiers = [...]/0,\r\n    overridable = True,\r\n    visibility = 'private')\r\n\r\nCompiler crash traceback from this point on:\r\n  File \"/home/antoine/miniconda3/envs/dask36/lib/python3.6/site-packages/Cython/Compiler/Nodes.py\", line 2437, in call_self_node\r\n    type_entry = self.type.args[0].type.entry\r\nAttributeError: 'PyObjectType' object has no attribute 'entry'\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 21, in <module>\r\n    ext_modules = cythonize(extensions)\r\n  File \"/home/antoine/miniconda3/envs/dask36/lib/python3.6/site-packages/Cython/Build/Dependencies.py\", line 1039, in cythonize\r\n    cythonize_one(*args)\r\n  File \"/home/antoine/miniconda3/envs/dask36/lib/python3.6/site-packages/Cython/Build/Dependencies.py\", line 1161, in cythonize_one\r\n    raise CompileError(None, pyx_file)\r\nCython.Compiler.Errors.CompileError: distributed/schedulerstate.py\r\n```\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2039/comments",
    "created_at": "2017-12-11T14:19:16Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2039/events",
    "html_url": "https://github.com/cython/cython/issues/2039",
    "id": 281032542,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2039/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 2039,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Compiler crash in AnalyseDeclarationsTransform",
    "updated_at": "2017-12-11T14:19:16Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2039",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1721820?v=4",
        "events_url": "https://api.github.com/users/pitrou/events{/privacy}",
        "followers_url": "https://api.github.com/users/pitrou/followers",
        "following_url": "https://api.github.com/users/pitrou/following{/other_user}",
        "gists_url": "https://api.github.com/users/pitrou/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/pitrou",
        "id": 1721820,
        "login": "pitrou",
        "organizations_url": "https://api.github.com/users/pitrou/orgs",
        "received_events_url": "https://api.github.com/users/pitrou/received_events",
        "repos_url": "https://api.github.com/users/pitrou/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/pitrou/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pitrou/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/pitrou"
    }
}