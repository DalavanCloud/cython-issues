{
    "assignee": null,
    "assignees": [],
    "body": "This is a formal bug report for the issue discussed in this thread:\n\nhttp://article.gmane.org/gmane.comp.python.cython.devel/14078/match=odd+behavior\n\nI am wrapping the Xapian C++ API for Python 3 using Cython.  ```Xapian::TermGenerator.get_description()``` returns a ```std::string``` and this is my .pyx file for wrapping this:\n\n\n```\ncdef class TermGenerator:\n    cdef xapianlib.TermGenerator * _this\n\n    def __cinit__(self):\n        self._this = new xapianlib.TermGenerator()\n\n    def __dealloc__(self):\n        del self._this\n\n    property description:\n        def __get__(self):\n            as_bytes = <char *>self._this.get_description().c_str()\n            #return as_bytes\n            return as_bytes.decode('utf-8')\n```\n\nThis doesn't work:\n\n\n```\n% python\nPython 3.2.3 (default, May  3 2012, 15:51:42) \n[4.6.3](GCC) on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import xapian\n>>> tg = xapian.TermGenerator()\n>>> tg.description  \n'\\x00\\x00\\x00\\x00_\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\nbut this does work:\n\n```\n    property description:\n        def __get__(self):\n            # XXX Use this instead of the obvious alternative one-liner\n            # because of a strange bug in Cython.  If you let Cython calculate\n            # the size of the .c_str() it will use strlen() and this causes\n            # the resulting unicode to be filled with nonsense.\n            descr = self._this.get_description()\n            return descr.c_str()[the first (non-working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_as_bytes, strlen(__pyx_v_as_bytes), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0](:descr.size()].decode('utf-8')\n```\n\nIn); __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}\n```\n\nIn the second (working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_descr.c_str(), __pyx_v_descr.size(), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}n\n```\n\nIn a follow up Stefan said:\n\n    I just noticed that .c_str() is incorrectly declared (without \"const\") in\n    Cython and that .data() is missing completely. I've pushed a fix for that\n    (note that the current master looks a bit broken, which is rather\n    unfortunate for testing).\n\nSo it's possible that the master has fixed this problem.  I will try to test that.\n\nMigrated from http://trac.cython.org/ticket/783",
    "closed_at": "2015-04-06T09:16:57Z",
    "comment_data": [
        {
            "body": "**barry** commented\n\nFWIW, my current branch is available under Bazaar on Launchpad:\n\n$ bzr branch lp:pyxap",
            "created_at": "2012-07-12T20:21:17Z",
            "html_url": "https://github.com/cython/cython/issues/1338#issuecomment-240051937",
            "id": 240051937,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1338",
            "updated_at": "2016-08-16T09:28:07Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/240051937",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "body": "**scoder** changed **description** from\n\nThis is a formal bug report for the issue discussed in this thread:\n\nhttp://article.gmane.org/gmane.comp.python.cython.devel/14078/match=odd+behavior\n\nI am wrapping the Xapian C++ API for Python 3 using Cython.  Xapian::TermGenerator.get_description() returns a std::string and this is my .pyx file for wrapping this:\n\n\n```\ncdef class TermGenerator:\n    cdef xapianlib.TermGenerator * _this\n\n    def __cinit__(self):\n        self._this = new xapianlib.TermGenerator()\n\n    def __dealloc__(self):\n        del self._this\n\n    property description:\n        def __get__(self):\n            as_bytes = <char *>self._this.get_description().c_str()\n            #return as_bytes\n            return as_bytes.decode('utf-8')\n```\n\nThis doesn't work:\n\n\n```\n% python\nPython 3.2.3 (default, May  3 2012, 15:51:42) \n[4.6.3](GCC) on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import xapian\n>>> tg = xapian.TermGenerator()\n>>> tg.description  \n'\\x00\\x00\\x00\\x00_\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\nbut this does work:\n\n```\n    property description:\n        def __get__(self):\n            # XXX Use this instead of the obvious alternative one-liner\n            # because of a strange bug in Cython.  If you let Cython calculate\n            # the size of the .c_str() it will use strlen() and this causes\n            # the resulting unicode to be filled with nonsense.\n            descr = self._this.get_description()\n            return descr.c_str()[the first (non-working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_as_bytes, strlen(__pyx_v_as_bytes), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0](:descr.size()].decode('utf-8')\n```\n\nIn); __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}\n```\n\nIn the second (working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_descr.c_str(), __pyx_v_descr.size(), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[__pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}n\n```\n\nIn a follow up Stefan said:\n\n    I just noticed that .c_str() is incorrectly declared (without \"const\") in\n    Cython and that .data() is missing completely. I've pushed a fix for that\n    (note that the current master looks a bit broken, which is rather\n    unfortunate for testing).\n\nSo it's possible that the master has fixed this problem.  I will try to test that.\n\nto\n\nThis is a formal bug report for the issue discussed in this thread:\n\nhttp://article.gmane.org/gmane.comp.python.cython.devel/14078/match=odd+behavior\n\nI am wrapping the Xapian C++ API for Python 3 using Cython.  ```Xapian::TermGenerator.get_description()``` returns a [[[std::string``` and this is my .pyx file for wrapping this:\n\n\n```\ncdef class TermGenerator:\n    cdef xapianlib.TermGenerator * _this\n\n    def __cinit__(self):\n        self._this = new xapianlib.TermGenerator()\n\n    def __dealloc__(self):\n        del self._this\n\n    property description:\n        def __get__(self):\n            as_bytes = <char *>self._this.get_description().c_str()\n            #return as_bytes\n            return as_bytes.decode('utf-8')\n```\n\nThis doesn't work:\n\n\n```\n% python\nPython 3.2.3 (default, May  3 2012, 15:51:42) \n[GCC 4.6.3](0];) on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import xapian\n>>> tg = xapian.TermGenerator()\n>>> tg.description  \n'\\x00\\x00\\x00\\x00_\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\nbut this does work:\n\n```\n    property description:\n        def __get__(self):\n            # XXX Use this instead of the obvious alternative one-liner\n            # because of a strange bug in Cython.  If you let Cython calculate\n            # the size of the .c_str() it will use strlen() and this causes\n            # the resulting unicode to be filled with nonsense.\n            descr = self._this.get_description()\n            return descr.c_str()[the first (non-working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_as_bytes, strlen(__pyx_v_as_bytes), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0](:descr.size()].decode('utf-8')\n```\n\nIn); __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}\n```\n\nIn the second (working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_descr.c_str(), __pyx_v_descr.size(), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}n\n```\n\nIn a follow up Stefan said:\n\n    I just noticed that .c_str() is incorrectly declared (without \"const\") in\n    Cython and that .data() is missing completely. I've pushed a fix for that\n    (note that the current master looks a bit broken, which is rather\n    unfortunate for testing).\n\nSo it's possible that the master has fixed this problem.  I will try to test that.\ncommented",
            "created_at": "2012-07-18T12:49:05Z",
            "html_url": "https://github.com/cython/cython/issues/1338#issuecomment-240051938",
            "id": 240051938,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1338",
            "updated_at": "2016-08-16T09:28:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/240051938",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "body": "**scoder** changed **description** from\n\nThis is a formal bug report for the issue discussed in this thread:\n\nhttp://article.gmane.org/gmane.comp.python.cython.devel/14078/match=odd+behavior\n\nI am wrapping the Xapian C++ API for Python 3 using Cython.  ```Xapian::TermGenerator.get_description()``` returns a [and this is my .pyx file for wrapping this:\n\n\n```\ncdef class TermGenerator:\n    cdef xapianlib.TermGenerator * _this\n\n    def __cinit__(self):\n        self._this = new xapianlib.TermGenerator()\n\n    def __dealloc__(self):\n        del self._this\n\n    property description:\n        def __get__(self):\n            as_bytes = <char *>self._this.get_description().c_str()\n            #return as_bytes\n            return as_bytes.decode('utf-8')\n```\n\nThis doesn't work:\n\n\n```\n% python\nPython 3.2.3 (default, May  3 2012, 15:51:42) \n[GCC 4.6.3]([[std::string```) on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import xapian\n>>> tg = xapian.TermGenerator()\n>>> tg.description  \n'\\x00\\x00\\x00\\x00_\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\nbut this does work:\n\n```\n    property description:\n        def __get__(self):\n            # XXX Use this instead of the obvious alternative one-liner\n            # because of a strange bug in Cython.  If you let Cython calculate\n            # the size of the .c_str() it will use strlen() and this causes\n            # the resulting unicode to be filled with nonsense.\n            descr = self._this.get_description()\n            return descr.c_str()[the first (non-working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_as_bytes, strlen(__pyx_v_as_bytes), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0](:descr.size()].decode('utf-8')\n```\n\nIn); __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}\n```\n\nIn the second (working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_descr.c_str(), __pyx_v_descr.size(), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[__pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}n\n```\n\nIn a follow up Stefan said:\n\n    I just noticed that .c_str() is incorrectly declared (without \"const\") in\n    Cython and that .data() is missing completely. I've pushed a fix for that\n    (note that the current master looks a bit broken, which is rather\n    unfortunate for testing).\n\nSo it's possible that the master has fixed this problem.  I will try to test that.\n\nto\n\nThis is a formal bug report for the issue discussed in this thread:\n\nhttp://article.gmane.org/gmane.comp.python.cython.devel/14078/match=odd+behavior\n\nI am wrapping the Xapian C++ API for Python 3 using Cython.  ```Xapian::TermGenerator.get_description()``` returns a ```std::string``` and this is my .pyx file for wrapping this:\n\n\n```\ncdef class TermGenerator:\n    cdef xapianlib.TermGenerator * _this\n\n    def __cinit__(self):\n        self._this = new xapianlib.TermGenerator()\n\n    def __dealloc__(self):\n        del self._this\n\n    property description:\n        def __get__(self):\n            as_bytes = <char *>self._this.get_description().c_str()\n            #return as_bytes\n            return as_bytes.decode('utf-8')\n```\n\nThis doesn't work:\n\n\n```\n% python\nPython 3.2.3 (default, May  3 2012, 15:51:42) \n[GCC 4.6.3](0];) on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import xapian\n>>> tg = xapian.TermGenerator()\n>>> tg.description  \n'\\x00\\x00\\x00\\x00_\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\nbut this does work:\n\n```\n    property description:\n        def __get__(self):\n            # XXX Use this instead of the obvious alternative one-liner\n            # because of a strange bug in Cython.  If you let Cython calculate\n            # the size of the .c_str() it will use strlen() and this causes\n            # the resulting unicode to be filled with nonsense.\n            descr = self._this.get_description()\n            return descr.c_str()[the first (non-working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_as_bytes, strlen(__pyx_v_as_bytes), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0](:descr.size()].decode('utf-8')\n```\n\nIn); __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}\n```\n\nIn the second (working) example, the generated C++ code looks like this:\n\n```\n  __pyx_t_1 = ((PyObject *)PyUnicode_Decode(__pyx_v_descr.c_str(), __pyx_v_descr.size(), __pyx_k_1, NULL)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}n\n```\n\nIn a follow up Stefan said:\n\n    I just noticed that .c_str() is incorrectly declared (without \"const\") in\n    Cython and that .data() is missing completely. I've pushed a fix for that\n    (note that the current master looks a bit broken, which is rather\n    unfortunate for testing).\n\nSo it's possible that the master has fixed this problem.  I will try to test that.\ncommented",
            "created_at": "2012-07-18T12:49:25Z",
            "html_url": "https://github.com/cython/cython/issues/1338#issuecomment-240051939",
            "id": 240051939,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1338",
            "updated_at": "2016-08-16T09:28:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/240051939",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "body": "**scoder** changed **milestone** from `wishlist` to `0.18`\n**owner** from `somebody` to `scoder`\n**status** from `new` to `assigned`\ncommented\n\nLikely fixed by the explicit \"x.decode()\" implementation. Test added here:\n\nhttps://github.com/cython/cython/commit/c35d533b15c149686dff69eaee5bc6feace8d29d",
            "created_at": "2015-04-06T09:16:49Z",
            "html_url": "https://github.com/cython/cython/issues/1338#issuecomment-240051941",
            "id": 240051941,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1338",
            "updated_at": "2016-08-16T09:28:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/240051941",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "body": "**scoder** changed **resolution** to `fixed`\n**status** from `assigned` to `closed`\ncommented",
            "created_at": "2015-04-06T09:16:57Z",
            "html_url": "https://github.com/cython/cython/issues/1338#issuecomment-240051942",
            "id": 240051942,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1338",
            "updated_at": "2016-08-16T09:28:08Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/240051942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        }
    ],
    "comments": 5,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1338/comments",
    "created_at": "2012-07-12T20:20:43Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-08-16T09:28:07Z",
            "event": "labeled",
            "id": 756783324,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/756783324"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-08-16T09:28:07Z",
            "event": "labeled",
            "id": 756783325,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/756783325"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2016-08-16T09:28:07Z",
            "event": "milestoned",
            "id": 756783327,
            "milestone": {
                "title": "0.18"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/756783327"
        },
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2015-04-06T09:16:57Z",
            "event": "closed",
            "id": 756783329,
            "url": "https://api.github.com/repos/cython/cython/issues/events/756783329"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1338/events",
    "html_url": "https://github.com/cython/cython/issues/1338",
    "id": 171364196,
    "labels": [
        {
            "color": "444444",
            "name": "Code Generation",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "name": "defect",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1338/labels{/name}",
    "locked": false,
    "milestone": {
        "closed_at": null,
        "closed_issues": 4,
        "created_at": "2016-08-16T08:39:03Z",
        "creator": {
            "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
            "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
            "followers_url": "https://api.github.com/users/robertwb/followers",
            "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
            "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/robertwb",
            "id": 486017,
            "login": "robertwb",
            "organizations_url": "https://api.github.com/users/robertwb/orgs",
            "received_events_url": "https://api.github.com/users/robertwb/received_events",
            "repos_url": "https://api.github.com/users/robertwb/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
            "type": "User",
            "url": "https://api.github.com/users/robertwb"
        },
        "description": "",
        "due_on": null,
        "html_url": "https://github.com/cython/cython/milestones/0.18",
        "id": 1944467,
        "labels_url": "https://api.github.com/repos/cython/cython/milestones/29/labels",
        "number": 29,
        "open_issues": 0,
        "state": "open",
        "title": "0.18",
        "updated_at": "2016-08-16T09:28:07Z",
        "url": "https://api.github.com/repos/cython/cython/milestones/29"
    },
    "number": 1338,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Odd behavior with std::string and .decode()",
    "updated_at": "2015-04-06T09:16:57Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1338",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/486017?v=3",
        "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
        "followers_url": "https://api.github.com/users/robertwb/followers",
        "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
        "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/robertwb",
        "id": 486017,
        "login": "robertwb",
        "organizations_url": "https://api.github.com/users/robertwb/orgs",
        "received_events_url": "https://api.github.com/users/robertwb/received_events",
        "repos_url": "https://api.github.com/users/robertwb/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/robertwb"
    }
}