{
    "assignee": null,
    "assignees": [],
    "body": "Since version 0.24, the code generated by cython for overloaded `operator+` and `operator-` seems to have changed. The result of the operation used to be held in a temporary pointer before. Now, the temporary object is constructed directly on the stack, requiring a nullary constructor to exist. Compilation fails if no such constructor is available:\r\n\r\nSource:\r\n```\r\ncdef c.Bin1D_Dbn1D* c_ptr = new c.Bin1D_Dbn1D(  deref(self.ptr()) + deref(other.ptr())  )\r\n```\r\n\r\nCython 0.23.4:\r\n```\r\n  __pyx_t_4yoda_12declarations_Bin1D_Dbn1D *__pyx_t_3;\r\n// ...\r\ntry {\r\n    __pyx_t_3 = new __pyx_t_4yoda_12declarations_Bin1D_Dbn1D(((*__pyx_t_1) + (*__pyx_t_2)));\r\n  } catch(...) {\r\n```\r\n\r\nCython 0.24.1:\r\n```\r\nYODA::Bin1D<YODA::Dbn1D>  __pyx_t_3;\r\n// ...\r\ntry {\r\n    __pyx_t_3 = ((*__pyx_t_1) + (*__pyx_t_2));\r\n  } catch(...) {\r\n```\r\n\r\nThe Bin1D<> class does not have a nullary constructor available, and thus compilation fails.\r\n\r\n\r\nLooking at the changelog, it may be related to this item in the bug fixes for 0.24:\r\n\r\n> C++ exceptions raised by overloaded C++ operators were not always handled. Patch by Ian Henriksen.\r\n",
    "closed_at": null,
    "comment_data": [
        {
            "body": "This is a limitation that's pretty inherent to the way Cython does a lot of its code generation. The fact that it worked before was primarily due to buggy forwarding of exceptions from C++ to Python. If you want the old behavior (where exceptions thrown in overloaded operators aren't guaranteed to be converted to Python exceptions) it should probably be enough to remove `except +` from your `extern` declarations for the overloaded operators.\r\nThis isn't really possible with the current exception forwarding model though. In order to avoid calling the nullary constructor, Cython would have to create a variable inside a try block (try-catch idioms are used to forward C++ exceptions) that would exist once the try-catch block had finished. C++ doesn't allow that.\r\nIn theory, one way to work around stuff like this would be to introduce a feature that allows multiple function calls, etc. to be handled within the same code try-catch statement. That way you could create and use the temporary variable that you need all within the same scope at the C++ level. Syntactically something like that would make sense as some sort of `with` statement. That's a feature I'd love to see at some point, but I haven't had the time to dig into it much.",
            "created_at": "2016-09-20T13:45:06Z",
            "html_url": "https://github.com/cython/cython/issues/1465#issuecomment-248305349",
            "id": 248305349,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1465",
            "updated_at": "2016-09-20T13:45:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/248305349",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1847484?v=3",
                "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}",
                "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers",
                "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}",
                "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/insertinterestingnamehere",
                "id": 1847484,
                "login": "insertinterestingnamehere",
                "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs",
                "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events",
                "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/insertinterestingnamehere"
            }
        },
        {
            "body": "Thanks for your comments! I wasn't concerned with the exception behaviour originally, and still don't fully see how the new better functionality requires the syntactical change since 0.24, where Cython issues code like\r\n\r\n```\r\nFoo * a = ...;\r\nFoo * b = ...;\r\nFoo tmp;\r\n// ...\r\ntry {\r\n  tmp = *a + *b;\r\n} \r\n```\r\n\r\ninstead of what used to be effectively\r\n\r\n```\r\nFoo * a = ...;\r\nFoo * b = ...;\r\nFoo * tmp;\r\n// ...\r\ntry {\r\n  tmp = new Foo(*a + *b);\r\n}\r\n```\r\nwhich as far as I can see won't make a difference to exceptions thrown by operator+()\r\n\r\n[The docs](https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html) also suggest using pointers for cases where there is no nullary constructor:\r\n\r\n> If the class youâ€™re wrapping does not have a nullary constructor, you must store a pointer to the wrapped class [...]\r\n\r\nRight now, Cython 0.24 makes it impossible to use such classes at all, and most of the interface packages I maintain are broken. I'd like to think that that was accidental, and not a conscious decision to disallow classes that don't have nullary constructors.\r\n\r\nIf I'm missing the point here, can you please explain again why the new exception behaviour is not possible with the old pointer pattern? Thanks!\r\n\r\n",
            "created_at": "2016-09-20T14:46:36Z",
            "html_url": "https://github.com/cython/cython/issues/1465#issuecomment-248323537",
            "id": 248323537,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1465",
            "updated_at": "2016-09-20T14:46:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/248323537",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/6987266?v=3",
                "events_url": "https://api.github.com/users/dgrell/events{/privacy}",
                "followers_url": "https://api.github.com/users/dgrell/followers",
                "following_url": "https://api.github.com/users/dgrell/following{/other_user}",
                "gists_url": "https://api.github.com/users/dgrell/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/dgrell",
                "id": 6987266,
                "login": "dgrell",
                "organizations_url": "https://api.github.com/users/dgrell/orgs",
                "received_events_url": "https://api.github.com/users/dgrell/received_events",
                "repos_url": "https://api.github.com/users/dgrell/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/dgrell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/dgrell/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/dgrell"
            }
        },
        {
            "body": "Right, the current limitation doesn't have much to do with arithmetic operators in particular. Really any function or arithmetic operation that has an exception handler can't return something that doesn't have a default constructor because it has to allocate a temporary to assign to before running the try-catch block. Prior to the change, code like `c = a + b` wouldn't call the exception handler at all, and instead the interpreter would crash when an uncaught C++ exception was thrown. Fixing that meant requiring slightly more of classes that use exception handling with arithmetic operators, but the behavior was broken to begin with.\r\n\r\nThe reason the separate try-catch block for the arithmetic operation is necessary at all is that the function call and the overloaded operator can use completely different custom exception handlers. The same would be true if the argument passed to the function with the exception handler were just the result of another function with its own exception handler. Either way, for each subexpression, Cython has to create a new temporary in the surrounding scope and then assign the result of the function call to it in a separate try-catch block. The assignment has to be to a variable outside the try block because it needs to persist after the try-catch block finishes. The assignment has to be by value as well, otherwise all that would be left is an invalid address pointing to an already deallocated temporary value.\r\n\r\nIn theory it's possible roll together multiple function calls and arithmetic subexpressions into a single try-catch statement so that classes without default constructors can be used as temporaries, but fusing the exception handling like that is a not a trivial feature. It just happens to have been the net result of the buggy behavior in the past. A change like that would also involve some changes in semantics that would make forwarded exceptions come from less specific areas of code. Right now, exceptions should be able to point precisely to the function call or arithmetic operation in Cython that caused them. It's not really clear how to choose which subexpressions (or which lines) should have their try-catch blocks combined either. That's why I mentioned that, if anyone ever implements fusing try-catch statements like this, it should probably be enabled using some sort of `with` block.",
            "created_at": "2016-09-20T22:54:43Z",
            "html_url": "https://github.com/cython/cython/issues/1465#issuecomment-248460456",
            "id": 248460456,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1465",
            "updated_at": "2016-09-20T22:54:43Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/248460456",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1847484?v=3",
                "events_url": "https://api.github.com/users/insertinterestingnamehere/events{/privacy}",
                "followers_url": "https://api.github.com/users/insertinterestingnamehere/followers",
                "following_url": "https://api.github.com/users/insertinterestingnamehere/following{/other_user}",
                "gists_url": "https://api.github.com/users/insertinterestingnamehere/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/insertinterestingnamehere",
                "id": 1847484,
                "login": "insertinterestingnamehere",
                "organizations_url": "https://api.github.com/users/insertinterestingnamehere/orgs",
                "received_events_url": "https://api.github.com/users/insertinterestingnamehere/received_events",
                "repos_url": "https://api.github.com/users/insertinterestingnamehere/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/insertinterestingnamehere/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/insertinterestingnamehere/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/insertinterestingnamehere"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1465/comments",
    "created_at": "2016-09-20T11:07:18Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1465/events",
    "html_url": "https://github.com/cython/cython/issues/1465",
    "id": 178030594,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1465/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1465,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "C++ overloaded operators break if no nullary constructor available",
    "updated_at": "2016-09-20T22:54:43Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1465",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/6987266?v=3",
        "events_url": "https://api.github.com/users/dgrell/events{/privacy}",
        "followers_url": "https://api.github.com/users/dgrell/followers",
        "following_url": "https://api.github.com/users/dgrell/following{/other_user}",
        "gists_url": "https://api.github.com/users/dgrell/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dgrell",
        "id": 6987266,
        "login": "dgrell",
        "organizations_url": "https://api.github.com/users/dgrell/orgs",
        "received_events_url": "https://api.github.com/users/dgrell/received_events",
        "repos_url": "https://api.github.com/users/dgrell/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dgrell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dgrell/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dgrell"
    }
}