{
    "assignee": null,
    "assignees": [],
    "body": "Note: This is a very minor, quality-of-life annoyance.\r\n\r\nI'm working on a relatively complex project that uses several cython modules, with additional `pyxbld` mediated c++ source files.\r\n\r\nRight now, when I'm working on the C++ sources, cython compilation failures yield **massively long** tracebacks. The common failure output is *100+ lines*. \r\n\r\nThis wouldn't be too much of a problem, if cython did not currently output the C++ compilation failure, and *then* the multiple python tracebacks it caused. As it is, basically all the information I need to actually fix the issue is inevitably scrolled off the screen. \r\n\r\nHere is an example failure:\r\n\r\n```cythoning /home/pi/BatLogger/Interface/Hardware/interface_wrapper.pyx to /home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.cpp\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n\r\n                # Queue structure:\r\n                # [USB Thread] -> [Parse Thread] -> [Log Thread]\r\n\r\n                self.usb_thread.insert_output_queue(self.parse_thread.get_queue_reference())\r\n                self.parse_thread.insert_output_queue(self.log_thread.get_queue_reference())\r\n                  ^\r\n------------------------------------------------------------\r\n\r\nHardware/interface_wrapper.pyx:138:19: Object of type 'BatParserThread' has no attribute 'insert_output_queue'\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n\r\n                # Queue structure:\r\n                # [USB Thread] -> [Parse Thread] -> [Log Thread]\r\n\r\n                self.usb_thread.insert_output_queue(self.parse_thread.get_queue_reference())\r\n                self.parse_thread.insert_output_queue(self.log_thread.get_queue_reference())\r\n                                                                          ^\r\n------------------------------------------------------------\r\n\r\nHardware/interface_wrapper.pyx:138:75: Cannot convert 'ReaderWriterQueue[UsbMessageRecord] &' to Python object\r\nbuilding 'Hardware.interface_wrapper' extension\r\narm-linux-gnueabihf-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fPIC -I. -I/usr/include/ -I/usr/lib/openmpi/include/ -I/usr/include/hdf5/serial -I/usr/include/python3.4m -c /home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.cpp -o /home/pi/.pyxbld/temp.linux-armv7l-3.4/home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.o -std=c++11 -O3 -Wall -Werror -lrt -lusb-1.0 -DLINUX\r\ncc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++\r\n/home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.cpp:1:2: error: #error Do not use this file, it is the result of a failed Cython compilation.\r\n #error Do not use this file, it is the result of a failed Cython compilation.\r\n  ^\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.4/distutils/unixccompiler.py\", line 116, in _compile\r\n    extra_postargs)\r\n  File \"/usr/lib/python3.4/distutils/ccompiler.py\", line 909, in spawn\r\n    spawn(cmd, dry_run=self.dry_run)\r\n  File \"/usr/lib/python3.4/distutils/spawn.py\", line 36, in spawn\r\n    _spawn_posix(cmd, search_path, dry_run=dry_run)\r\n  File \"/usr/lib/python3.4/distutils/spawn.py\", line 162, in _spawn_posix\r\n    % (cmd, exit_status))\r\ndistutils.errors.DistutilsExecError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 216, in load_module\r\n    inplace=build_inplace, language_level=language_level)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 192, in build_module\r\n    reload_support=pyxargs.reload_support)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyxbuild.py\", line 102, in pyx_to_dll\r\n    dist.run_commands()\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 955, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 185, in run\r\n    _build_ext.build_ext.run(self)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 339, in run\r\n    self.build_extensions()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 193, in build_extensions\r\n    self.build_extension(ext)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 503, in build_extension\r\n    depends=ext.depends)\r\n  File \"/usr/lib/python3.4/distutils/ccompiler.py\", line 574, in compile\r\n    self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\r\n  File \"/usr/lib/python3.4/distutils/unixccompiler.py\", line 118, in _compile\r\n    raise CompileError(msg)\r\ndistutils.errors.CompileError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"acquire_only.py\", line 23, in <module>\r\n    import Hardware.acq_hardware\r\n  File \"/home/pi/BatLogger/Interface/Hardware/acq_hardware.py\", line 11, in <module>\r\n    from . import interface_wrapper\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 445, in load_module\r\n    language_level=self.language_level)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 232, in load_module\r\n    raise exc.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 216, in load_module\r\n    inplace=build_inplace, language_level=language_level)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 192, in build_module\r\n    reload_support=pyxargs.reload_support)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyxbuild.py\", line 102, in pyx_to_dll\r\n    dist.run_commands()\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 955, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 185, in run\r\n    _build_ext.build_ext.run(self)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 339, in run\r\n    self.build_extensions()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 193, in build_extensions\r\n    self.build_extension(ext)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 503, in build_extension\r\n    depends=ext.depends)\r\n  File \"/usr/lib/python3.4/distutils/ccompiler.py\", line 574, in compile\r\n    self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\r\n  File \"/usr/lib/python3.4/distutils/unixccompiler.py\", line 118, in _compile\r\n    raise CompileError(msg)\r\nImportError: Building module Hardware.interface_wrapper failed: [\"distutils.errors.CompileError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\\n\"]\r\n```\r\n\r\nI don't see why the later tracebacks couldn't just re-raise the initial error, preventing the additional clutter. As it is, I tend to do my test-building `python3 script_name.py 2>&1 | head -n 50`, but shell hacks seem kind of crude.\r\n\r\nAlternatively, why not pack the error messages from the compilation failure into the error? It already contains lines from further down the build process:\r\n\r\n```\r\nImportError: Building module Hardware.interface_wrapper failed: [\"distutils.errors.CompileError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\\n\"]\r\n```\r\n\r\nIt seems like if the `g++` `stderr` was attached to the python error and percolated up through the handler chain, it could at least be output at the end of the traceback block, rather then before (for that matter, if you have a custom error with a overridden `__repr__()` and `__str__()`, does the interpreter use those when it's printed to the console)?",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1827/comments",
    "created_at": "2017-08-17T23:30:59Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1827/events",
    "html_url": "https://github.com/cython/cython/issues/1827",
    "id": 251100475,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1827/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1827,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Cython/PYX compilation failure tracebacks are excessively long.",
    "updated_at": "2017-08-17T23:34:01Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1827",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1401239?v=4",
        "events_url": "https://api.github.com/users/fake-name/events{/privacy}",
        "followers_url": "https://api.github.com/users/fake-name/followers",
        "following_url": "https://api.github.com/users/fake-name/following{/other_user}",
        "gists_url": "https://api.github.com/users/fake-name/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fake-name",
        "id": 1401239,
        "login": "fake-name",
        "organizations_url": "https://api.github.com/users/fake-name/orgs",
        "received_events_url": "https://api.github.com/users/fake-name/received_events",
        "repos_url": "https://api.github.com/users/fake-name/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fake-name/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fake-name/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fake-name"
    }
}