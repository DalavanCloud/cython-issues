{
    "assignee": null,
    "assignees": [],
    "body": "Note: This is a very minor, quality-of-life annoyance.\r\n\r\nI'm working on a relatively complex project that uses several cython modules, with additional `pyxbld` mediated c++ source files.\r\n\r\nRight now, when I'm working on the C++ sources, cython compilation failures yield **massively long** tracebacks. The common failure output is *100+ lines*. \r\n\r\nThis wouldn't be too much of a problem, if cython did not currently output the C++ compilation failure, and *then* the multiple python tracebacks it caused. As it is, basically all the information I need to actually fix the issue is inevitably scrolled off the screen. \r\n\r\nHere is an example failure:\r\n\r\n```cythoning /home/pi/BatLogger/Interface/Hardware/interface_wrapper.pyx to /home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.cpp\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n\r\n                # Queue structure:\r\n                # [USB Thread] -> [Parse Thread] -> [Log Thread]\r\n\r\n                self.usb_thread.insert_output_queue(self.parse_thread.get_queue_reference())\r\n                self.parse_thread.insert_output_queue(self.log_thread.get_queue_reference())\r\n                  ^\r\n------------------------------------------------------------\r\n\r\nHardware/interface_wrapper.pyx:138:19: Object of type 'BatParserThread' has no attribute 'insert_output_queue'\r\n\r\nError compiling Cython file:\r\n------------------------------------------------------------\r\n...\r\n\r\n                # Queue structure:\r\n                # [USB Thread] -> [Parse Thread] -> [Log Thread]\r\n\r\n                self.usb_thread.insert_output_queue(self.parse_thread.get_queue_reference())\r\n                self.parse_thread.insert_output_queue(self.log_thread.get_queue_reference())\r\n                                                                          ^\r\n------------------------------------------------------------\r\n\r\nHardware/interface_wrapper.pyx:138:75: Cannot convert 'ReaderWriterQueue[UsbMessageRecord] &' to Python object\r\nbuilding 'Hardware.interface_wrapper' extension\r\narm-linux-gnueabihf-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -fPIC -I. -I/usr/include/ -I/usr/lib/openmpi/include/ -I/usr/include/hdf5/serial -I/usr/include/python3.4m -c /home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.cpp -o /home/pi/.pyxbld/temp.linux-armv7l-3.4/home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.o -std=c++11 -O3 -Wall -Werror -lrt -lusb-1.0 -DLINUX\r\ncc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++\r\n/home/pi/.pyxbld/temp.linux-armv7l-3.4/pyrex/Hardware/interface_wrapper.cpp:1:2: error: #error Do not use this file, it is the result of a failed Cython compilation.\r\n #error Do not use this file, it is the result of a failed Cython compilation.\r\n  ^\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.4/distutils/unixccompiler.py\", line 116, in _compile\r\n    extra_postargs)\r\n  File \"/usr/lib/python3.4/distutils/ccompiler.py\", line 909, in spawn\r\n    spawn(cmd, dry_run=self.dry_run)\r\n  File \"/usr/lib/python3.4/distutils/spawn.py\", line 36, in spawn\r\n    _spawn_posix(cmd, search_path, dry_run=dry_run)\r\n  File \"/usr/lib/python3.4/distutils/spawn.py\", line 162, in _spawn_posix\r\n    % (cmd, exit_status))\r\ndistutils.errors.DistutilsExecError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 216, in load_module\r\n    inplace=build_inplace, language_level=language_level)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 192, in build_module\r\n    reload_support=pyxargs.reload_support)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyxbuild.py\", line 102, in pyx_to_dll\r\n    dist.run_commands()\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 955, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 185, in run\r\n    _build_ext.build_ext.run(self)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 339, in run\r\n    self.build_extensions()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 193, in build_extensions\r\n    self.build_extension(ext)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 503, in build_extension\r\n    depends=ext.depends)\r\n  File \"/usr/lib/python3.4/distutils/ccompiler.py\", line 574, in compile\r\n    self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\r\n  File \"/usr/lib/python3.4/distutils/unixccompiler.py\", line 118, in _compile\r\n    raise CompileError(msg)\r\ndistutils.errors.CompileError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"acquire_only.py\", line 23, in <module>\r\n    import Hardware.acq_hardware\r\n  File \"/home/pi/BatLogger/Interface/Hardware/acq_hardware.py\", line 11, in <module>\r\n    from . import interface_wrapper\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 445, in load_module\r\n    language_level=self.language_level)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 232, in load_module\r\n    raise exc.with_traceback(tb)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 216, in load_module\r\n    inplace=build_inplace, language_level=language_level)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyximport.py\", line 192, in build_module\r\n    reload_support=pyxargs.reload_support)\r\n  File \"/usr/local/lib/python3.4/dist-packages/pyximport/pyxbuild.py\", line 102, in pyx_to_dll\r\n    dist.run_commands()\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 955, in run_commands\r\n    self.run_command(cmd)\r\n  File \"/usr/lib/python3.4/distutils/dist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 185, in run\r\n    _build_ext.build_ext.run(self)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 339, in run\r\n    self.build_extensions()\r\n  File \"/usr/local/lib/python3.4/dist-packages/Cython/Distutils/old_build_ext.py\", line 193, in build_extensions\r\n    self.build_extension(ext)\r\n  File \"/usr/lib/python3.4/distutils/command/build_ext.py\", line 503, in build_extension\r\n    depends=ext.depends)\r\n  File \"/usr/lib/python3.4/distutils/ccompiler.py\", line 574, in compile\r\n    self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)\r\n  File \"/usr/lib/python3.4/distutils/unixccompiler.py\", line 118, in _compile\r\n    raise CompileError(msg)\r\nImportError: Building module Hardware.interface_wrapper failed: [\"distutils.errors.CompileError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\\n\"]\r\n```\r\n\r\nI don't see why the later tracebacks couldn't just re-raise the initial error, preventing the additional clutter. As it is, I tend to do my test-building `python3 script_name.py 2>&1 | head -n 50`, but shell hacks seem kind of crude.\r\n\r\nAlternatively, why not pack the error messages from the compilation failure into the error? It already contains lines from further down the build process:\r\n\r\n```\r\nImportError: Building module Hardware.interface_wrapper failed: [\"distutils.errors.CompileError: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\\n\"]\r\n```\r\n\r\nIt seems like if the `g++` `stderr` was attached to the python error and percolated up through the handler chain, it could at least be output at the end of the traceback block, rather then before (for that matter, if you have a custom error with a overridden `__repr__()` and `__str__()`, does the interpreter use those when it's printed to the console)?",
    "closed_at": null,
    "comment_data": [
        {
            "body": "1) I do not recommend using `pyximport` as part of a build (but I guess that's just your example).\r\n2) If you call cythonize() before setup(), the C compiler will not be run at all if the translation fails, so the error output will end with Cython's own output instead of the multi-step exception tracebacks above.\r\n\r\nApart from that, I agree that an exception trace is not helpful at the end of a failed Cython compilation. The exception should be caught instead and printed without the traceback.",
            "created_at": "2017-08-26T11:15:28Z",
            "html_url": "https://github.com/cython/cython/issues/1827#issuecomment-325116315",
            "id": 325116315,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1827",
            "updated_at": "2017-08-26T11:15:28Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/325116315",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "body": "> I do not recommend using pyximport as part of a build (but I guess that's just your example).\r\n\r\nUh.... what? How do you use cython files without building them?\r\n\r\nBasically, I have a project that's distributed as source. It is a bunch of python, a few pyx files, and a bunch of C++ files. You run the project, and if needed, it uses a `pyxbld` config file to build the pyx files, the c++ files, and glue them together, and then executes. \r\n\r\nThe point is, there's no needed separate build step. which is both very convenient (from a development perspective), and means you never have to worry about having an out-of-date version of the cython/c++ code. \r\n\r\nI suppose I could have the cython stuff be built by a setuptools command, but that'd be annoying with no benefit. Your comments about calling `cythonize()` is irrelevant unless you do that.",
            "created_at": "2017-08-26T11:35:31Z",
            "html_url": "https://github.com/cython/cython/issues/1827#issuecomment-325118002",
            "id": 325118002,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1827",
            "updated_at": "2017-08-26T11:36:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/325118002",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1401239?v=4",
                "events_url": "https://api.github.com/users/fake-name/events{/privacy}",
                "followers_url": "https://api.github.com/users/fake-name/followers",
                "following_url": "https://api.github.com/users/fake-name/following{/other_user}",
                "gists_url": "https://api.github.com/users/fake-name/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fake-name",
                "id": 1401239,
                "login": "fake-name",
                "organizations_url": "https://api.github.com/users/fake-name/orgs",
                "received_events_url": "https://api.github.com/users/fake-name/received_events",
                "repos_url": "https://api.github.com/users/fake-name/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fake-name/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fake-name/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fake-name"
            }
        },
        {
            "body": "On Sat, Aug 26, 2017 at 4:35 AM, Connor Wolf <notifications@github.com>\nwrote:\n\n> I do not recommend using pyximport as part of a build (but I guess that's\n> just your example).\n>\n> Uh.... what? How do you use cython files without building them?\n>\n> Basically, I have a project that's distributed as source. It is a bunch of\n> python, a few pyx files, and a bunch of C++ files. You run the project, and\n> if needed, it builds the pyx files, the c++ files, and glues them together\n> using a pyxbld config file, and then executes.\n>\n> The point is, there's no needed separate build step. which is both very\n> convenient (from a development perspective), and means you never have to\n> worry about having an out-of-date version of the cython/c++ code.\n>\n> I suppose I could have the cython stuff be built by a setuptools command,\n> but that'd be annoying with no benefit. Your comments about calling\n> cythonize() is irrelevant unless you do that.\n>\nUsing a setup.py with setuptools is more robust (and well tested) than\npyximport, as well as being the standard way to do things.\n",
            "created_at": "2017-08-26T17:44:23Z",
            "html_url": "https://github.com/cython/cython/issues/1827#issuecomment-325151139",
            "id": 325151139,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1827",
            "updated_at": "2017-08-26T17:44:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/325151139",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/20618978?v=4",
                "events_url": "https://api.github.com/users/cython-notifications/events{/privacy}",
                "followers_url": "https://api.github.com/users/cython-notifications/followers",
                "following_url": "https://api.github.com/users/cython-notifications/following{/other_user}",
                "gists_url": "https://api.github.com/users/cython-notifications/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/cython-notifications",
                "id": 20618978,
                "login": "cython-notifications",
                "organizations_url": "https://api.github.com/users/cython-notifications/orgs",
                "received_events_url": "https://api.github.com/users/cython-notifications/received_events",
                "repos_url": "https://api.github.com/users/cython-notifications/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/cython-notifications/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cython-notifications/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/cython-notifications"
            }
        },
        {
            "body": "> there's no needed separate build step. which is both very convenient (from a development perspective),\r\n\r\npyximport is ok for testing and developing. That's its main use case, IMHO. Pull requests that improve pyximport are welcome. It has not changed in years and is not up to date with the less old improvements in Cython's build support.\r\n\r\nIMHO, pyximport should not be imposed on users of Cython code. Definitely not by libraries. Applications are different as they can control their runtime environment, but even there it still has the drawback of making imports more complex and less controllable by end users.\r\n\r\n> and means you never have to worry about having an out-of-date version of the cython/c++ code.\r\n\r\nPeople commonly include the generated (and tested) .c/.cpp files in the sdist that they publish on PyPI. That avoids a dependency on Cython and prevents users from accidentally using a different version of Cython to compile your code, which makes it more predictable what they get. If your code starts failing to build with a newer version of Cython, or if the Cython version that they happen to have installed has a bug that affects your code, users will be on their own to resolve it when they try to install an existing version of your code.\r\n\r\n> I suppose I could have the cython stuff be built by a setuptools command, but that'd be annoying with no benefit.\r\n\r\nPeople commonly distribute binary wheels these days, which are very fast to install and do not depend on compilers being installed on user side, be it Cython or a C compiler. I do not know about the specific constraints of your project, but this is a proven huge benefit for the large majority of users I heard of.",
            "created_at": "2017-08-27T07:13:46Z",
            "html_url": "https://github.com/cython/cython/issues/1827#issuecomment-325181479",
            "id": 325181479,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1827",
            "updated_at": "2017-08-27T07:13:46Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/325181479",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "body": "In this case, the project is some custom hardware, C++ that talks to it, and python that manages the runtime. \r\n\r\nDevelopment hasn't even reached the point where I'd vaguely considered trying to abstract everything up into a library that gets versioned separately from the entire hardware stack.\r\n\r\nI'd assume that the great majority of people *writing* cython code are **not** writing libraries, and as such pyximport is probably more broadly used/convenient then depending on distutils.\r\n\r\nNote that there are probably more people *using* cython code via distutils then pyximport, but that's separate from people *writing* cython code.\r\n\r\n\r\n------\r\n\r\n> pyximport is ok for testing and developing. That's its main use case, IMHO. Pull requests that improve pyximport are welcome. It has not changed in years and is not up to date with the less old improvements in Cython's build support.\r\n\r\n\r\nUh, really? Like what? I use the pyximport stuff pretty heavily as a end-user of cython, typically to do spot-performance-improvements of non-widely-deployed code, and its been quite nice. If there's improvements I'm missing, I'd love to hear about them.\r\n\r\n",
            "created_at": "2017-08-27T07:50:53Z",
            "html_url": "https://github.com/cython/cython/issues/1827#issuecomment-325182914",
            "id": 325182914,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1827",
            "updated_at": "2017-08-27T08:01:59Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/325182914",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1401239?v=4",
                "events_url": "https://api.github.com/users/fake-name/events{/privacy}",
                "followers_url": "https://api.github.com/users/fake-name/followers",
                "following_url": "https://api.github.com/users/fake-name/following{/other_user}",
                "gists_url": "https://api.github.com/users/fake-name/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fake-name",
                "id": 1401239,
                "login": "fake-name",
                "organizations_url": "https://api.github.com/users/fake-name/orgs",
                "received_events_url": "https://api.github.com/users/fake-name/received_events",
                "repos_url": "https://api.github.com/users/fake-name/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fake-name/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fake-name/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fake-name"
            }
        },
        {
            "body": "> I'd assume that the great majority of people writing cython code are not writing libraries, and as such pyximport is probably more broadly used/convenient then depending on distutils.\r\n\r\nWhile that is an unbacked opinion, I fully appreciate people who extend the applicable range of tools beyond what they where initially designed for.\r\n\r\nThat being said, I think this ticket is getting out of scope. I'd like to restrict it to the initial intention of improving the error output of pyximport.",
            "created_at": "2017-08-27T08:01:35Z",
            "html_url": "https://github.com/cython/cython/issues/1827#issuecomment-325183391",
            "id": 325183391,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1827",
            "updated_at": "2017-08-27T08:02:23Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/325183391",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "body": "> While that is an unbacked opinion, I fully appreciate people who extend the applicable range of tools beyond what they where initially designed for.\r\n\r\nHah, well, I did say I assume, so I'd happily admit I have little basis. \r\n\r\n> That being said, I think this ticket is getting out of scope. I'd like to restrict it the initial intention of improving the error output of pyximport.\r\n\r\nOk.",
            "created_at": "2017-08-27T08:02:47Z",
            "html_url": "https://github.com/cython/cython/issues/1827#issuecomment-325183450",
            "id": 325183450,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1827",
            "updated_at": "2017-08-27T08:02:47Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/325183450",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/1401239?v=4",
                "events_url": "https://api.github.com/users/fake-name/events{/privacy}",
                "followers_url": "https://api.github.com/users/fake-name/followers",
                "following_url": "https://api.github.com/users/fake-name/following{/other_user}",
                "gists_url": "https://api.github.com/users/fake-name/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/fake-name",
                "id": 1401239,
                "login": "fake-name",
                "organizations_url": "https://api.github.com/users/fake-name/orgs",
                "received_events_url": "https://api.github.com/users/fake-name/received_events",
                "repos_url": "https://api.github.com/users/fake-name/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/fake-name/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/fake-name/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/fake-name"
            }
        }
    ],
    "comments": 7,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1827/comments",
    "created_at": "2017-08-17T23:30:59Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-08-26T11:16:27Z",
            "event": "labeled",
            "id": 1222467449,
            "label": {
                "color": "444444",
                "name": "Build System"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/1222467449"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-08-26T11:16:27Z",
            "event": "labeled",
            "id": 1222467450,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/1222467450"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-08-26T11:16:27Z",
            "event": "labeled",
            "id": 1222467451,
            "label": {
                "color": "444444",
                "name": "P: minor"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/1222467451"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-08-26T11:16:27Z",
            "event": "labeled",
            "id": 1222467452,
            "label": {
                "color": "0e8a16",
                "name": "patch wanted"
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/1222467452"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "0da7a1d81747d87663b00e4bcbca8c203ec46d47",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/0da7a1d81747d87663b00e4bcbca8c203ec46d47",
            "created_at": "2017-08-27T07:48:41Z",
            "event": "referenced",
            "id": 1222720039,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1222720039"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-08-27T08:01:56Z",
            "event": "renamed",
            "id": 1222722811,
            "rename": {
                "from": "Cython/PYX compilation failure tracebacks are excessively long.",
                "to": "pyximport compilation failure tracebacks are excessively long."
            },
            "url": "https://api.github.com/repos/cython/cython/issues/events/1222722811"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1827/events",
    "html_url": "https://github.com/cython/cython/issues/1827",
    "id": 251100475,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425556353,
            "name": "Build System",
            "url": "https://api.github.com/repos/cython/cython/labels/Build%20System"
        },
        {
            "color": "444444",
            "default": false,
            "id": 425553654,
            "name": "defect",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        },
        {
            "color": "444444",
            "default": false,
            "id": 425556338,
            "name": "P: minor",
            "url": "https://api.github.com/repos/cython/cython/labels/P:%20minor"
        },
        {
            "color": "0e8a16",
            "default": false,
            "id": 414800879,
            "name": "patch wanted",
            "url": "https://api.github.com/repos/cython/cython/labels/patch%20wanted"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1827/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1827,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "pyximport compilation failure tracebacks are excessively long.",
    "updated_at": "2017-08-27T08:02:47Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1827",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1401239?v=4",
        "events_url": "https://api.github.com/users/fake-name/events{/privacy}",
        "followers_url": "https://api.github.com/users/fake-name/followers",
        "following_url": "https://api.github.com/users/fake-name/following{/other_user}",
        "gists_url": "https://api.github.com/users/fake-name/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/fake-name",
        "id": 1401239,
        "login": "fake-name",
        "organizations_url": "https://api.github.com/users/fake-name/orgs",
        "received_events_url": "https://api.github.com/users/fake-name/received_events",
        "repos_url": "https://api.github.com/users/fake-name/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/fake-name/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fake-name/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/fake-name"
    }
}