{
    "assignee": null,
    "assignees": [],
    "body": "[We](https://github.com/SFTtech/openage)'d like to see support for variadic template arguments, such as this:\r\n\r\ntest.h:\r\n``` cpp\r\ntemplate<typename RetT, typename ... VARARGS>\r\nRetT foo(VARARGS ...);\r\n```\r\n\r\ntest.pyx:\r\n``` cython\r\ncdef extern from \"test.h\":\r\n    cdef RetT foo[RetT, ... VARARGS](... VARARGS)\r\n\r\ndef test():\r\n    cdef int i = foo[int, float, int](1, 2.5, 3)\r\n```\r\n\r\nThis would allow Cython's `libcpp` to easily support many of C++11's new types, including `std::tuple` and `std::function`.\r\n\r\nSupport for the latter in particular would prove quite useful in passing around function pointers between Cython and C++.\r\n\r\n\r\nWe have tried to implement this feature myself, but we're entirely unfamiliar with Cython's codebase, and all my attempts ended in unsatisfactorily hacky, unstable code. We believe that any experienced Cython developer on this list would be able to properly implement this in a matter of a few hours, as it seems like a rather minor feature.\r\n\r\nThe current workaround for the non-existance of this feature involves typedefs for every possible number of arguments, like this:\r\n\r\n``` cpp\r\ntemplate<typename ... Ts>\r\nstruct S {};\r\n\r\nusing S0 = S<>;\r\n\r\ntemplate<typename T0>\r\nusing S1 = S<T0>;\r\n\r\ntemplate<typename T0, typename T1>\r\nusing S2 = S<T0, T1>;\r\n\r\ntemplate<typename T0, typename T1, typename T2>\r\nusing S3 = S<T0, T1, T2>;\r\n```\r\n\r\nthen exporting all of S0, S1, ... individually in the `.pxd` file.\r\n\r\n[This is inconvenient, but acceptable](https://github.com/SFTtech/openage/blob/0dd8667f6accdfbd9473f920a58c4f2d52db4cae/libopenage/pyinterface/functional.h).\r\n\r\nNow assume that `S` has a member function `f`:\r\n\r\n``` cpp\r\ntemplate<typename ... Us>\r\nvoid f(Ts..., Us ...);\r\n```\r\n\r\ndue to the nature of C++, the same trick as above does not work, and the user will be forced to clutter the C++ code with a function body for every possible `len(Us)`. Even worse, the `.pxd` file will now contain a quadratic number of wrappers (one for every possible combination of `len(Ts)`, `len(Us)`), all of them extremely prone to mistakes.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1611/comments",
    "created_at": "2017-02-22T22:46:49Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1611/events",
    "html_url": "https://github.com/cython/cython/issues/1611",
    "id": 209606398,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1611/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1611,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Variadic template support",
    "updated_at": "2017-02-22T22:47:21Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1611",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/673543?v=3",
        "events_url": "https://api.github.com/users/TheJJ/events{/privacy}",
        "followers_url": "https://api.github.com/users/TheJJ/followers",
        "following_url": "https://api.github.com/users/TheJJ/following{/other_user}",
        "gists_url": "https://api.github.com/users/TheJJ/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/TheJJ",
        "id": 673543,
        "login": "TheJJ",
        "organizations_url": "https://api.github.com/users/TheJJ/orgs",
        "received_events_url": "https://api.github.com/users/TheJJ/received_events",
        "repos_url": "https://api.github.com/users/TheJJ/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/TheJJ/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/TheJJ/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/TheJJ"
    }
}