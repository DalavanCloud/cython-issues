{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Test code:\r\n\r\ntest_run.py\r\n```python\r\nfrom test import test\r\n\r\nif __name__ == '__main__':\r\n    test()\r\n```\r\n\r\ntest.py\r\n```python\r\n# coding: utf-8\r\nimport asyncio\r\nimport inspect\r\nimport logging\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\n\r\nasync def async_func():\r\n    await asyncio.sleep(1)\r\n\r\n\r\ndef test():\r\n    logging.info(f' inspect.iscoroutinefunction='\r\n                 f'{inspect.iscoroutinefunction(async_func)}')\r\n\r\n    logging.info(f' asyncio.coroutines.iscoroutinefunction='\r\n                 f'{asyncio.coroutines.iscoroutinefunction(async_func)}')\r\n```\r\n\r\nrun:\r\n```\r\n$ /usr/local/lib/python3.6.3/bin/python3 ./test_run.py\r\nINFO:root: inspect.iscoroutinefunction=True\r\nINFO:root: asyncio.coroutines.iscoroutinefunction=True\r\n$ /usr/local/lib/python3.6.3/bin/cython -3 -X always_allow_keywords=True -D ./test.py\r\n$ /usr/local/bin/gcc -shared -pthread -pipe -fPIC -fwrapv -Wall -fno-strict-aliasing -O2 -I/usr/local/lib/python3.6.3/include/python3.6m -o ./test.so ./test.c\r\n$ /usr/local/lib/python3.6.3/bin/python3 ./test_run.py                                                                                                        \r\nINFO:root: inspect.iscoroutinefunction=False\r\nINFO:root: asyncio.coroutines.iscoroutinefunction=False\r\n$ rm ./test.so \r\n$ /usr/local/lib/python3.6.3/bin/python3 ./test_run.py \r\nINFO:root: inspect.iscoroutinefunction=True\r\nINFO:root: asyncio.coroutines.iscoroutinefunction=True\r\n```\r\n\r\nWhat I am doing wrong? Thanks\r\n\r\n```\r\n$ /usr/local/lib/python3.6.3/bin/cython --version                                                                                                             \r\nCython version 0.28a0\r\n```\r\n",
    "closed_at": "2018-02-10T22:34:21Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "That's correct, yes. Cython compiled coroutines do not have byte code, and they are not Python generators. They implement the same protocol, but they are technically not the same thing (in the same way that a list iterator is not a dict iterator, even though both are iterators).\r\n\r\nThe `inspect` module should definitely return `False`. Whether the `asyncio` module should also return `False` is debatable. It could be argued that that's a bug in `asyncio`, but deciding that would require a deep look into the internals of `asyncio` to figure out the exact semantics that is intended there. Please reopen if you have reason to believe that Cython should do something about this, rather than fixing it in asyncio.",
            "created_at": "2018-02-10T22:34:21Z",
            "html_url": "https://github.com/cython/cython/issues/2092#issuecomment-364701257",
            "id": 364701257,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2092",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDcwMTI1Nw==",
            "updated_at": "2018-02-10T22:34:21Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/364701257",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        },
        {
            "author_association": "NONE",
            "body": "@scoder the implementation in asyncio is ridiculous\r\n\r\n```\r\ndef iscoroutinefunction(func):\r\n    \"\"\"Return True if func is a decorated coroutine function.\"\"\"\r\n    return (inspect.iscoroutinefunction(func) or\r\n            getattr(func, '_is_coroutine', None) is _is_coroutine)\r\n```\r\n\r\nSo once we agreed `inspect` returns False, it happens to be that CPython just add a simple attribute to the function `_is_coroutine`, I think if Cython does this adding up this attribute it will make everything work\r\n\r\nHere: https://github.com/python/cpython/blob/789e359f51d2b27bea01b8c6c3bf090aaedf8839/Lib/asyncio/coroutines.py#L152\r\n\r\nAnd here: \r\nhttps://github.com/python/cpython/blob/789e359f51d2b27bea01b8c6c3bf090aaedf8839/Lib/asyncio/coroutines.py#L160\r\n\r\nSo the solution as it can't be another it results in this, from my test in iPython:\r\n\r\n```\r\nIn [46]: fut = init_connection()\r\nIn [47]: asyncio.iscoroutine(fut)\r\nOut[47]: True\r\n\r\nIn [49]: init_connection.__class__\r\nOut[49]: cython_function_or_method\r\n\r\nIn [50]: asyncio.iscoroutinefunction(init_connection)\r\nOut[50]: False\r\n\r\nIn [56]: from asyncio.coroutines import _is_coroutine\r\n\r\nIn [57]: init_connection._is_coroutine = _is_coroutine\r\n\r\nIn [58]: asyncio.iscoroutinefunction(init_connection)\r\nOut[58]: True\r\n```\r\n\r\nDirty but easy. Don't know if this is a 5 seconds issue or a hara-kiri, theoretically it should be easy to plug the attribute runtime from `from asyncio.coroutines import _is_coroutine`, or not.\r\n\r\nThis is a super annoying problem (I don't blame anyone with the word _bug_) that make cythonized code to be very dramatic in several asyncio frameworks. `asyncio.iscoroutine` work well with cythonized funcs for the silliest reason I think.",
            "created_at": "2018-05-05T21:23:50Z",
            "html_url": "https://github.com/cython/cython/issues/2092#issuecomment-386835983",
            "id": 386835983,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2092",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgzNTk4Mw==",
            "updated_at": "2018-05-05T21:23:50Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/386835983",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1827475?v=4",
                "events_url": "https://api.github.com/users/danigosa/events{/privacy}",
                "followers_url": "https://api.github.com/users/danigosa/followers",
                "following_url": "https://api.github.com/users/danigosa/following{/other_user}",
                "gists_url": "https://api.github.com/users/danigosa/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/danigosa",
                "id": 1827475,
                "login": "danigosa",
                "node_id": "MDQ6VXNlcjE4Mjc0NzU=",
                "organizations_url": "https://api.github.com/users/danigosa/orgs",
                "received_events_url": "https://api.github.com/users/danigosa/received_events",
                "repos_url": "https://api.github.com/users/danigosa/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/danigosa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danigosa/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/danigosa"
            }
        },
        {
            "author_association": "NONE",
            "body": "I found a filthy workaround just in case anyone falls into desperation:\r\n\r\nFollowing the `cyfunctions` above, `create_token` is NOT a coroutine, while `init_connection` is an `async` function, **this workaround works in both so it's ok if you can schedule the functions whether are coros or not**, no way to easily fix this with `asyncio.iscoroutinefunction` or at least easier than that:\r\n\r\n```\r\nIn [59]: async def test():\r\n    ...:     await create_token({})\r\n    ...:\r\nIn [61]: asyncio.get_event_loop().run_until_complete(test())\r\nTypeError: object str can't be used in 'await' expression\r\n\r\nIn [73]: async def test():\r\n    ...:     return await init_connection()\r\nOut[74]: <asyncpg.pool.Pool at 0x7f78e04752c8>\r\n```\r\n\r\nHere comes the magic:\r\n\r\n```\r\nIn [69]: async def test():\r\n    ...:     return await asyncio.coroutine(create_token)({})\r\nIn [70]: asyncio.get_event_loop().run_until_complete(test())\r\nOut[70]: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJleHAiOjE1MjU1NTk0NTB9.v8wRZGIke6RYizIpJhl4oaypKyvuVARKaiq0KdpJg6XJ0qTB0o76BuTLera6kSQ_5qXnAb7_9DQSadwdRqgPmw'\r\n\r\nIn [71]: async def test():\r\n    ...:     return await asyncio.coroutine(init_connection)()\r\nIn [72]: asyncio.get_event_loop().run_until_complete(test())\r\nOut[72]: <asyncpg.pool.Pool at 0x7f78df48af48>\r\n```\r\n\r\nWith that the workaround:\r\n\r\n```python\r\ndef nasty_iscoroutinefunction(func):\r\n      is_coro = asyncio. iscoroutinefunction(func)\r\n      if func.__class__.__name__ == 'cython_function_or_method':\r\n            # It's cythonized, danger!\r\n            is_coro = True  # We'll make it possible\r\n            func = asyncio.coroutine(func)\r\n      return is_coro\r\n```\r\n\r\nThis works!\r\n",
            "created_at": "2018-05-05T21:42:35Z",
            "html_url": "https://github.com/cython/cython/issues/2092#issuecomment-386837071",
            "id": 386837071,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2092",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjgzNzA3MQ==",
            "updated_at": "2018-05-05T21:45:34Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/386837071",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/1827475?v=4",
                "events_url": "https://api.github.com/users/danigosa/events{/privacy}",
                "followers_url": "https://api.github.com/users/danigosa/followers",
                "following_url": "https://api.github.com/users/danigosa/following{/other_user}",
                "gists_url": "https://api.github.com/users/danigosa/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/danigosa",
                "id": 1827475,
                "login": "danigosa",
                "node_id": "MDQ6VXNlcjE4Mjc0NzU=",
                "organizations_url": "https://api.github.com/users/danigosa/orgs",
                "received_events_url": "https://api.github.com/users/danigosa/received_events",
                "repos_url": "https://api.github.com/users/danigosa/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/danigosa/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/danigosa/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/danigosa"
            }
        }
    ],
    "comments": 3,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2092/comments",
    "created_at": "2018-02-05T10:59:48Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-02-10T22:34:21Z",
            "event": "closed",
            "id": 1468201857,
            "node_id": "MDExOkNsb3NlZEV2ZW50MTQ2ODIwMTg1Nw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1468201857"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-05-05T21:23:50Z",
            "event": "mentioned",
            "id": 1611438115,
            "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYxMTQzODExNQ==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1611438115"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-05-05T21:23:50Z",
            "event": "subscribed",
            "id": 1611438116,
            "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MTE0MzgxMTY=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1611438116"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2092/events",
    "html_url": "https://github.com/cython/cython/issues/2092",
    "id": 294352133,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2092/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUyOTQzNTIxMzM=",
    "number": 2092,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "iscoroutine returns False for native coroutines in python 3.5+",
    "updated_at": "2018-05-05T21:45:34Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2092",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1058344?v=4",
        "events_url": "https://api.github.com/users/ramonz/events{/privacy}",
        "followers_url": "https://api.github.com/users/ramonz/followers",
        "following_url": "https://api.github.com/users/ramonz/following{/other_user}",
        "gists_url": "https://api.github.com/users/ramonz/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ramonz",
        "id": 1058344,
        "login": "ramonz",
        "node_id": "MDQ6VXNlcjEwNTgzNDQ=",
        "organizations_url": "https://api.github.com/users/ramonz/orgs",
        "received_events_url": "https://api.github.com/users/ramonz/received_events",
        "repos_url": "https://api.github.com/users/ramonz/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ramonz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ramonz/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ramonz"
    }
}