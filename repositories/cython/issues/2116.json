{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "This is the C code that Cython uses to implement the builtin `next()`:\r\n```C\r\nstatic CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {\r\n    PyObject* next;\r\n    // we always do a quick slot check because always PyIter_Check() is so wasteful\r\n    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;\r\n    if (likely(iternext)) {\r\n#if CYTHON_USE_TYPE_SLOTS\r\n        next = iternext(iterator);\r\n        if (likely(next))\r\n            return next;\r\n        #if PY_VERSION_HEX >= 0x02070000\r\n        if (unlikely(iternext == &_PyObject_NextNotImplemented))\r\n            return NULL;\r\n        #endif\r\n#else\r\n        // note: PyIter_Next() crashes if the slot is NULL in CPython\r\n        next = PyIter_Next(iterator);\r\n        if (likely(next))\r\n            return next;\r\n#endif\r\n    } else if (CYTHON_USE_TYPE_SLOTS || !PyIter_Check(iterator)) {\r\n        __Pyx_PyIter_Next_ErrorNoIterator(iterator);\r\n        return NULL;\r\n    }\r\n    return __Pyx_PyIter_Next2Default(defval);\r\n}\r\n\r\nstatic PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {\r\n    PyObject* exc_type;\r\n    __Pyx_PyThreadState_declare\r\n    __Pyx_PyThreadState_assign\r\n    exc_type = __Pyx_PyErr_Occurred();\r\n    if (unlikely(exc_type)) {\r\n        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))\r\n            return NULL;\r\n        if (defval) {\r\n            __Pyx_PyErr_Clear();\r\n            Py_INCREF(defval);\r\n        }\r\n        return defval;\r\n    }\r\n    if (defval) {\r\n        Py_INCREF(defval);\r\n        return defval;\r\n    }\r\n    __Pyx_PyErr_SetNone(PyExc_StopIteration);\r\n    return NULL;\r\n}\r\n```\r\n\r\n1. The logic if `CYTHON_USE_TYPE_SLOTS` is false looks wrong: it should not use `tp_iternext`. Instead, it should first check `PyIter_Check` and then call `PyIter_Next`.\r\n\r\n2. The function `__Pyx_PyIter_Next2Default` is called only from one place, so why not fold the implementation inside `__Pyx_PyIter_Next2`?\r\n\r\n3. `__Pyx_PyIter_Next2Default` checks `__Pyx_PyErr_Occurred()` but it seems to me that this is always true.\r\n\r\n4. If `defval is NULL`, then there is no need to check whether the exception is `StopIteration`: it should immediately `return NULL`.",
    "closed_at": "2018-02-24T12:35:42Z",
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "1) I was trying to be smart there and assumed that `CYTHON_USE_TYPE_SLOTS` would only be disabled on platforms that potentially do not set `tp_iternext`. Since users can also `-D`define it themselves, that might not be a safe assumption. Definitely the kind of code that would have deserved some more comments...\r\n\r\n2) I split both to limit the scope of the `CYTHON_INLINE` request. The second function is a non-critical fallback, and I want the C compiler to understand the difference.\r\n\r\n3) `tp_iternext` is allowed to return `NULL` without setting an exception when the iteration terminates.\r\n\r\n4) Sounds good.",
            "created_at": "2018-02-24T09:35:08Z",
            "html_url": "https://github.com/cython/cython/issues/2116#issuecomment-368215261",
            "id": 368215261,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2116",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODIxNTI2MQ==",
            "updated_at": "2018-02-24T09:37:54Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/368215261",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2116/comments",
    "created_at": "2018-02-23T13:39:06Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "1fce8d804766f1c8988c4a851eaec2ad0dbc78b6",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/1fce8d804766f1c8988c4a851eaec2ad0dbc78b6",
            "created_at": "2018-02-24T09:36:14Z",
            "event": "referenced",
            "id": 1490371941,
            "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0OTAzNzE5NDE=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1490371941"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": "8581fb721deaaa36665b4f13aff66cc9dfafae76",
            "commit_url": "https://api.github.com/repos/cython/cython/commits/8581fb721deaaa36665b4f13aff66cc9dfafae76",
            "created_at": "2018-02-24T12:35:42Z",
            "event": "closed",
            "id": 1490417937,
            "node_id": "MDExOkNsb3NlZEV2ZW50MTQ5MDQxNzkzNw==",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1490417937"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2116/events",
    "html_url": "https://github.com/cython/cython/issues/2116",
    "id": 299714250,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2116/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUyOTk3MTQyNTA=",
    "number": 2116,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Implementation of next() looks inefficient",
    "updated_at": "2018-02-24T12:35:42Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2116",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/3625785?v=4",
        "events_url": "https://api.github.com/users/jdemeyer/events{/privacy}",
        "followers_url": "https://api.github.com/users/jdemeyer/followers",
        "following_url": "https://api.github.com/users/jdemeyer/following{/other_user}",
        "gists_url": "https://api.github.com/users/jdemeyer/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jdemeyer",
        "id": 3625785,
        "login": "jdemeyer",
        "node_id": "MDQ6VXNlcjM2MjU3ODU=",
        "organizations_url": "https://api.github.com/users/jdemeyer/orgs",
        "received_events_url": "https://api.github.com/users/jdemeyer/received_events",
        "repos_url": "https://api.github.com/users/jdemeyer/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jdemeyer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jdemeyer/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jdemeyer"
    }
}