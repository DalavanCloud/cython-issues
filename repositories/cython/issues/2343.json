{
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "In order to support [PEP-489](https://www.python.org/dev/peps/pep-0489) (multi-step module initialisation and reinitialisation), the global state of modules must become local to a module instance. Initial support for PEP-489 is in PR #1919.\r\n\r\nFurther links:\r\n- [PEP-573](https://www.python.org/dev/peps/pep-0573/) about accessing module state from extension type methods\r\n- [PEP-575](https://www.python.org/dev/peps/pep-0575/) about refactoring CPython's C functions\r\n- [Meta-PEP 576](https://www.python.org/dev/peps/pep-0576/) about function type changes\r\n\r\nApproach for Cython:\r\n1) Require users to explicitly enable this feature with a compiler directive, as Cython cannot safely determine that a module supports this (there might be global state in external C libraries or C function callbacks), and there will be a visible performance impact.\r\n\r\n2) Move all globals into a struct that gets stored in the CPython module state.\r\n\r\n3) Use context variables ([PEP 567](https://www.python.org/dev/peps/pep-0567/)) to pass the module state into C functions (also across coroutine dispatches etc.).\r\n\r\n4) Copy all extension types to the heap to make them specific to a module instance and their methods aware of the module.\r\n\r\n5) Allow users to make specific module globals shared across modules with a new declaration.\r\n\r\nThus, the following module:\r\n\r\n```cython\r\ncdef int x = 8\r\n\r\ncdef int func():\r\n    n = x\r\n    return n\r\n\r\ndef get():\r\n    print(self.x)\r\n    return func()\r\n\r\ndef change(n):\r\n    global x\r\n    self.x = n\r\n```\r\n\r\nwould internally be implemented as follows:\r\n\r\n```cython\r\ncdef int x = 8\r\n\r\ncdef int func():\r\n    __state = ContextVars['__cython_this_module_state_1234']\r\n    n = __state.x\r\n    return n\r\n\r\ndef get():\r\n    with context(__cython_this_module_state_1234=__module_c_state__):\r\n        print(self.x)\r\n        return func()\r\n\r\ndef change(n):\r\n    with context(__cython_this_module_state_1234=__module_c_state__):\r\n        global x\r\n        self.x = n\r\n```\r\n",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2343/comments",
    "created_at": "2018-06-15T07:43:26Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2343/events",
    "html_url": "https://github.com/cython/cython/issues/2343",
    "id": 332675997,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2343/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMzI2NzU5OTc=",
    "number": 2343,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Make module state local to a module instance (PEP-489/573)",
    "updated_at": "2018-06-17T09:33:50Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2343",
    "user": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
        "events_url": "https://api.github.com/users/scoder/events{/privacy}",
        "followers_url": "https://api.github.com/users/scoder/followers",
        "following_url": "https://api.github.com/users/scoder/following{/other_user}",
        "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/scoder",
        "id": 491659,
        "login": "scoder",
        "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
        "organizations_url": "https://api.github.com/users/scoder/orgs",
        "received_events_url": "https://api.github.com/users/scoder/received_events",
        "repos_url": "https://api.github.com/users/scoder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/scoder"
    }
}