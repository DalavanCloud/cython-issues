{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Cython Version 0.27.3 via conda-forge\r\n\r\nI can successfully compile a cython module, but on import an getting unknown reference errors on linux (not OS X).  This is a C++11 code base.  I am compiling the linked cpp using the same compiler and manually placing the .so into the appropriate anaconda python lib directory; compilation is working.\r\n\r\nA tiny example is below.  Using nm, I can see that the cython generated .so has undefined symbols (also fails on import).  Version(std::string) is not being defined for some reason.\r\n\r\n```\r\nU csm::Version::Version(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\r\nU std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@GLIBCXX_3.4.21\r\nU std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@@GLIBCXX_3.4.21\r\n```\r\n\r\nsetup.py\r\n```\r\nimport os\r\nimport pkg_resources\r\nimport sys\r\nimport sysconfig\r\nfrom setuptools import setup, Extension, find_packages\r\nfrom Cython.Build import cythonize\r\nfrom Cython.Distutils import build_ext\r\n\r\n# Look for the csmapi headers in the standard location\r\nincdir = os.path.dirname(sysconfig.get_path('include'))\r\nincdir = os.path.join(incdir, 'csm')\r\n\r\nINCLUDE_DIRS = [incdir]\r\nLIBRARY_DIRS = []  # This assumes that libcsmapi is installed in a standard place\r\nLIBRARIES = ['csmapi']\r\nCOMPILE_ARGS = ['-g', '-std=c++11','-zdefs'] #, '-std=c++11']\r\n\r\ndef generate_extension(path_name, sources):\r\n    return Extension(path_name,\r\n                sources=sources,\r\n                extra_compile_args=COMPILE_ARGS,\r\n                language='c++',\r\n                include_dirs=INCLUDE_DIRS,\r\n                runtime_library_dirs=LIBRARY_DIRS)\r\n                #library_dirs=LIBRARY_DIRS,\r\n                #libraries=LIBRARIES)\r\n\r\nif sys.platform == 'darwin':\r\n    COMPILE_ARGS.append('-mmacosx-version-min=10.9')\r\n\r\n\r\n# Create the extensions\r\nextensions = [generate_extension('cycsm.isd', ['cycsm/isd.pyx']),\r\n              generate_extension('cycsm.version', ['cycsm/version.pyx']),\r\n              generate_extension('cycsm.csm', ['cycsm/csm.pyx']),\r\n              generate_extension('cycsm.model', ['cycsm/model.pyx']),\r\n              generate_extension('cycsm.correlationmodel', ['cycsm/correlationmodel.pyx']),\r\n              generate_extension('cycsm.rastergm', ['cycsm/rastergm.pyx'])]\r\n\r\nsetup(\r\n    name='cycsm',\r\n    version='0.1.0',\r\n    cmdclass = {'build_ext':build_ext},\r\n    ext_modules=cythonize(extensions),\r\n    description='Cython wrapper to the Community Sensor Model API.',\r\n    author='Jay Laura',\r\n    packages = find_packages(),\r\n    include_package_data=True)\r\n\r\n```\r\n\r\nCpp Header:\r\n```c++\r\n#include <string>                                                               \r\n#include <iosfwd>                                                               \r\n#include <vector>                                                               \r\n#include <sstream>                                                              \r\n                                                                                \r\nnamespace csm                                                                   \r\n{                                                                               \r\n                                                                                \r\nclass CSM_EXPORT_API Version                                                    \r\n{                                                                               \r\npublic:                                                                         \r\n   explicit Version(const std::string& version);                                \r\n      //> This constructor makes a Version object with the given string version.\r\n      //  The string should be a sequence of numbers separated by periods (\".\").\r\n      //<                                                                          \r\n                                                                                \r\n   Version(int major, int minor, int revision = -1);                            \r\n      //> This constructor makes a Version object with the given major, minor,  \r\n      //  and revision version information.  The major and minor versions must  \r\n      //  be greater than or equal to 0, or an exception will be thrown.  If the\r\n      //  revision is less than zero, it will be omitted from the object.          \r\n      //                                                                        \r\n      //  The resulting version string will look like \"major.minor.revision\".   \r\n      //<                                                                        \r\n                                                                                \r\n   ~Version();                                                                  \r\n      //> This is the destructor.  This class has no virtual methods, and          \r\n      //  should not be derived from.                                           \r\n      //<  \r\n```\r\n\r\nPxd\r\n```python\r\nfrom libcpp.string cimport string\r\ncdef extern from \"Version.h\" namespace \"csm\":\r\n    cdef cppclass CppVersion \"csm::Version\":\r\n        CppVersion(int major, int minor, int revision) except +\r\n        CppVersion(string ver) except +\r\n```\r\n\r\nPyx\r\n```python\r\ncdef class Version:\r\n    def __cinit__(self, ver=None, major=1, minor=0, revision=0):\r\n        if ver != None:\r\n            self.thisptr = new CppVersion(ver.encode())\r\n        else:\r\n            self.thisptr = new CppVersion(major, minor, revision)\r\n```",
    "closed_at": "2017-11-17T04:58:11Z",
    "comment_data": [
        {
            "author_association": "OWNER",
            "body": "Please use cython-users@googlegroups.com  or, possibly, stack overflow, for user support.",
            "created_at": "2017-11-17T04:58:11Z",
            "html_url": "https://github.com/cython/cython/issues/2007#issuecomment-345145715",
            "id": 345145715,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2007",
            "updated_at": "2017-11-17T04:58:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/345145715",
            "user": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2007/comments",
    "created_at": "2017-11-16T15:31:40Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars3.githubusercontent.com/u/486017?v=4",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2017-11-17T04:58:11Z",
            "event": "closed",
            "id": 1346496959,
            "url": "https://api.github.com/repos/cython/cython/issues/events/1346496959"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2007/events",
    "html_url": "https://github.com/cython/cython/issues/2007",
    "id": 274557815,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2007/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 2007,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "closed",
    "title": "Successful compile and missing references C++ ",
    "updated_at": "2017-11-17T04:58:11Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2007",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/2105468?v=4",
        "events_url": "https://api.github.com/users/jlaura/events{/privacy}",
        "followers_url": "https://api.github.com/users/jlaura/followers",
        "following_url": "https://api.github.com/users/jlaura/following{/other_user}",
        "gists_url": "https://api.github.com/users/jlaura/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jlaura",
        "id": 2105468,
        "login": "jlaura",
        "organizations_url": "https://api.github.com/users/jlaura/orgs",
        "received_events_url": "https://api.github.com/users/jlaura/received_events",
        "repos_url": "https://api.github.com/users/jlaura/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jlaura/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jlaura/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jlaura"
    }
}