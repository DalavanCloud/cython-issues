{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The following code fails in a jupyter notebook. However if I work with double instead of double complex, everything works correctly. \r\n```\r\n%%cython -a\r\n'''\r\ntest cython \r\n'''\r\n\r\ncpdef test_array(double complex [:,::1] test):\r\n    \r\n    cdef int x1,y1 \r\n    x1,y1 = test.shape[0],test.shape[1]\r\n    \r\n    for i in range(x1):\r\n        for j in range(y1):\r\n            print(i,j,test[i][j])\r\n            test[i][j]+=0\r\n        \r\n    return\r\n```\r\nThe problem is due to ```test[i][j]+=0```. The error I get during compilation is :  \r\n```\r\n/home/sajid/.cache/ipython/cython/_cython_magic_da49badc209af5635b09816e8df29646.c: In function '__pyx_f_46_cython_magic_da49badc209af5635b09816e8df29646_test_array':\r\n/home/sajid/.cache/ipython/cython/_cython_magic_da49badc209af5635b09816e8df29646.c:2138:183: error: invalid operands to binary + (have '__pyx_t_double_complex {aka struct <anonymous>}' and '__pyx_t_double_complex {aka struct <anonymous>}')\r\n       *((__pyx_t_double_complex *) ( /* dim=1 */ ((char *) (((__pyx_t_double_complex *) ( /* dim=0 */ (__pyx_v_test.data + __pyx_t_17 * __pyx_v_test.strides[0]) )) + __pyx_t_18)) )) += __pyx_t_double_complex_from_parts(0, 0);\r\n                                                                                                                                                                                       ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/sajid/.cache/ipython/cython/_cython_magic_da49badc209af5635b09816e8df29646.c: In function '__pyx_f_46_cython_magic_da49badc209af5635b09816e8df29646_test_array':\r\n/home/sajid/.cache/ipython/cython/_cython_magic_da49badc209af5635b09816e8df29646.c:2138:183: error: invalid operands to binary + (have '__pyx_t_double_complex {aka struct <anonymous>}' and '__pyx_t_double_complex {aka struct <anonymous>}')\r\n       *((__pyx_t_double_complex *) ( /* dim=1 */ ((char *) (((__pyx_t_double_complex *) ( /* dim=0 */ (__pyx_v_test.data + __pyx_t_17 * __pyx_v_test.strides[0]) )) + __pyx_t_18)) )) += __pyx_t_double_complex_from_parts(0, 0);\r\n``` \r\nfollowed by disutils error message.\r\n\r\nEverything works if I use ```test[i][j] = test[i][j] + (0+0*1j)```. Is this failure of casting to double complex expected behavior or a bug ?",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "I don't see why this shouldn't work, so I vote for bug. Thanks for the report.",
            "created_at": "2018-09-23T15:30:04Z",
            "html_url": "https://github.com/cython/cython/issues/2512#issuecomment-423824654",
            "id": 423824654,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/2512",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzgyNDY1NA==",
            "updated_at": "2018-09-23T15:30:04Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/423824654",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 1,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2512/comments",
    "created_at": "2018-07-23T19:58:17Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-09-23T15:29:40Z",
            "event": "labeled",
            "id": 1862020229,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE4NjIwMjAyMjk=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1862020229"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-09-23T15:29:40Z",
            "event": "labeled",
            "id": 1862020230,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE4NjIwMjAyMzA=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1862020230"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2512/events",
    "html_url": "https://github.com/cython/cython/issues/2512",
    "id": 343773752,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2512/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzNDM3NzM3NTI=",
    "number": 2512,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "unable to pass numpy 2D double complex array to cython as memoryview for writing",
    "updated_at": "2018-09-23T15:30:05Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2512",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/30510036?v=4",
        "events_url": "https://api.github.com/users/s-sajid-ali/events{/privacy}",
        "followers_url": "https://api.github.com/users/s-sajid-ali/followers",
        "following_url": "https://api.github.com/users/s-sajid-ali/following{/other_user}",
        "gists_url": "https://api.github.com/users/s-sajid-ali/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/s-sajid-ali",
        "id": 30510036,
        "login": "s-sajid-ali",
        "node_id": "MDQ6VXNlcjMwNTEwMDM2",
        "organizations_url": "https://api.github.com/users/s-sajid-ali/orgs",
        "received_events_url": "https://api.github.com/users/s-sajid-ali/received_events",
        "repos_url": "https://api.github.com/users/s-sajid-ali/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/s-sajid-ali/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/s-sajid-ali/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/s-sajid-ali"
    }
}