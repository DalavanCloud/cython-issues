{
    "assignee": null,
    "assignees": [],
    "body": "I am using `double complex` numbers in my code in various places, e.g., as array types, with a custom type defined by\r\n```\r\nctypedef double complex dcomplex\r\n```\r\nThis results in faulty C code:\r\n```\r\n/* Declarations.proto */\r\n#if CYTHON_CCOMPLEX\r\n  #ifdef __cplusplus\r\n    typedef ::std::complex< npy_float64 > __pyx_t_npy_float64_complex;\r\n  #else\r\n    typedef npy_float64 _Complex __pyx_t_npy_float64_complex;\r\n  #endif\r\n#else\r\n    typedef struct { npy_float64 real, imag; } __pyx_t_npy_float64_complex;\r\n#endif\r\nstatic CYTHON_INLINE __pyx_t_npy_float64_complex __pyx_t_npy_float64_complex_from_parts(npy_float64, npy_float\r\n```\r\nThe ` typedef npy_float64 _Complex` is invalid as `_Complex` is only allowed to be used with basic types like `float` and `double`. If I manually change `npy_float64` to `double` everything works fine.\r\n\r\nInterestingly, the code generated for `float complex` is correct:\r\n```\r\n/* Declarations.proto */\r\n#if CYTHON_CCOMPLEX\r\n  #ifdef __cplusplus\r\n    typedef ::std::complex< float > __pyx_t_float_complex;\r\n  #else\r\n    typedef float _Complex __pyx_t_float_complex;\r\n  #endif\r\n#else\r\n    typedef struct { float real, imag; } __pyx_t_float_complex;\r\n#endif\r\nstatic CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);\r\n```\r\nThis is observed with Cython 0.25.2 on macOS with both gcc 6.3.0 and Apple LLVM's clang 8.1.0.",
    "closed_at": null,
    "comment_data": [
        {
            "body": "I'm not sure how the `npy_float64` would get there with the `ctypedef double complex dcomplex` declaration. Could you try to whittle this down to a reproducible snippet? ",
            "created_at": "2017-07-05T22:52:06Z",
            "html_url": "https://github.com/cython/cython/issues/1756#issuecomment-313248376",
            "id": 313248376,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1756",
            "updated_at": "2017-07-05T22:52:06Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/313248376",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/486017?v=3",
                "events_url": "https://api.github.com/users/robertwb/events{/privacy}",
                "followers_url": "https://api.github.com/users/robertwb/followers",
                "following_url": "https://api.github.com/users/robertwb/following{/other_user}",
                "gists_url": "https://api.github.com/users/robertwb/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/robertwb",
                "id": 486017,
                "login": "robertwb",
                "organizations_url": "https://api.github.com/users/robertwb/orgs",
                "received_events_url": "https://api.github.com/users/robertwb/received_events",
                "repos_url": "https://api.github.com/users/robertwb/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/robertwb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/robertwb/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/robertwb"
            }
        },
        {
            "body": "I spent considerable time trying to understand this behaviour, but it is utmost puzzling. I can identify the code where the `__pyx_t_npy_float64_complex`type is used, but if I isolate it, I do not observe this problem.\r\nThe classes, which use this type, are rather complex. They glue together PETSc, FFTW and LAPACK, which all use different representations for complex numbers. The lines where the problem appears, however, just computes entries of a complex array, which are products and sums of real and complex numbers. This looks, for example like this\r\n```\r\nfor j in range(self.grid.nv):\r\n    diag[j] = eigen * 0.5 * ( 2. * self.grid.hv * v[j] ) * fac\r\n```\r\nHere, diag and eigen are dcomplex, everything else is double.\r\n\r\nI just observed a very interesting effect. The array `v` is defined by\r\n```\r\ncdef double[:] v = self.grid.v\r\n```\r\nIf I disable this line and replace `v`in the above code by `self.grid.v`, i.e., \r\n```\r\nfor j in range(self.grid.nv):\r\n    diag[j] = eigen * 0.5 * ( 2. * self.grid.hv * self.grid.v[j] ) * fac\r\n```\r\nthe problem magically disappears. In the `grid` class, `v` is defined by\r\n```\r\ncdef readonly np.ndarray v\r\n```\r\nObviously, this is some old code where the `np.ndarray` should be replace with `double[:]`. But again, isolating this does not show the problem. Also, changing the definition of `grid.v` to `double[:]` does not solve the problem.",
            "created_at": "2017-07-06T09:39:41Z",
            "html_url": "https://github.com/cython/cython/issues/1756#issuecomment-313347998",
            "id": 313347998,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1756",
            "updated_at": "2017-07-06T09:48:36Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/313347998",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/21168502?v=3",
                "events_url": "https://api.github.com/users/michakraus/events{/privacy}",
                "followers_url": "https://api.github.com/users/michakraus/followers",
                "following_url": "https://api.github.com/users/michakraus/following{/other_user}",
                "gists_url": "https://api.github.com/users/michakraus/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/michakraus",
                "id": 21168502,
                "login": "michakraus",
                "organizations_url": "https://api.github.com/users/michakraus/orgs",
                "received_events_url": "https://api.github.com/users/michakraus/received_events",
                "repos_url": "https://api.github.com/users/michakraus/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/michakraus/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/michakraus/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/michakraus"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1756/comments",
    "created_at": "2017-07-03T11:38:25Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1756/events",
    "html_url": "https://github.com/cython/cython/issues/1756",
    "id": 240147063,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1756/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 1756,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Illegal C code created with double complex",
    "updated_at": "2017-07-06T09:48:36Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1756",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/21168502?v=3",
        "events_url": "https://api.github.com/users/michakraus/events{/privacy}",
        "followers_url": "https://api.github.com/users/michakraus/followers",
        "following_url": "https://api.github.com/users/michakraus/following{/other_user}",
        "gists_url": "https://api.github.com/users/michakraus/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/michakraus",
        "id": 21168502,
        "login": "michakraus",
        "organizations_url": "https://api.github.com/users/michakraus/orgs",
        "received_events_url": "https://api.github.com/users/michakraus/received_events",
        "repos_url": "https://api.github.com/users/michakraus/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/michakraus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/michakraus/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/michakraus"
    }
}