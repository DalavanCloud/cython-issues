{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "The below segfault occurs with version 0.25a0, on Python 3.5.2. I have verified it on Mac OS X 10.11.6 and on Linux (kernel 4.7.2, x86_64).\n\nIt is not a recent regression -- I reported this to the cython-devel email list in March, when I had observed the bug with Python 3.4.3 / Cython 0.23.4 and Python 2.7.10 / Cython 0.22.1 . At the time, there was no reply. When I saw that 0.25a0 was out, I thought I ought to verify that this is still an issue and post to github now that cython is using that.\n\nAnyhow, the issue is that a cython function with a fused type _and_ a keyword argument will cause an immediate segfault when its `__kwdefaults__` attribute is looked up. (Which happens on any sort of introspection, such looking up the function docstring in ipython, or even tab completion of the `__kwdefaults__` attribute name in plain python.)\n\nThe below is the simplest example:\nCreate the file `foo.pyx`:\n\n``` python\nctypedef fused FUSED:\n    float\n    int\n\ndef foo(FUSED bar, baz=None):\n    pass\n```\n\nThen in Python:\n\n```\n>>> import pyximport; pyximport.install()\n(None, <pyximport.pyximport.PyxImporter object at 0x10f7c0410>)\n>>> import foo\n>>> foo.foo.__kwdefaults__\nzsh: segmentation fault\n```\n\nThis works of course when compiled with a setup.py script as well; the above is just the most minimal test case. There's no segfault without the keyword argument, and no segfault if the fused type is replaced with a regular type.\n\nA relevant chunk of backtrace from Linux is below. The backtrace on the mac is identical.\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n__pyx_pf_3foo_12__defaults__ (__pyx_self=0x7ffff414d528)\n    at /home/zplab/.pyxbld/temp.linux-x86_64-3.5/pyrex/foo.c:1506\n1506      __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_baz);\n(gdb) bt\n#0  __pyx_pf_3foo_12__defaults__ (__pyx_self=0x7ffff414d528)\n    at /home/zplab/.pyxbld/temp.linux-x86_64-3.5/pyrex/foo.c:1506\n#1  0x00007ffff3228e51 in __Pyx_CyFunction_init_defaults (op=0x7ffff414d528)\n    at /home/zplab/.pyxbld/temp.linux-x86_64-3.5/pyrex/foo.c:3136\n#2  __Pyx_CyFunction_get_kwdefaults (op=0x7ffff414d528)\n    at /home/zplab/.pyxbld/temp.linux-x86_64-3.5/pyrex/foo.c:3206\n#3  0x00007ffff79a9bb3 in _PyObject_GenericGetAttrWithDict (\n    obj=0x7ffff414d528, name=0x7ffff69ffcf0, dict=0x0) at Objects/object.c:1059\n#4  0x00007ffff7a26c8e in PyEval_EvalFrameEx (f=<optimized out>, \n    throwflag=<optimized out>) at Python/ceval.c:2743\n#5  0x00007ffff7a2eb49 in _PyEval_EvalCodeWithName (_co=<optimized out>, \n    globals=<optimized out>, locals=<optimized out>, args=<optimized out>, \n    argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, \n    closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:4018\n#6  0x00007ffff7a2ecd8 in PyEval_EvalCodeEx (_co=<optimized out>, \n    globals=<optimized out>, locals=<optimized out>, args=<optimized out>, \n    argcount=<optimized out>, kws=<optimized out>, kwcount=0, defs=0x0, \n    defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:4039\n```\n",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "I just ran into this bug myself. Cython 0.28.1 installed from pip just moments ago on Python 3.6.3.",
            "created_at": "2018-04-05T06:18:29Z",
            "html_url": "https://github.com/cython/cython/issues/1470#issuecomment-378831541",
            "id": 378831541,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1470",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODgzMTU0MQ==",
            "updated_at": "2018-04-05T06:18:29Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/378831541",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/75203?v=4",
                "events_url": "https://api.github.com/users/hchapman/events{/privacy}",
                "followers_url": "https://api.github.com/users/hchapman/followers",
                "following_url": "https://api.github.com/users/hchapman/following{/other_user}",
                "gists_url": "https://api.github.com/users/hchapman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hchapman",
                "id": 75203,
                "login": "hchapman",
                "node_id": "MDQ6VXNlcjc1MjAz",
                "organizations_url": "https://api.github.com/users/hchapman/orgs",
                "received_events_url": "https://api.github.com/users/hchapman/received_events",
                "repos_url": "https://api.github.com/users/hchapman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hchapman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hchapman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hchapman"
            }
        },
        {
            "author_association": "NONE",
            "body": "Subscripting works. For the original MWE, calling help(foo[float]) doesn't die, and foo[float].\\_\\_kwdefaults__ returns None. (No subscript -> segfault as usual).\r\n\r\nI'm super naive, but looking at the code it seems that an InitDefaults call is missing for the fused, subscriptable type. Namely, the part surrounded by \">>>>\" for a specialization does not appear for the final generic part at the location \"<<<<\"...\r\n\r\n```\r\n  __pyx_t_12 = __pyx_FusedFunction_NewEx(&__pyx_fuse_1__pyx_mdef_9pd_markov_6markov_35foo, 0, __pyx_n_s_foo, NULL, __pyx_n_s_pd_markov_markov, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 385, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_12);\r\n>>>>>>>>>>>>>>>>>>>>>>\r\n  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_12, sizeof(__pyx_defaults21), 1)) __PYX_ERR(0, 385, __pyx_L1_error)\r\n  __Pyx_INCREF(Py_None);\r\n  __Pyx_CyFunction_Defaults(__pyx_defaults21, __pyx_t_12)->__pyx_arg_baz = Py_None;\r\n  __Pyx_GIVEREF(Py_None);\r\n>>>>>>>>>>>>>>>>>>>>>>\r\n  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_12, __pyx_t_7);\r\n  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_12, __pyx_pf_9pd_markov_6markov_80__defaults__);\r\n  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_int, __pyx_t_12) < 0) __PYX_ERR(0, 385, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\r\n  __pyx_t_12 = __pyx_FusedFunction_NewEx(&__pyx_mdef_9pd_markov_6markov_7foo, 0, __pyx_n_s_foo, NULL, __pyx_n_s_pd_markov_markov, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 385, __pyx_L1_error)\r\n  __Pyx_GOTREF(__pyx_t_12);\r\n<<<<<<<<<<<<<<<<<<<<<<<<<\r\n<<<<<<<<<<<<<<<<<<<<<<<<<\r\n  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_12, __pyx_t_7);\r\n  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_12, __pyx_pf_9pd_markov_6markov_78__defaults__);\r\n  ((__pyx_FusedFunctionObject *) __pyx_t_12)->__signatures__ = __pyx_t_11;\r\n  __Pyx_GIVEREF(__pyx_t_11);\r\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_foo, __pyx_t_12) < 0) __PYX_ERR(0, 385, __pyx_L1_error)\r\n  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;\r\n  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\r\n```\r\n\r\nI've tried looking at the actual Cython code that generates this, but I'm a bit out in the deep end on this one.",
            "created_at": "2018-04-05T07:49:11Z",
            "html_url": "https://github.com/cython/cython/issues/1470#issuecomment-378849548",
            "id": 378849548,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1470",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODg0OTU0OA==",
            "updated_at": "2018-04-05T07:49:11Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/378849548",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/75203?v=4",
                "events_url": "https://api.github.com/users/hchapman/events{/privacy}",
                "followers_url": "https://api.github.com/users/hchapman/followers",
                "following_url": "https://api.github.com/users/hchapman/following{/other_user}",
                "gists_url": "https://api.github.com/users/hchapman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hchapman",
                "id": 75203,
                "login": "hchapman",
                "node_id": "MDQ6VXNlcjc1MjAz",
                "organizations_url": "https://api.github.com/users/hchapman/orgs",
                "received_events_url": "https://api.github.com/users/hchapman/received_events",
                "repos_url": "https://api.github.com/users/hchapman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hchapman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hchapman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hchapman"
            }
        },
        {
            "author_association": "NONE",
            "body": "The issue appears to be that in `FusedNode.FusedCFuncDefNode.analyse_expressions()` the node at `self.resulting_fused_function.arg` does not populate a `defaults` parameter, even though all of the specialized nodes in `self.specialized_pyfuncs` do.\r\n\r\nI've tried messing around (I even just set the defaults manually to be the same as `self.specialized_pyfuncs[0]`) and I just do not know enough about the inner workings of the Compiler to get things to work.",
            "created_at": "2018-04-05T22:04:30Z",
            "html_url": "https://github.com/cython/cython/issues/1470#issuecomment-379090859",
            "id": 379090859,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1470",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA5MDg1OQ==",
            "updated_at": "2018-04-05T22:04:30Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/379090859",
            "user": {
                "avatar_url": "https://avatars2.githubusercontent.com/u/75203?v=4",
                "events_url": "https://api.github.com/users/hchapman/events{/privacy}",
                "followers_url": "https://api.github.com/users/hchapman/followers",
                "following_url": "https://api.github.com/users/hchapman/following{/other_user}",
                "gists_url": "https://api.github.com/users/hchapman/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/hchapman",
                "id": 75203,
                "login": "hchapman",
                "node_id": "MDQ6VXNlcjc1MjAz",
                "organizations_url": "https://api.github.com/users/hchapman/orgs",
                "received_events_url": "https://api.github.com/users/hchapman/received_events",
                "repos_url": "https://api.github.com/users/hchapman/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/hchapman/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hchapman/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/hchapman"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "Thanks for investigating. Yes, the problem is that the defaults of the dispatcher function do not get initialised. And it seems that that would also not be trivial, because - what should the defaults be? They might differ across the specialised functions depending on their concrete argument types.\r\n\r\nSo, I guess, the best (or at least easiest) solution for now would be to make sure things don't crash, but assume there are no default arguments for the dispatch function. Or inherit them from the first specialisation, whatever proves to be simpler to implement.",
            "created_at": "2018-04-08T07:26:56Z",
            "html_url": "https://github.com/cython/cython/issues/1470#issuecomment-379527612",
            "id": 379527612,
            "issue_url": "https://api.github.com/repos/cython/cython/issues/1470",
            "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTUyNzYxMg==",
            "updated_at": "2018-04-08T07:26:56Z",
            "url": "https://api.github.com/repos/cython/cython/issues/comments/379527612",
            "user": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/1470/comments",
    "created_at": "2016-09-25T19:21:01Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-04-08T07:27:50Z",
            "event": "labeled",
            "id": 1562490804,
            "label": {
                "color": "444444",
                "name": "defect"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE1NjI0OTA4MDQ=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1562490804"
        },
        {
            "actor": {
                "avatar_url": "https://avatars0.githubusercontent.com/u/491659?v=4",
                "events_url": "https://api.github.com/users/scoder/events{/privacy}",
                "followers_url": "https://api.github.com/users/scoder/followers",
                "following_url": "https://api.github.com/users/scoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/scoder/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/scoder",
                "id": 491659,
                "login": "scoder",
                "node_id": "MDQ6VXNlcjQ5MTY1OQ==",
                "organizations_url": "https://api.github.com/users/scoder/orgs",
                "received_events_url": "https://api.github.com/users/scoder/received_events",
                "repos_url": "https://api.github.com/users/scoder/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/scoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/scoder/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/scoder"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2018-04-08T07:27:51Z",
            "event": "labeled",
            "id": 1562490805,
            "label": {
                "color": "444444",
                "name": "Code Generation"
            },
            "node_id": "MDEyOkxhYmVsZWRFdmVudDE1NjI0OTA4MDU=",
            "url": "https://api.github.com/repos/cython/cython/issues/events/1562490805"
        }
    ],
    "events_url": "https://api.github.com/repos/cython/cython/issues/1470/events",
    "html_url": "https://github.com/cython/cython/issues/1470",
    "id": 179103485,
    "labels": [
        {
            "color": "444444",
            "default": false,
            "id": 425556330,
            "name": "Code Generation",
            "node_id": "MDU6TGFiZWw0MjU1NTYzMzA=",
            "url": "https://api.github.com/repos/cython/cython/labels/Code%20Generation"
        },
        {
            "color": "444444",
            "default": false,
            "id": 425553654,
            "name": "defect",
            "node_id": "MDU6TGFiZWw0MjU1NTM2NTQ=",
            "url": "https://api.github.com/repos/cython/cython/labels/defect"
        }
    ],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/1470/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUxNzkxMDM0ODU=",
    "number": 1470,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "segfault with fused types and __kwdefaults__",
    "updated_at": "2018-04-08T07:27:51Z",
    "url": "https://api.github.com/repos/cython/cython/issues/1470",
    "user": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/174217?v=4",
        "events_url": "https://api.github.com/users/zpincus/events{/privacy}",
        "followers_url": "https://api.github.com/users/zpincus/followers",
        "following_url": "https://api.github.com/users/zpincus/following{/other_user}",
        "gists_url": "https://api.github.com/users/zpincus/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zpincus",
        "id": 174217,
        "login": "zpincus",
        "node_id": "MDQ6VXNlcjE3NDIxNw==",
        "organizations_url": "https://api.github.com/users/zpincus/orgs",
        "received_events_url": "https://api.github.com/users/zpincus/received_events",
        "repos_url": "https://api.github.com/users/zpincus/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zpincus/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zpincus/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zpincus"
    }
}