{
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Hi,\r\n\r\nwe are currently facing an interesting issue downstream in `setuptools` with an imported, incompatible Cython install that might exist in a user's environment, e.g. while working with python virtual environments, conda or spack: https://github.com/pypa/setuptools/issues/1229#issuecomment-349644856\r\n\r\nThe main issue comes down to the fact that a downstream \"optional usage of Cython\" in the form of\r\n\r\n```python\r\ntry:\r\n    # Attempt to use Cython for building extensions, if available\r\n    from Cython.Distutils.build_ext import build_ext as _build_ext\r\nexcept ImportError:\r\n    # some fallback such as\r\n    _build_ext = _du_build_ext\r\n```\r\n\r\nwill not catch any errors that can occur when using a compiled library such as Cython. Exemplary errors can look like\r\n\r\n```\r\nfailed to import Cython: /home/axel/.local/lib/python2.7/site-packages/Cython/Compiler/Scanning.so: undefined symbol: PyUnicodeUCS4_DecodeUTF8\r\nUnexpected error: <class 'distutils.errors.DistutilsPlatformError'>\r\n```\r\n\r\nin the case of symbol mismatches between currently used virtual environment, system or user libraries. Unfortunately, such errors are not triggered on `import` but as soon as the imported functionality is used later on. (A full reproducer is posted [here](https://github.com/pypa/setuptools/issues/1229#issuecomment-349732124) including a Dockerfile.)\r\n\r\nWe were wondering if there already is or if one could add a short, side-effect free \"test\" interface that one could call [directly after the import in the same `try` scope](https://github.com/pypa/setuptools/issues/1229#issuecomment-349973536) in order to reliably trigger and catch incompatibly imported Cython installs?\r\n\r\nAny feedback or suggestions are very welcome!",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2061/comments",
    "created_at": "2018-01-08T17:02:04Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2061/events",
    "html_url": "https://github.com/cython/cython/issues/2061",
    "id": 286813476,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2061/labels{/name}",
    "locked": false,
    "milestone": null,
    "number": 2061,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Quick Test Routine After Import",
    "updated_at": "2018-01-08T17:02:04Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2061",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/1353258?v=4",
        "events_url": "https://api.github.com/users/ax3l/events{/privacy}",
        "followers_url": "https://api.github.com/users/ax3l/followers",
        "following_url": "https://api.github.com/users/ax3l/following{/other_user}",
        "gists_url": "https://api.github.com/users/ax3l/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ax3l",
        "id": 1353258,
        "login": "ax3l",
        "organizations_url": "https://api.github.com/users/ax3l/orgs",
        "received_events_url": "https://api.github.com/users/ax3l/received_events",
        "repos_url": "https://api.github.com/users/ax3l/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ax3l/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ax3l/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ax3l"
    }
}