{
    "assignee": null,
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "body": "# Problem\r\n\r\nWhen calling a method returning a type convertible to a native Python type, Cython uses C macros to simplify life. Unfortunately, when calling template functions with multiple parameters, this cases the macro to think it was passed multiple arguments, when in fact, only one was passed.\r\n\r\n# Reproducibility\r\n\r\n**sample.h**\r\n```cpp\r\n#pragma once\r\n\r\ntemplate <typename T, typename U>\r\nbool is_equal(const T& t, const U& u)\r\n{\r\n    return t == u;\r\n}\r\n```\r\n\r\n**sample.pxd**\r\n```cython\r\ncdef extern from \"sample.h\":\r\n    bint is_equal[T, U](const T&, const U&)\r\n```\r\n\r\n**sample.pyx**\r\n```cython\r\ndef equals(int x, int y):\r\n    return is_equal(<long>(x), <long>(y))\r\n```\r\n\r\n**setup.py**\r\n```python\r\nfrom setuptools import setup\r\nfrom Cython.Distutils import Extension\r\nfrom Cython.Build import cythonize\r\n\r\nsetup(name='sample',\r\n    ext_modules=cythonize([\r\n        Extension(\r\n            name='sample',\r\n            sources=[\r\n                'sample.pyx',\r\n            ],\r\n            include_dirs=['.'],\r\n            extra_compile_args=['-std=c++11'],\r\n            language='c++'\r\n        )\r\n    ]),\r\n)\r\n```\r\n\r\n# Error Message\r\n\r\n```\r\nsample.cpp:1054:94: error: macro \"__Pyx_PyBool_FromLong\" passed 2 arguments, but takes just 1\r\n l_FromLong(is_equal<long,long>(((long)__pyx_v_x), ((long)__pyx_v_y))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)\r\n                                                                     ^\r\nsample.cpp: In function ‘PyObject* __pyx_pf_6sample_equals(PyObject*, int, int)’:\r\nsample.cpp:1054:15: error: ‘__Pyx_PyBool_FromLong’ was not declared in this scope\r\n   __pyx_t_1 = __Pyx_PyBool_FromLong(is_equal<long,long>(((long)__pyx_v_x), ((long)__pyx_v_y))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)\r\n               ^~~~~~~~~~~~~~~~~~~~~\r\nsample.cpp:1054:15: note: suggested alternative: ‘__Pyx_PyInt_From_long’\r\n   __pyx_t_1 = __Pyx_PyBool_FromLong(is_equal<long,long>(((long)__pyx_v_x), ((long)__pyx_v_y))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)\r\n               ^~~~~~~~~~~~~~~~~~~~~\r\n               __Pyx_PyInt_From_long\r\nerror: command 'gcc' failed with exit status 1\r\n```\r\n# Possible Solutions\r\n\r\nYou could easily enclose the function name in parentheses, to ensure it does not undergo macro replacement.\r\n\r\nFor example, the following change in the generated `.cpp` file corrects the issue:\r\n\r\n```diff\r\n-__pyx_t_1 = __Pyx_PyBool_FromLong(is_equal<long,long>(((long)__pyx_v_x), ((long)__pyx_v_y)));\r\n+__pyx_t_1 = __Pyx_PyBool_FromLong((is_equal<long,long>)(((long)__pyx_v_x), ((long)__pyx_v_y)));\r\n```\r\n\r\nAnother option would be to make them inline functions, but this would only work in C++ I believe. A last option would be to always store a temporary variable (manually storing a cdef to a temporary always works in my experience to work around this issue). I'm not familiar enough with the expansion of the Cython template function in native C++ code to patch the code myself, however, I can suggest possible workarounds.",
    "closed_at": null,
    "comment_data": [],
    "comments": 0,
    "comments_url": "https://api.github.com/repos/cython/cython/issues/2121/comments",
    "created_at": "2018-02-28T03:25:27Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/cython/cython/issues/2121/events",
    "html_url": "https://github.com/cython/cython/issues/2121",
    "id": 300878084,
    "labels": [],
    "labels_url": "https://api.github.com/repos/cython/cython/issues/2121/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWUzMDA4NzgwODQ=",
    "number": 2121,
    "repository_url": "https://api.github.com/repos/cython/cython",
    "state": "open",
    "title": "Error when calling multi-parameter template functions returning a type convertible to a Python-native type.",
    "updated_at": "2018-02-28T03:31:21Z",
    "url": "https://api.github.com/repos/cython/cython/issues/2121",
    "user": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/9440903?v=4",
        "events_url": "https://api.github.com/users/Alexhuszagh/events{/privacy}",
        "followers_url": "https://api.github.com/users/Alexhuszagh/followers",
        "following_url": "https://api.github.com/users/Alexhuszagh/following{/other_user}",
        "gists_url": "https://api.github.com/users/Alexhuszagh/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Alexhuszagh",
        "id": 9440903,
        "login": "Alexhuszagh",
        "node_id": "MDQ6VXNlcjk0NDA5MDM=",
        "organizations_url": "https://api.github.com/users/Alexhuszagh/orgs",
        "received_events_url": "https://api.github.com/users/Alexhuszagh/received_events",
        "repos_url": "https://api.github.com/users/Alexhuszagh/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Alexhuszagh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Alexhuszagh/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Alexhuszagh"
    }
}