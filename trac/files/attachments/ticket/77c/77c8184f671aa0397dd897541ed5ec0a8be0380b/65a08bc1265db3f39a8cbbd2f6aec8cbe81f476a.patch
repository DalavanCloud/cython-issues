# HG changeset patch
# User Carl Witty <Carl.Witty@gmail.com>
# Date 1280211900 25200
# Node ID ef49756760bd9d35a16791c8e4271d143c1800d1
# Parent  ee7d9e8b339e5056f6d602ac50e3d55b7756628b
trac #561: fixed major performance bug in special functions (by not generating Python versions and letting PyType_Ready() do it instead; details are on the trac ticket)

diff --git a/Cython/Compiler/Code.py b/Cython/Compiler/Code.py
--- a/Cython/Compiler/Code.py
+++ b/Cython/Compiler/Code.py
@@ -1230,7 +1230,14 @@
         #    code = "((PyObject*)%s)" % code
         self.put_init_to_py_none(code, entry.type, nanny)
 
-    def put_pymethoddef(self, entry, term):
+    def put_pymethoddef(self, entry, term, allow_skip=True):
+        if entry.is_special or entry.name in ['__getitem__', '__setslice__', '__delslice__', '__setitem__', '__delitem__', '__getattr__', '__getattribute__', '__setattr__', '__delattr__']:
+            if entry.name not in ['__next__', '__getreadbuffer__', '__getwritebuffer__', '__getsegcount__', '__getcharbuffer__', '__getbuffer__', '__releasebuffer__']:
+                # Python's typeobject.c will automatically fill in our slot
+                # in add_operators() (called by PyType_Ready) with a value
+                # that's better than ours.
+                if allow_skip:
+                    return
         from TypeSlots import method_coexist
         if entry.doc:
             doc_code = entry.doc_cname
diff --git a/Cython/Compiler/Nodes.py b/Cython/Compiler/Nodes.py
--- a/Cython/Compiler/Nodes.py
+++ b/Cython/Compiler/Nodes.py
@@ -2239,7 +2239,7 @@
             code.put(
                 "static PyMethodDef %s = " % 
                     self.entry.pymethdef_cname)
-            code.put_pymethoddef(self.entry, ";")
+            code.put_pymethoddef(self.entry, ";", allow_skip=False)
         code.putln("%s {" % header)
 
     def generate_argument_declarations(self, env, code):
