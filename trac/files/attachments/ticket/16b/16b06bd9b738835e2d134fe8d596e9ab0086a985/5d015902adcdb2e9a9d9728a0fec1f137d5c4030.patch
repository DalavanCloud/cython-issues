diff -r 420995471deb Cython/Compiler/Code.py
--- a/Cython/Compiler/Code.py	Tue Sep 23 13:55:49 2008 -0700
+++ b/Cython/Compiler/Code.py	Sat Sep 27 13:28:37 2008 -0700
@@ -345,7 +345,7 @@
         If name is provided, it is used as an identifier to avoid inserting
         code twice. Otherwise, id(codetup) is used as such an identifier.
         """
-        if name is None: name = id(codetup)
+        if name is None: name = codetup[0]
         if self.check_utility_code_needed_and_register(name):
             proto, _def = codetup
             self.utilprotowriter.put(proto)
diff -r 420995471deb Cython/Compiler/Main.py
--- a/Cython/Compiler/Main.py	Tue Sep 23 13:55:49 2008 -0700
+++ b/Cython/Compiler/Main.py	Sat Sep 27 13:28:37 2008 -0700
@@ -2,17 +2,23 @@
 #   Cython Top Level
 #
 
-import os, sys, re, codecs
+import os, sys, re, codecs, copy
 if sys.version_info[:2] < (2, 3):
     sys.stderr.write("Sorry, Cython requires Python 2.3 or later\n")
     sys.exit(1)
+import cPickle as pickle
 
 try:
     set
 except NameError:
     # Python 2.3
     from sets import Set as set
-
+    
+try:
+    import hashlib
+except ImportError:
+    import md5 as hashlib
+    
 from time import time
 import Code
 import Errors
@@ -59,7 +65,7 @@
     #  include_directories   [string]
     #  future_directives     [object]
     
-    def __init__(self, include_directories, pragma_overrides):
+    def __init__(self, include_directories, pragma_overrides, pxd_cache=None):
         #self.modules = {"__builtin__" : BuiltinScope()}
         import Builtin, CythonScope
         self.modules = {"__builtin__" : Builtin.builtin_scope}
@@ -73,6 +79,8 @@
         standard_include_path = os.path.abspath(
             os.path.join(os.path.dirname(__file__), '..', 'Includes'))
         self.include_directories = include_directories + [standard_include_path]
+        self.pxd_cache = pxd_cache
+        
 
     def create_pipeline(self, pxd):
         from Visitor import PrintTree
@@ -177,9 +185,10 @@
             if Errors.num_errors == 0:
                 raise
         return (err, data)
-
+        
     def find_module(self, module_name, 
-            relative_to = None, pos = None, need_pxd = 1):
+            relative_to = None, pos = None, need_pxd = 1,
+            locate_only = 0):
         # Finds and returns the module scope corresponding to
         # the given relative or absolute module name. If this
         # is the first time the module has been requested, finds
@@ -216,10 +225,9 @@
                 scope = scope.find_submodule(name)
         if debug_find_module:
             print("...scope =", scope)
-        if not scope.pxd_file_loaded:
+        if not scope.pxd_file_loaded or locate_only:
             if debug_find_module:
                 print("...pxd not loaded")
-            scope.pxd_file_loaded = 1
             if not pxd_pathname:
                 if debug_find_module:
                     print("...looking for pxd file")
@@ -228,16 +236,38 @@
                     print("......found ", pxd_pathname)
                 if not pxd_pathname and need_pxd:
                     error(pos, "'%s.pxd' not found" % module_name)
+            if locate_only:
+                # find_pxd_file is rather weak, so we pass this option to do 
+                # a more extensive search. 
+                return pxd_pathname
+            scope.pxd_file_loaded = 1
             if pxd_pathname:
                 try:
                     if debug_find_module:
                         print("Context.find_module: Parsing %s" % pxd_pathname)
-                    source_desc = FileSourceDescriptor(pxd_pathname)
-                    err, result = self.process_pxd(source_desc, scope, module_name)
-                    if err:
-                        raise err
-                    (pxd_codenodes, pxd_scope) = result
-                    self.pxds[module_name] = (pxd_codenodes, pxd_scope)
+                    result = None
+                    if self.pxd_cache:
+                        result = self.pxd_cache[pxd_pathname]
+                        if result:
+                            save = scope.module_cname, scope.method_table_cname
+                            scope.__dict__ = result[1].__dict__
+                            scope.module_cname, scope.method_table_cname = save
+                    if not result:
+                        source_desc = FileSourceDescriptor(pxd_pathname)
+                        err, result = self.process_pxd(source_desc, scope, module_name)
+                        if err:
+                            raise err
+                        if self.pxd_cache:
+                            pxd_codenodes, pxd_scope = result
+                            result[1].cimported_module_filenames = [self.find_module(m.module_name, relative_to, pos = pos, locate_only = True) for m in result[1].cimported_modules]
+                            result[1].cimported_module_filenames = [mf for mf in result[1].cimported_module_filenames if mf is not None]
+                            self.pxd_cache.cache(pxd_pathname, result)
+                            if not need_pxd or 1:
+                                # We must be processing the corresponding pyx file, 
+                                # and don't want to contaminate the cached scope. 
+                                scope = copy.deepcopy(scope)
+                    pxd_codenodes, pxd_scope = result
+                    self.pxds[module_name] = result
                 except CompileError:
                     pass
         return scope
@@ -490,8 +520,20 @@
     return result
 
 def run_pipeline(source, options, full_module_name = None):
+
+    options.pxd_cache_file = "pxd_cache.pickle"
+    if options.pxd_cache_file:
+        if os.path.exists(options.pxd_cache_file):
+            pxd_cache = pickle.load(open(options.pxd_cache_file))
+            pxd_cache.clean()
+            pxd_cache.verify()
+        else:
+            pxd_cache = PxdCache()
+    else:
+        pxd_cache = None
+
     # Set up context
-    context = Context(options.include_path, options.pragma_overrides)
+    context = Context(options.include_path, options.pragma_overrides, pxd_cache)
 
     # Set up source object
     cwd = os.getcwd()
@@ -508,6 +550,10 @@
     context.setup_errors(options)
     err, enddata = context.run_pipeline(pipeline, source)
     context.teardown_errors(err, options, result)
+    
+    if pxd_cache and pxd_cache.is_dirty():
+        pickle.dump(pxd_cache, open(options.pxd_cache_file, "w"), 2)
+    
     return result
 
 #------------------------------------------------------------------------
@@ -675,6 +721,88 @@
         return compile_single(source, options, full_module_name)
     else:
         return compile_multiple(source, options)
+        
+
+
+class PxdDependancy:
+
+    _file_digest_cache = {}
+
+    def __init__(self, path):
+        self.path = path
+        self.digest = self.file_digest(path)
+        self.dependants = []
+        self.valid = True
+
+    def file_digest(self, pathname):
+        digest = self._file_digest_cache.get(pathname)
+        if digest is None:
+            m = hashlib.md5()
+            m.update(open(pathname).read())
+            digest = self._file_digest_cache[pathname] = m.hexdigest()
+        return digest
+        
+    def verify(self):
+        if not self.valid:
+            return False
+        elif not os.path.exists(self.path):
+            return False
+        else:
+            return self.digest == self.file_digest(self.path)
+
+
+class PxdCache:
+    """
+    This class stores caches the parse results of .pxd files, verifying that
+    they are fresh using md5 hashes. 
+    """
+    _file_digest_cache = {}
+    
+    def __init__(self):
+        self.dirty = False
+        self.pxds = {}
+        self.deps = {}
+        
+    def clean(self):
+        self.dirty = False
+        
+    def is_dirty(self):
+        return self.dirty
+        
+    def __getitem__(self, module_filepath):
+        return self.pxds.get(module_filepath)
+        
+    def cache(self, path, (pxd_codenodes, pxd_scope)):
+        self.dirty = True
+        pxd_scope.filepath = path
+        self.pxds[path] = pxd_codenodes, pxd_scope
+        dependancies = [path] + pxd_scope.included_files + pxd_scope.cimported_module_filenames
+        for dep in dependancies:
+            data = self.deps.get(dep)
+            if data is None:
+                data = self.deps[dep] = PxdDependancy(dep)
+            data.dependants.append(path)
+        
+    def verify(self):
+        PxdDependancy._file_digest_cache = {}
+        bad = []
+        for dep, dep_data in self.deps.items():
+            if not dep_data.verify():
+                bad.append((dep, dep_data))
+        if bad:
+            self.dirty = True
+        while bad:
+            dep, dep_data = bad.pop()
+            del self.deps[dep]
+            if self.pxds.has_key(dep):
+                del self.pxds[dep]
+            for depend in dep_data.dependants:
+                depend_data = self.deps.get(depend)
+                if depend_data is not None and depend_data.valid:
+                    depend_data.valid = False
+                    bad.append((depend, depend_data))
+
+
 
 #------------------------------------------------------------------------
 #
diff -r 420995471deb Cython/Compiler/ModuleNode.py
--- a/Cython/Compiler/ModuleNode.py	Tue Sep 23 13:55:49 2008 -0700
+++ b/Cython/Compiler/ModuleNode.py	Sat Sep 27 13:28:37 2008 -0700
@@ -64,7 +64,7 @@
         if self.has_imported_c_functions():
             self.module_temp_cname = env.allocate_temp_pyobject()
             env.release_temp(self.module_temp_cname)
-        if options.recursive:
+        if options.recursive or 1:
             self.generate_dep_file(env, result)
         self.generate_c_code(env, options, result)
         self.generate_h_code(env, options, result)
diff -r 420995471deb Cython/Compiler/PyrexTypes.py
--- a/Cython/Compiler/PyrexTypes.py	Tue Sep 23 13:55:49 2008 -0700
+++ b/Cython/Compiler/PyrexTypes.py	Sat Sep 27 13:28:37 2008 -0700
@@ -7,9 +7,56 @@
 import copy
 
 
-class BaseType:
+_type_cache = {}
+
+class BaseTypeKey(object):
+
+    def __init__(self, cls, args, kwds):
+        self.data = cls, args, tuple(kwds.items())
+        try:
+            hash(self.data)
+        except:
+            targs = []
+            for a in self.data[1]:
+                if isinstance(a, list):
+                    a = tuple(a)
+                targs.append(a)
+            self.data = self.data[0], tuple(targs), self.data[2]
+        
+    def __hash__(self):
+        return hash(self.data)
+            
+    def __cmp__(left, right):
+        c = cmp(type(left), type(right))
+        if c == 0:
+            return cmp(left.data, right.data)
+        else:
+            return c
+
+class BaseType(object):
     #
     #  Base class for all Pyrex types including pseudo-types.
+    
+    def __new__(cls, *args, **kwds):
+        if issubclass(cls, (PyExtensionType, BufferType)):
+            return super(BaseType, cls).__new__(cls, *args, **kwds)
+        else:
+            if len(args) == 1 and isinstance(args[0], BaseTypeKey):
+                key = args[0]
+                args, kwds = key.data[1], dict(key.data[2])
+            else:
+                key = BaseTypeKey(cls, args, kwds)
+            t = _type_cache.get(key)
+            if t is None:
+                t = _type_cache[key] = super(BaseType, cls).__new__(cls, *args, **kwds)
+                t._key = key
+            return t
+        
+    def __getnewargs__(self):
+        if isinstance(self, (PyExtensionType, BufferType)):
+            return ()
+        else:
+            return (self._key,)
 
     def cast_code(self, expr_code):
         return "((%s)%s)" % (self.declaration_code(""), expr_code)
@@ -116,6 +163,14 @@
         return self.same_as_resolved_type(other_type.resolve(), **kwds)
     
     def same_as_resolved_type(self, other_type):
+        if str(self) == str(other_type) and self != other_type:
+            print self, id(self), type(self)
+            print other_type, id(other_type), type(other_type)   
+            import cPickle as pickle
+            print id(pickle.loads(pickle.dumps(self, 2)))
+            print id(pickle.loads(pickle.dumps(other_type, 2)))
+            print self.has_attributes
+#            print self._key, other_type._key
         return self == other_type or other_type is error_type
     
     def subtype_of(self, other_type):
@@ -156,6 +211,9 @@
     def __init__(self, cname, base_type):
         self.typedef_cname = cname
         self.typedef_base_type = base_type
+        
+    def __setstate__(self, state):
+        self.__dict__ = state
     
     def resolve(self):
         return self.typedef_base_type.resolve()
@@ -207,6 +265,7 @@
 
     is_buffer = 1
     writable = True
+    
     def __init__(self, base, dtype, ndim, mode, negative_indices, cast):
         self.base = base
         self.dtype = dtype
@@ -215,6 +274,9 @@
         self.mode = mode
         self.negative_indices = negative_indices
         self.cast = cast
+    
+    def __setstate__(self, state):
+        self.__dict__ = state
     
     def as_argument_type(self):
         return self
@@ -238,7 +300,7 @@
     pymemberdef_typecode = "T_OBJECT"
     buffer_defaults = None
     typestring = "O"
-    
+
     def __str__(self):
         return "Python object"
     
diff -r 420995471deb Cython/Includes/python_version.pxd
--- a/Cython/Includes/python_version.pxd	Tue Sep 23 13:55:49 2008 -0700
+++ b/Cython/Includes/python_version.pxd	Sat Sep 27 13:28:37 2008 -0700
@@ -28,5 +28,5 @@
     #    0xC (release candidate)
     #    0xF (final)
 
-    char[] PY_VERSION
-    char[] PY_PATCHLEVEL_REVISION
+    char* PY_VERSION
+    char* PY_PATCHLEVEL_REVISION
