exporting patch:
# HG changeset patch
# User Vitja Makarov <vitja.makarov@gmail.com>
# Date 1290122892 -10800
# Node ID 10d8af264a215cc0d495b5dea365f7331f905a1f
# Parent  9d8cd66bdd098d428632910de11485cae233ea6f
Support class closures and nested classes.

Disable some pyregr tests. As side effect this seems to solve ticket #537

diff -r 9d8cd66bdd09 -r 10d8af264a21 Cython/Compiler/Nodes.py
--- a/Cython/Compiler/Nodes.py	Thu Nov 18 20:48:25 2010 +0100
+++ b/Cython/Compiler/Nodes.py	Fri Nov 19 02:28:12 2010 +0300
@@ -1177,7 +1177,7 @@
     def create_local_scope(self, env):
         genv = env
         while genv.is_py_class_scope or genv.is_c_class_scope:
-            genv = env.outer_scope
+            genv = genv.outer_scope
         if self.needs_closure:
             lenv = ClosureScope(name=self.entry.name,
                                 outer_scope = genv,
@@ -1255,11 +1255,15 @@
         self.generate_function_header(code,
             with_pymethdef = with_pymethdef)
         # ----- Local variable declarations
+        # Find function scope
+        cenv = env
+        while cenv.is_py_class_scope or cenv.is_c_class_scope:
+            cenv = cenv.outer_scope
         if lenv.is_closure_scope:
             code.put(lenv.scope_class.type.declaration_code(Naming.cur_scope_cname))
             code.putln(";")
-        elif env.is_closure_scope:
-            code.put(env.scope_class.type.declaration_code(Naming.outer_scope_cname))
+        elif cenv.is_closure_scope:
+            code.put(cenv.scope_class.type.declaration_code(Naming.outer_scope_cname))
             code.putln(";")
         self.generate_argument_declarations(lenv, code)
         for entry in lenv.var_entries:
@@ -1310,14 +1314,14 @@
             code.putln("}")
             code.put_gotref(Naming.cur_scope_cname)
             # Note that it is unsafe to decref the scope at this point.
-        if env.is_closure_scope:
+        if cenv.is_closure_scope:
             code.putln("%s = (%s)%s;" % (
                             outer_scope_cname,
-                            env.scope_class.type.declaration_code(''),
+                            cenv.scope_class.type.declaration_code(''),
                             Naming.self_cname))
             if self.needs_closure:
                 # inner closures own a reference to their outer parent
-                code.put_incref(outer_scope_cname, env.scope_class.type)
+                code.put_incref(outer_scope_cname, cenv.scope_class.type)
                 code.put_giveref(outer_scope_cname)
         # ----- Trace function call
         if profile:
@@ -2211,18 +2215,21 @@
 
     def synthesize_assignment_node(self, env):
         import ExprNodes
-        if env.is_py_class_scope:
-            rhs = ExprNodes.PyCFunctionNode(self.pos,
-                        pymethdef_cname = self.entry.pymethdef_cname)
-            if not self.is_staticmethod and not self.is_classmethod:
-                rhs.binding = True
-
-        elif env.is_closure_scope:
+        genv = env
+        while genv.is_py_class_scope or genv.is_c_class_scope:
+            genv = genv.outer_scope
+
+        if genv.is_closure_scope:
             rhs = ExprNodes.InnerFunctionNode(
                 self.pos, pymethdef_cname = self.entry.pymethdef_cname)
         else:
             rhs = ExprNodes.PyCFunctionNode(
                 self.pos, pymethdef_cname = self.entry.pymethdef_cname, binding = env.directives['binding'])
+
+        if env.is_py_class_scope:
+            if not self.is_staticmethod and not self.is_classmethod:
+                rhs.binding = True
+
         self.assmt = SingleAssignmentNode(self.pos,
             lhs = ExprNodes.NameNode(self.pos, name = self.name),
             rhs = rhs)
@@ -3002,8 +3009,8 @@
         
     def create_scope(self, env):
         genv = env
-        while env.is_py_class_scope or env.is_c_class_scope:
-            env = env.outer_scope
+        while genv.is_py_class_scope or genv.is_c_class_scope:
+            genv = genv.outer_scope
         cenv = self.scope = PyClassScope(name = self.name, outer_scope = genv)
         return cenv
     
diff -r 9d8cd66bdd09 -r 10d8af264a21 Cython/Compiler/ParseTreeTransforms.py
--- a/Cython/Compiler/ParseTreeTransforms.py	Thu Nov 18 20:48:25 2010 +0100
+++ b/Cython/Compiler/ParseTreeTransforms.py	Fri Nov 19 02:28:12 2010 +0300
@@ -1318,7 +1318,7 @@
         return node
 
     def create_class_from_scope(self, node, target_module_scope):
-        as_name = "%s%s" % (Naming.closure_class_prefix, node.entry.cname)
+        as_name = '%s_%s' % (target_module_scope.next_id(Naming.closure_class_prefix), node.entry.cname)
         func_scope = node.local_scope
 
         entry = target_module_scope.declare_c_class(name = as_name,
@@ -1327,11 +1327,15 @@
         class_scope = entry.type.scope
         class_scope.is_internal = True
         class_scope.directives = {'final': True}
-        if node.entry.scope.is_closure_scope:
+
+        cscope = node.entry.scope
+        while cscope.is_py_class_scope or cscope.is_c_class_scope:
+            cscope = cscope.outer_scope
+        if cscope.is_closure_scope:
             class_scope.declare_var(pos=node.pos,
                                     name=Naming.outer_scope_cname, # this could conflict?
                                     cname=Naming.outer_scope_cname,
-                                    type=node.entry.scope.scope_class.type,
+                                    type=cscope.scope_class.type,
                                     is_cdef=True)
         entries = func_scope.entries.items()
         entries.sort()
diff -r 9d8cd66bdd09 -r 10d8af264a21 Cython/Compiler/Parsing.py
--- a/Cython/Compiler/Parsing.py	Thu Nov 18 20:48:25 2010 +0100
+++ b/Cython/Compiler/Parsing.py	Fri Nov 19 02:28:12 2010 +0300
@@ -1740,7 +1740,7 @@
             s.level = ctx.level
             return p_def_statement(s, decorators)
         elif s.sy == 'class':
-            if ctx.level != 'module':
+            if ctx.level not in ('module', 'function', 'class', 'other'):
                 s.error("class definition not allowed here")
             return p_class_statement(s, decorators)
         elif s.sy == 'include':
diff -r 9d8cd66bdd09 -r 10d8af264a21 tests/bugs.txt
--- a/tests/bugs.txt	Thu Nov 18 20:48:25 2010 +0100
+++ b/tests/bugs.txt	Fri Nov 19 02:28:12 2010 +0300
@@ -23,6 +23,8 @@
 pyregr.test_threadsignals
 pyregr.test_module
 pyregr.test_capi
+pyregr.test_socket
+pyregr.test_threading
 
 # CPython regression tests that don't make sense
 pyregr.test_gdb
